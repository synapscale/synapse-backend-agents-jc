{
  "timestamp": "2025-07-01T17:51:14.623911",
  "total_files_found": 78,
  "relevant_files": 54,
  "categories": {
    "keep_current_functional": [
      "test_llm_endpoints.py",
      "test_error_handling_system.py",
      "test_service_layer_integration.py",
      "test_auth_endpoints.py",
      "test_endpoints_comprehensive.py",
      "test_endpoints_functional.py"
    ],
    "review_individual": [
      "test_registration_debug.py",
      "test_agents_system.py",
      "test_complete_llm_system.py",
      "test_cleanup_analysis.py",
      "test_service_architecture.py",
      "test_llm_endpoint.py"
    ],
    "keep_config": [
      "test_config.json"
    ],
    "other": [
      "DATABASE_OPTIMIZED_RESTRUCTURING_PLAN.md",
      "requirements.txt",
      "DATABASE_RESTRUCTURING_OPINION.md",
      "current_openapi.json",
      "README.md",
      "SECURITY_API_KEYS.md",
      "init-debug.log",
      "AGENTS_API_DOCUMENTATION.md",
      "AGENTS.md",
      "run_with_memory_bank.py",
      "tasks.json",
      "CLAUDE.md",
      "validate_no_hardcoded_final.py",
      "final_relationship_test.py"
    ],
    "archive_reports": [
      "FINAL_VALIDATION_REPORT.md",
      "database_structure_analysis_20250701_175004.json",
      "ENDPOINTS_IMPLEMENTATION_SUMMARY.md",
      "OPENAPI_AGENTS_UPDATE_SUMMARY.md",
      "synapscale_api_test_report_20250701_070113.json",
      "performance_report.txt",
      "VALIDATION_REPORT.md"
    ],
    "review_setup_scripts": [
      "setup_test_user_api_keys.py",
      "setup_improved_testing.py"
    ],
    "remove_temporary": [
      "temp_backup.py",
      "decrypt_existing_data.py",
      "current_openapi.json.backup"
    ],
    "review_database_validation": [
      "validate_models_comprehensive.py",
      "analyze_remaining_models.py",
      "comprehensive_model_test.py",
      "test_model_validation.py",
      "verify_models_detailed.py",
      "check_database_structure.py",
      "final_database_alignment_test.py",
      "test_models_detailed.py",
      "test_simple_models.py",
      "validate_complete_structure.py",
      "comprehensive_validation.py",
      "endpoint_database_sync_analysis.py",
      "check_missing_models.py"
    ],
    "remove_deprecated": [
      "test_simple_imports.py",
      "test_llm_endpoint_simple.py"
    ]
  },
  "files": {
    "test_llm_endpoints.py": {
      "category": "keep_current_functional",
      "info": {
        "size_bytes": 16722,
        "size_kb": 16.3,
        "modified": "2025-07-01T13:56:42.487451",
        "exists": true,
        "line_count": 526,
        "char_count": 16640,
        "imports": [
          "import asyncio",
          "import aiohttp",
          "import json",
          "import sys",
          "import os",
          "import time",
          "from pathlib import Path",
          "from typing import Dict, Any, Optional",
          "from synapse.services.llm_service import get_llm_service",
          "from synapse.logger_config import get_logger"
        ],
        "has_pytest": false,
        "has_unittest": false,
        "has_async": true,
        "has_fastapi": false,
        "is_database_test": false,
        "is_api_test": true,
        "is_llm_test": true,
        "is_auth_test": true,
        "has_hardcoded_values": true,
        "is_debug": true,
        "content_preview": "#!/usr/bin/env python3\n\"\"\"\nTest SynapScale LLM Endpoints - Vers\u00e3o Corrigida\nTesta todos os endpoints LLM com sistema de user_variables para API keys\n\"\"\"\n\nimport asyncio\nimport aiohttp\nimport json\nimport sys\nimport os\nimport time\nfrom pathlib import Path\nfrom typing import Dict, Any, Optional\n\n# Add src to Python path\nsys.path.insert(0, str(Path(__file__).parent / \"src\"))\n\n# Configurar vari\u00e1veis de ambiente para teste\nos.environ.setdefault(\"ENVIRONMENT\", \"development\")\nos.environ.setdefault(\"DEBU..."
      }
    },
    "test_registration_debug.py": {
      "category": "review_individual",
      "info": {
        "size_bytes": 10212,
        "size_kb": 10.0,
        "modified": "2025-07-01T13:56:42.467202",
        "exists": true,
        "line_count": 302,
        "char_count": 10036,
        "imports": [
          "import requests",
          "import json",
          "import os",
          "import sys",
          "from datetime import datetime"
        ],
        "has_pytest": false,
        "has_unittest": false,
        "has_async": false,
        "has_fastapi": false,
        "is_database_test": true,
        "is_api_test": true,
        "is_llm_test": true,
        "is_auth_test": true,
        "has_hardcoded_values": true,
        "is_debug": true,
        "content_preview": "\"\"\"\nDebug script para identificar problemas no registro de usu\u00e1rio\nFoco no problema do plan_id sendo None durante cria\u00e7\u00e3o de workspace\n\"\"\"\n\nimport requests\nimport json\nimport os\nimport sys\nfrom datetime import datetime\n\n# Configura\u00e7\u00f5es\nBASE_URL = \"http://localhost:8000\"\nTEST_USER = {\n    \"email\": f\"debug_user_{datetime.now().strftime('%Y%m%d_%H%M%S')}@test.com\",\n    \"username\": f\"debug_user_{datetime.now().strftime('%Y%m%d_%H%M%S')}\",\n    \"full_name\": \"Debug User Test\",\n    \"password\": \"TestPass..."
      }
    },
    "test_config.json": {
      "category": "keep_config",
      "info": {
        "size_bytes": 234,
        "size_kb": 0.2,
        "modified": "2025-06-25T14:09:32.952885",
        "exists": true,
        "line_count": 9,
        "char_count": 234,
        "imports": [],
        "has_pytest": false,
        "has_unittest": false,
        "has_async": false,
        "has_fastapi": false,
        "is_database_test": true,
        "is_api_test": true,
        "is_llm_test": false,
        "is_auth_test": false,
        "has_hardcoded_values": true,
        "is_debug": false,
        "content_preview": "{\n  \"api_base_url\": \"http://localhost:8000\",\n  \"timeout_seconds\": 30,\n  \"test_user_prefix\": \"improved_test_\",\n  \"cleanup_resources\": true,\n  \"validate_schemas\": true,\n  \"performance_threshold\": 10.0,\n  \"success_rate_threshold\": 90.0\n}"
      }
    },
    "DATABASE_OPTIMIZED_RESTRUCTURING_PLAN.md": {
      "category": "other",
      "info": {
        "size_bytes": 32872,
        "size_kb": 32.1,
        "modified": "2025-06-30T21:13:37.993017",
        "exists": true,
        "line_count": 408,
        "char_count": 32227,
        "imports": [],
        "has_pytest": false,
        "has_unittest": false,
        "has_async": false,
        "has_fastapi": false,
        "is_database_test": true,
        "is_api_test": true,
        "is_llm_test": true,
        "is_auth_test": true,
        "has_hardcoded_values": false,
        "is_debug": true,
        "content_preview": "# Plano de Reestrutura\u00e7\u00e3o Otimizado do Banco de Dados (synapscale_db)\n\n**Data:** 30 de junho de 2025\n**Status:** \u2705 **PLANO FINALIZADO E OTIMIZADO**\n\n## 1. Introdu\u00e7\u00e3o\n\nEste documento consolida e finaliza o plano de reestrutura\u00e7\u00e3o do banco de dados `synapscale_db`, incorporando as descobertas da auditoria inicial e as valiosas pontua\u00e7\u00f5es cr\u00edticas do agente Cursor. O objetivo \u00e9 garantir que a arquitetura do banco de dados seja robusta, perform\u00e1tica, segura e alinhada com as melhores pr\u00e1ticas para u..."
      }
    },
    "test_agents_system.py": {
      "category": "review_individual",
      "info": {
        "size_bytes": 4496,
        "size_kb": 4.4,
        "modified": "2025-07-01T13:56:41.639035",
        "exists": true,
        "line_count": 136,
        "char_count": 4460,
        "imports": [
          "import os",
          "import sys",
          "from synapse.models.agent import Agent",
          "from synapse.models.agent_tools import AgentTool",
          "from synapse.models.agent_models import AgentModel",
          "from synapse.models.agent_configurations import AgentConfiguration",
          "from synapse.models.agent_acl import AgentACL",
          "from synapse.models.agent_error_logs import AgentErrorLog",
          "from synapse.models.agent_hierarchy import AgentHierarchy",
          "from synapse.models.agent_kbs import AgentKB",
          "from synapse.models.agent_quotas import AgentQuota",
          "from synapse.models.agent_triggers import AgentTrigger, TriggerType",
          "from synapse.models.agent_usage_metrics import AgentUsageMetric",
          "from synapse.schemas.agent_tools import AgentToolCreate, AgentToolResponse",
          "from synapse.schemas.agent_models import AgentModelCreate, AgentModelResponse",
          "from synapse.schemas.agent_configurations import (",
          "from synapse.schemas.agent_acl import AgentACLCreate, AgentACLResponse",
          "from synapse.schemas.agent_error_logs import (",
          "from synapse.schemas.agent_hierarchy import ("
        ],
        "has_pytest": false,
        "has_unittest": false,
        "has_async": false,
        "has_fastapi": false,
        "is_database_test": true,
        "is_api_test": true,
        "is_llm_test": true,
        "is_auth_test": true,
        "has_hardcoded_values": false,
        "is_debug": true,
        "content_preview": "#!/usr/bin/env python3\n\"\"\"\nTeste r\u00e1pido para verificar se o sistema de agents est\u00e1 funcionando\n\"\"\"\n\nimport os\nimport sys\n\n# Configurar vari\u00e1veis de ambiente m\u00ednimas para teste\nos.environ.setdefault(\"SECRET_KEY\", \"test-key-123\")\nos.environ.setdefault(\"JWT_SECRET_KEY\", \"test-jwt-key-123\")\nos.environ.setdefault(\"DATABASE_URL\", \"postgresql://test:test@localhost/test\")\n\n# Adicionar src ao path\nsys.path.insert(0, \"src\")\n\n\ndef test_imports():\n    \"\"\"Testa se todos os imports est\u00e3o funcionando\"\"\"\n    tr..."
      }
    },
    "FINAL_VALIDATION_REPORT.md": {
      "category": "archive_reports",
      "info": {
        "size_bytes": 4474,
        "size_kb": 4.4,
        "modified": "2025-07-01T17:00:33.974922",
        "exists": true,
        "line_count": 140,
        "char_count": 4297,
        "imports": [],
        "has_pytest": false,
        "has_unittest": false,
        "has_async": false,
        "has_fastapi": false,
        "is_database_test": true,
        "is_api_test": true,
        "is_llm_test": true,
        "is_auth_test": true,
        "has_hardcoded_values": false,
        "is_debug": false,
        "content_preview": "# RELAT\u00d3RIO FINAL DE VALIDA\u00c7\u00c3O COMPLETA \ud83c\udf89\n\n## \u2705 MISS\u00c3O COMPLETADA COM 100% DE SUCESSO!\n\n**Data da Verifica\u00e7\u00e3o**: 07/01/2025  \n**Banco de Dados**: `defaultdb` (PostgreSQL 16.9)  \n**Schema**: `synapscale_db`  \n**Total de Tabelas**: 103\n\n---\n\n## \ud83c\udfc6 RESULTADO FINAL\n\n### **10/10 MODELOS CR\u00cdTICOS PERFEITAMENTE ALINHADOS (100%)**\n\nTodos os modelos principais est\u00e3o **EXATAMENTE** alinhados com a estrutura real do banco de dados PostgreSQL!\n\n---\n\n## \u2705 MODELOS VALIDADOS E CORRETOS\n\n### 1. **USERS** (19/19 ..."
      }
    },
    "setup_test_user_api_keys.py": {
      "category": "review_setup_scripts",
      "info": {
        "size_bytes": 7896,
        "size_kb": 7.7,
        "modified": "2025-07-01T13:56:40.086401",
        "exists": true,
        "line_count": 239,
        "char_count": 7762,
        "imports": [
          "import asyncio",
          "import sys",
          "import os",
          "from pathlib import Path",
          "from sqlalchemy.orm import Session",
          "from synapse.database import get_db_session",
          "from synapse.services.llm_service import get_llm_service",
          "from synapse.models.user import User",
          "from synapse.models.user_variable import UserVariable",
          "from synapse.logger_config import get_logger"
        ],
        "has_pytest": false,
        "has_unittest": false,
        "has_async": true,
        "has_fastapi": false,
        "is_database_test": true,
        "is_api_test": true,
        "is_llm_test": true,
        "is_auth_test": true,
        "has_hardcoded_values": false,
        "is_debug": true,
        "content_preview": "#!/usr/bin/env python3\n\"\"\"\nScript para configurar um usu\u00e1rio de teste com API keys no banco de dados\nDemonstra como o sistema funciona com API keys reais armazenadas no banco\n\"\"\"\n\nimport asyncio\nimport sys\nimport os\nfrom pathlib import Path\n\n# Add src to Python path\nsys.path.insert(0, str(Path(__file__).parent / \"src\"))\n\nfrom sqlalchemy.orm import Session\nfrom synapse.database import get_db_session\nfrom synapse.services.llm_service import get_llm_service\nfrom synapse.models.user import User\nfrom..."
      }
    },
    "requirements.txt": {
      "category": "other",
      "info": {
        "size_bytes": 3274,
        "size_kb": 3.2,
        "modified": "2025-07-01T10:12:40.456902",
        "exists": true,
        "line_count": 147,
        "char_count": 3259,
        "imports": [],
        "has_pytest": true,
        "has_unittest": false,
        "has_async": false,
        "has_fastapi": true,
        "is_database_test": true,
        "is_api_test": true,
        "is_llm_test": true,
        "is_auth_test": true,
        "has_hardcoded_values": false,
        "is_debug": false,
        "content_preview": "# ===== CODE GENERATION =====\npython-dotenv>=1.0.0,<2.0.0\ndatamodel-code-generator>=0.16.0,<1.0.0\n# ===== SynapScale Backend - Requirements Completo =====\n# Arquivo unificado de depend\u00eancias - 12/06/2025\n# Combinado a partir de requirements.txt, requirements.backend.txt e requirements.notorch.txt\n\n# ===== CORE FRAMEWORK =====\nfastapi>=0.110.0,<0.115.0\nuvicorn[standard]>=0.27.0,<0.30.0\npydantic>=2.6.0,<3.0.0\npydantic-settings>=2.2.0,<3.0.0\ngunicorn>=21.2.0,<22.0.0\n\n# ===== BANCO DE DADOS =====\nsq..."
      }
    },
    "database_structure_analysis_20250701_175004.json": {
      "category": "archive_reports",
      "info": {
        "size_bytes": 1227836,
        "size_kb": 1199.1,
        "modified": "2025-07-01T17:50:04.832125",
        "exists": true,
        "line_count": 38698,
        "char_count": 1227836,
        "imports": [],
        "has_pytest": false,
        "has_unittest": false,
        "has_async": false,
        "has_fastapi": false,
        "is_database_test": true,
        "is_api_test": true,
        "is_llm_test": true,
        "is_auth_test": true,
        "has_hardcoded_values": false,
        "is_debug": true,
        "content_preview": "{\n  \"timestamp\": \"2025-07-01T17:47:46.411935\",\n  \"database_info\": {\n    \"database\": \"defaultdb\",\n    \"user\": \"doadmin\",\n    \"version\": \"PostgreSQL 16.9 on x86_64-pc-linux-gnu, compiled by gcc (GCC) 14.2.1 20240912 (Red Hat 14.2.1-3), 64-bit\"\n  },\n  \"schema_info\": {\n    \"schema_name\": \"synapscale_db\",\n    \"schema_owner\": \"doadmin\"\n  },\n  \"tables\": {\n    \"agent_acl\": {\n      \"type\": \"BASE TABLE\",\n      \"comment\": \"Controle de acesso: permiss\\u00f5es de leitura/escrita por usu\\u00e1rio.\",\n      \"si..."
      }
    },
    "temp_backup.py": {
      "category": "remove_temporary",
      "info": {
        "size_bytes": 66643,
        "size_kb": 65.1,
        "modified": "2025-07-01T13:56:43.618998",
        "exists": true,
        "line_count": 1761,
        "char_count": 66643,
        "imports": [
          "from pydantic import BaseModel, Field",
          "from typing import Optional",
          "import datetime, uuid"
        ],
        "has_pytest": false,
        "has_unittest": false,
        "has_async": false,
        "has_fastapi": false,
        "is_database_test": true,
        "is_api_test": true,
        "is_llm_test": true,
        "is_auth_test": true,
        "has_hardcoded_values": false,
        "is_debug": true,
        "content_preview": "from pydantic import BaseModel, Field\nfrom typing import Optional\nimport datetime, uuid\n\n\nclass AgentConfigurations(BaseModel):\n    config_id: uuid.UUID = Field(...)\n    agent_id: uuid.UUID = Field(...)\n    version_num: int = Field(...)\n    params: dict = Field(...)\n    created_by: uuid.UUID = Field(...)\n    created_at: datetime.datetime = Field(...)\n\n\nclass Agents(BaseModel):\n    id: uuid.UUID = Field(...)\n    name: str = Field(...)\n    description: Optional[str] = Field(None)\n    is_active: bo..."
      }
    },
    "DATABASE_RESTRUCTURING_OPINION.md": {
      "category": "other",
      "info": {
        "size_bytes": 9709,
        "size_kb": 9.5,
        "modified": "2025-06-30T21:16:48.885903",
        "exists": true,
        "line_count": 131,
        "char_count": 9410,
        "imports": [],
        "has_pytest": false,
        "has_unittest": false,
        "has_async": false,
        "has_fastapi": false,
        "is_database_test": true,
        "is_api_test": true,
        "is_llm_test": true,
        "is_auth_test": false,
        "has_hardcoded_values": false,
        "is_debug": false,
        "content_preview": "# An\u00e1lise Cr\u00edtica: Auditoria da Reestrutura\u00e7\u00e3o do Banco de Dados (synapscale_db)\n\n**Data:** [Inserir Data]\n**Autor:** [Seu Nome ou Equipe]\n\n---\n\n## Introdu\u00e7\u00e3o\nEste documento apresenta uma an\u00e1lise cr\u00edtica e detalhada das recomenda\u00e7\u00f5es e decis\u00f5es descritas nos relat\u00f3rios de reestrutura\u00e7\u00e3o do banco de dados `synapscale_db`, incluindo o plano otimizado mais recente. Para cada ponto, s\u00e3o discutidos concord\u00e2ncia ou discord\u00e2ncia, justificativas t\u00e9cnicas, riscos, impactos sist\u00eamicos e sugest\u00f5es de ajust..."
      }
    },
    "current_openapi.json": {
      "category": "other",
      "info": {
        "size_bytes": 851654,
        "size_kb": 831.7,
        "modified": "2025-07-01T09:57:50.837478",
        "exists": true,
        "line_count": 30008,
        "char_count": 848601,
        "imports": [],
        "has_pytest": false,
        "has_unittest": false,
        "has_async": false,
        "has_fastapi": true,
        "is_database_test": true,
        "is_api_test": true,
        "is_llm_test": true,
        "is_auth_test": true,
        "has_hardcoded_values": false,
        "is_debug": true,
        "content_preview": "{\n  \"openapi\": \"3.1.0\",\n  \"info\": {\n    \"title\": \"SynapScale Backend API\",\n    \"description\": \"\\n    \ud83d\ude80 **SynapScale Backend API** - Plataforma de Automa\u00e7\u00e3o com IA\\n    \\n    API robusta e escal\u00e1vel para gerenciamento de workflows, agentes AI e automa\u00e7\u00f5es.\\n    **VERS\u00c3O OTIMIZADA COM CONFIGURA\u00c7\u00c3O CENTRALIZADA**\\n    \\n    ## Funcionalidades Principais\\n    \\n    * **\ud83d\udd10 Autentica\u00e7\u00e3o**: Sistema completo de autentica\u00e7\u00e3o e autoriza\u00e7\u00e3o\\n    * **\u26a1 Workflows**: Cria\u00e7\u00e3o e execu\u00e7\u00e3o de workflows de automa\u00e7\u00e3..."
      }
    },
    "decrypt_existing_data.py": {
      "category": "remove_temporary",
      "info": {
        "size_bytes": 6930,
        "size_kb": 6.8,
        "modified": "2025-07-01T13:56:39.848926",
        "exists": true,
        "line_count": 231,
        "char_count": 6825,
        "imports": [
          "import os",
          "import sys",
          "import base64",
          "from dotenv import load_dotenv",
          "from sqlalchemy import create_engine, text",
          "from sqlalchemy.orm import sessionmaker",
          "from synapse.models.user_variable import UserVariable"
        ],
        "has_pytest": false,
        "has_unittest": false,
        "has_async": false,
        "has_fastapi": false,
        "is_database_test": true,
        "is_api_test": false,
        "is_llm_test": true,
        "is_auth_test": true,
        "has_hardcoded_values": false,
        "is_debug": true,
        "content_preview": "#!/usr/bin/env python3\n\"\"\"\nScript para descriptografar dados que j\u00e1 foram criptografados no banco\nIdentifica dados criptografados e os descriptografa para texto claro\n\"\"\"\nimport os\nimport sys\nimport base64\nfrom dotenv import load_dotenv\n\n# Carregar .env\nload_dotenv()\n\n# Adicionar src ao path\nsys.path.insert(0, \"src\")\n\nfrom sqlalchemy import create_engine, text\nfrom sqlalchemy.orm import sessionmaker\nfrom synapse.models.user_variable import UserVariable\n\n\ndef is_base64_encoded(value: str) -> bool..."
      }
    },
    "validate_models_comprehensive.py": {
      "category": "review_database_validation",
      "info": {
        "size_bytes": 8467,
        "size_kb": 8.3,
        "modified": "2025-07-01T16:18:20.558617",
        "exists": true,
        "line_count": 187,
        "char_count": 8417,
        "imports": [
          "import sys",
          "import os",
          "import inspect",
          "from sqlalchemy.inspection import inspect as sqlalchemy_inspect",
          "from src.synapse.models import *",
          "import src.synapse.models as models_module"
        ],
        "has_pytest": false,
        "has_unittest": false,
        "has_async": false,
        "has_fastapi": false,
        "is_database_test": true,
        "is_api_test": false,
        "is_llm_test": true,
        "is_auth_test": true,
        "has_hardcoded_values": false,
        "is_debug": true,
        "content_preview": "#!/usr/bin/env python3\n\"\"\"\nComprehensive Model Validation Script\nValidates SQLAlchemy models against database schema and checks for issues.\n\"\"\"\n\nimport sys\nimport os\nsys.path.append('/Users/joaovictormiranda/backend/synapse-backend-agents-jc')\n\nimport inspect\nfrom sqlalchemy.inspection import inspect as sqlalchemy_inspect\nfrom src.synapse.models import *\n\nclass ModelValidator:\n    def __init__(self):\n        self.issues = []\n        self.warnings = []\n        self.models = self._get_all_models()..."
      }
    },
    "analyze_remaining_models.py": {
      "category": "review_database_validation",
      "info": {
        "size_bytes": 7255,
        "size_kb": 7.1,
        "modified": "2025-07-01T16:11:12.843788",
        "exists": true,
        "line_count": 140,
        "char_count": 7187,
        "imports": [],
        "has_pytest": false,
        "has_unittest": false,
        "has_async": false,
        "has_fastapi": false,
        "is_database_test": true,
        "is_api_test": false,
        "is_llm_test": true,
        "is_auth_test": true,
        "has_hardcoded_values": false,
        "is_debug": true,
        "content_preview": "#!/usr/bin/env python3\n\"\"\"\nAn\u00e1lise e prioriza\u00e7\u00e3o dos modelos restantes por categoria\n\"\"\"\n\n# Todos os 103 tabelas no banco\nALL_TABLES = [\n    'agent_acl', 'agent_configurations', 'agent_error_logs', 'agent_hierarchy', 'agent_kbs',\n    'agent_models', 'agent_quotas', 'agent_tools', 'agent_triggers', 'agent_usage_metrics',\n    'agents', 'alembic_version', 'analytics_alerts', 'analytics_dashboards', 'analytics_events',\n    'analytics_exports', 'analytics_metrics', 'analytics_reports', 'audit_log', '..."
      }
    },
    "test_simple_imports.py": {
      "category": "remove_deprecated",
      "info": {
        "size_bytes": 1364,
        "size_kb": 1.3,
        "modified": "2025-07-01T13:56:42.306726",
        "exists": true,
        "line_count": 53,
        "char_count": 1344,
        "imports": [
          "import sys",
          "import enum",
          "from pydantic import BaseModel, Field",
          "from typing import Dict, Any",
          "from uuid import uuid4"
        ],
        "has_pytest": false,
        "has_unittest": false,
        "has_async": false,
        "has_fastapi": false,
        "is_database_test": true,
        "is_api_test": false,
        "is_llm_test": true,
        "is_auth_test": false,
        "has_hardcoded_values": false,
        "is_debug": true,
        "content_preview": "#!/usr/bin/env python3\n\"\"\"\nTeste simples de imports sem depend\u00eancias externas\n\"\"\"\n\nimport sys\n\nsys.path.insert(0, \"src\")\n\n\ndef test_basic_imports():\n    \"\"\"Testa imports b\u00e1sicos sem inicializar database\"\"\"\n    try:\n        # Testar enums b\u00e1sicos\n        import enum\n\n        class TriggerType(enum.Enum):\n            SCHEDULE = \"schedule\"\n            EVENT = \"event\"\n            WEBHOOK = \"webhook\"\n\n        assert TriggerType.SCHEDULE.value == \"schedule\"\n        print(\"\u2705 Enums b\u00e1sicos funcionando!\"..."
      }
    },
    "comprehensive_model_test.py": {
      "category": "review_database_validation",
      "info": {
        "size_bytes": 5317,
        "size_kb": 5.2,
        "modified": "2025-07-01T17:07:02.352619",
        "exists": true,
        "line_count": 155,
        "char_count": 5238,
        "imports": [
          "import os",
          "import sys",
          "import glob",
          "import importlib"
        ],
        "has_pytest": false,
        "has_unittest": false,
        "has_async": false,
        "has_fastapi": false,
        "is_database_test": true,
        "is_api_test": false,
        "is_llm_test": true,
        "is_auth_test": true,
        "has_hardcoded_values": false,
        "is_debug": true,
        "content_preview": "#!/usr/bin/env python3\n\"\"\"\nTeste abrangente para detectar todos os problemas de modelos\n\"\"\"\n\nimport os\nimport sys\nimport glob\nimport importlib\nsys.path.insert(0, '/Users/joaovictormiranda/backend/synapse-backend-agents-jc')\n\n# Configurar env m\u00ednimas\nos.environ.setdefault('SECRET_KEY', 'test-secret-key')\nos.environ.setdefault('JWT_SECRET_KEY', 'test-jwt-secret')\nos.environ.setdefault('DATABASE_URL', 'postgresql://test:test@localhost/test')\n\ndef test_individual_model_imports():\n    \"\"\"Testar impor..."
      }
    },
    "test_llm_endpoint_simple.py": {
      "category": "remove_deprecated",
      "info": {
        "size_bytes": 1819,
        "size_kb": 1.8,
        "modified": "2025-07-01T13:56:42.232308",
        "exists": true,
        "line_count": 63,
        "char_count": 1796,
        "imports": [
          "import asyncio",
          "import aiohttp",
          "import json"
        ],
        "has_pytest": false,
        "has_unittest": false,
        "has_async": true,
        "has_fastapi": false,
        "is_database_test": false,
        "is_api_test": true,
        "is_llm_test": true,
        "is_auth_test": false,
        "has_hardcoded_values": true,
        "is_debug": true,
        "content_preview": "#!/usr/bin/env python3\n\"\"\"\nScript simples para testar o endpoint LLM models sem autentica\u00e7\u00e3o\n\"\"\"\n\nimport asyncio\nimport aiohttp\nimport json\n\nBASE_URL = \"http://localhost:8000\"\n\n\nasync def test_llm_models_simple():\n    \"\"\"Testa o endpoint /api/v1/llm/models sem autentica\u00e7\u00e3o\"\"\"\n\n    async with aiohttp.ClientSession() as session:\n        print(\"\ud83e\udd16 Testando endpoint /api/v1/llm/models...\")\n\n        async with session.get(f\"{BASE_URL}/api/v1/llm/models\") as response:\n            print(f\"Status: {respo..."
      }
    },
    "current_openapi.json.backup": {
      "category": "remove_temporary",
      "info": {
        "size_bytes": 807213,
        "size_kb": 788.3,
        "modified": "2025-07-01T09:57:45.026878",
        "exists": true,
        "line_count": 28293,
        "char_count": 804264,
        "imports": [],
        "has_pytest": false,
        "has_unittest": false,
        "has_async": false,
        "has_fastapi": true,
        "is_database_test": true,
        "is_api_test": true,
        "is_llm_test": true,
        "is_auth_test": true,
        "has_hardcoded_values": false,
        "is_debug": true,
        "content_preview": "{\n  \"openapi\": \"3.1.0\",\n  \"info\": {\n    \"title\": \"SynapScale Backend API\",\n    \"description\": \"\\n    \ud83d\ude80 **SynapScale Backend API** - Plataforma de Automa\u00e7\u00e3o com IA\\n    \\n    API robusta e escal\u00e1vel para gerenciamento de workflows, agentes AI e automa\u00e7\u00f5es.\\n    **VERS\u00c3O OTIMIZADA COM CONFIGURA\u00c7\u00c3O CENTRALIZADA**\\n    \\n    ## Funcionalidades Principais\\n    \\n    * **\ud83d\udd10 Autentica\u00e7\u00e3o**: Sistema completo de autentica\u00e7\u00e3o e autoriza\u00e7\u00e3o\\n    * **\u26a1 Workflows**: Cria\u00e7\u00e3o e execu\u00e7\u00e3o de workflows de automa\u00e7\u00e3..."
      }
    },
    "ENDPOINTS_IMPLEMENTATION_SUMMARY.md": {
      "category": "archive_reports",
      "info": {
        "size_bytes": 11330,
        "size_kb": 11.1,
        "modified": "2025-07-01T13:03:36.607693",
        "exists": true,
        "line_count": 298,
        "char_count": 10706,
        "imports": [],
        "has_pytest": false,
        "has_unittest": false,
        "has_async": false,
        "has_fastapi": false,
        "is_database_test": true,
        "is_api_test": true,
        "is_llm_test": true,
        "is_auth_test": true,
        "has_hardcoded_values": false,
        "is_debug": false,
        "content_preview": "# \ud83d\ude80 IMPLEMENTA\u00c7\u00c3O COMPLETA DA L\u00d3GICA DE NEG\u00d3CIO - ENDPOINTS\n\n## \u2705 RESUMO EXECUTIVO\n\n**Implementa\u00e7\u00e3o conclu\u00edda com sucesso!** Todos os 29 arquivos de endpoint foram analisados e os **4 principais** receberam implementa\u00e7\u00e3o completa da l\u00f3gica de neg\u00f3cio, substituindo placeholders por c\u00f3digo funcional real.\n\n---\n\n## \ud83d\udcca ESTAT\u00cdSTICAS FINAIS\n\n### \u2705 ENDPOINTS COMPLETAMENTE IMPLEMENTADOS (7/29)\n\n| Endpoint | Status | Funcionalidades | Schemas | Seguran\u00e7a |\n|----------|---------|-----------------|---------..."
      }
    },
    "test_model_validation.py": {
      "category": "review_database_validation",
      "info": {
        "size_bytes": 7379,
        "size_kb": 7.2,
        "modified": "2025-07-01T16:46:20.748352",
        "exists": true,
        "line_count": 159,
        "char_count": 7351,
        "imports": [
          "import sys",
          "import os",
          "from sqlalchemy import create_engine, text",
          "from sqlalchemy.ext.declarative import declarative_base",
          "from sqlalchemy import Column, String, Boolean, DateTime, Integer, ForeignKey, ARRAY",
          "from sqlalchemy.dialects.postgresql import UUID, JSONB",
          "from sqlalchemy.sql import func",
          "import uuid"
        ],
        "has_pytest": false,
        "has_unittest": false,
        "has_async": false,
        "has_fastapi": false,
        "is_database_test": true,
        "is_api_test": true,
        "is_llm_test": true,
        "is_auth_test": true,
        "has_hardcoded_values": false,
        "is_debug": true,
        "content_preview": "#!/usr/bin/env python3\n\"\"\"\nScript para validar se os modelos est\u00e3o alinhados com a estrutura real do banco\n\"\"\"\n\nimport sys\nimport os\nsys.path.insert(0, '/Users/joaovictormiranda/backend/synapse-backend-agents-jc')\n\n# Configurar vari\u00e1veis de ambiente m\u00ednimas\nos.environ.setdefault('SECRET_KEY', 'test-secret-key')\nos.environ.setdefault('JWT_SECRET_KEY', 'test-jwt-secret')\nos.environ.setdefault('DATABASE_URL', 'postgresql://test:test@localhost/test')\n\nfrom sqlalchemy import create_engine, text\nfrom ..."
      }
    },
    "verify_models_detailed.py": {
      "category": "review_database_validation",
      "info": {
        "size_bytes": 5184,
        "size_kb": 5.1,
        "modified": "2025-07-01T17:04:58.148333",
        "exists": true,
        "line_count": 158,
        "char_count": 5099,
        "imports": [
          "import sys",
          "import os",
          "from src.synapse.database import sync_engine, DATABASE_SCHEMA",
          "from sqlalchemy import text",
          "import re"
        ],
        "has_pytest": false,
        "has_unittest": false,
        "has_async": false,
        "has_fastapi": false,
        "is_database_test": true,
        "is_api_test": false,
        "is_llm_test": true,
        "is_auth_test": true,
        "has_hardcoded_values": false,
        "is_debug": true,
        "content_preview": "#!/usr/bin/env python3\n\"\"\"\nVerifica\u00e7\u00e3o detalhada dos modelos principais vs estrutura real do banco\n\"\"\"\n\nimport sys\nimport os\nsys.path.insert(0, '/Users/joaovictormiranda/backend/synapse-backend-agents-jc')\nos.chdir('/Users/joaovictormiranda/backend/synapse-backend-agents-jc')\n\nfrom src.synapse.database import sync_engine, DATABASE_SCHEMA\nfrom sqlalchemy import text\n\ndef get_table_columns(table_name):\n    \"\"\"Obt\u00e9m colunas reais de uma tabela do banco\"\"\"\n    with sync_engine.connect() as conn:\n   ..."
      }
    },
    "check_database_structure.py": {
      "category": "review_database_validation",
      "info": {
        "size_bytes": 13992,
        "size_kb": 13.7,
        "modified": "2025-07-01T17:47:39.025963",
        "exists": true,
        "line_count": 341,
        "char_count": 13976,
        "imports": [
          "import os",
          "import sys",
          "import json",
          "from datetime import datetime",
          "from typing import Dict, List, Any",
          "import psycopg2",
          "from psycopg2.extras import RealDictCursor",
          "from urllib.parse import urlparse"
        ],
        "has_pytest": false,
        "has_unittest": false,
        "has_async": false,
        "has_fastapi": false,
        "is_database_test": true,
        "is_api_test": false,
        "is_llm_test": true,
        "is_auth_test": true,
        "has_hardcoded_values": false,
        "is_debug": true,
        "content_preview": "#!/usr/bin/env python3\n\"\"\"\nDatabase Structure Analysis Script for SynapScale\nConnects to PostgreSQL database and analyzes table structure, relationships, and indexes.\n\"\"\"\n\nimport os\nimport sys\nimport json\nfrom datetime import datetime\nfrom typing import Dict, List, Any\nimport psycopg2\nfrom psycopg2.extras import RealDictCursor\nfrom urllib.parse import urlparse\n\n# Load environment variables from .env file\ndef load_env_file(file_path=\".env\"):\n    \"\"\"Load environment variables from .env file\"\"\"\n   ..."
      }
    },
    "test_complete_llm_system.py": {
      "category": "review_individual",
      "info": {
        "size_bytes": 11252,
        "size_kb": 11.0,
        "modified": "2025-07-01T13:56:41.841029",
        "exists": true,
        "line_count": 345,
        "char_count": 11095,
        "imports": [
          "import asyncio",
          "import sys",
          "import os",
          "import time",
          "from pathlib import Path",
          "from synapse.services.llm_service import get_llm_service",
          "from synapse.logger_config import get_logger"
        ],
        "has_pytest": false,
        "has_unittest": false,
        "has_async": true,
        "has_fastapi": false,
        "is_database_test": false,
        "is_api_test": true,
        "is_llm_test": true,
        "is_auth_test": true,
        "has_hardcoded_values": false,
        "is_debug": true,
        "content_preview": "#!/usr/bin/env python3\n\"\"\"\nTeste Completo do Sistema LLM SynapScale - VERS\u00c3O FINAL\nDemonstra o sistema funcionando perfeitamente com todas as corre\u00e7\u00f5es aplicadas\n\"\"\"\n\nimport asyncio\nimport sys\nimport os\nimport time\nfrom pathlib import Path\n\n# Add src to Python path\nsys.path.insert(0, str(Path(__file__).parent / \"src\"))\n\n# Configurar vari\u00e1veis de ambiente\nos.environ.setdefault(\"ENVIRONMENT\", \"development\")\nos.environ.setdefault(\"DEBUG\", \"true\")\n\nfrom synapse.services.llm_service import get_llm_se..."
      }
    },
    "test_cleanup_analysis.py": {
      "category": "review_individual",
      "info": {
        "size_bytes": 14179,
        "size_kb": 13.8,
        "modified": "2025-07-01T17:51:07.859866",
        "exists": true,
        "line_count": 382,
        "char_count": 14179,
        "imports": [
          "import os",
          "import sys",
          "import json",
          "from datetime import datetime",
          "from typing import Dict, List, Any",
          "from pathlib import Path"
        ],
        "has_pytest": true,
        "has_unittest": true,
        "has_async": true,
        "has_fastapi": true,
        "is_database_test": true,
        "is_api_test": true,
        "is_llm_test": true,
        "is_auth_test": true,
        "has_hardcoded_values": true,
        "is_debug": true,
        "content_preview": "#!/usr/bin/env python3\n\"\"\"\nTest Script Cleanup Analysis for SynapScale\nAnalyzes all test files in the root directory and categorizes them for cleanup.\n\"\"\"\n\nimport os\nimport sys\nimport json\nfrom datetime import datetime\nfrom typing import Dict, List, Any\nfrom pathlib import Path\n\ndef analyze_file_size(file_path: str) -> Dict[str, Any]:\n    \"\"\"Analyze file size and basic info\"\"\"\n    try:\n        stat = os.stat(file_path)\n        return {\n            'size_bytes': stat.st_size,\n            'size_kb..."
      }
    },
    "README.md": {
      "category": "other",
      "info": {
        "size_bytes": 4937,
        "size_kb": 4.8,
        "modified": "2025-06-25T11:51:32.244966",
        "exists": true,
        "line_count": 139,
        "char_count": 4668,
        "imports": [],
        "has_pytest": false,
        "has_unittest": false,
        "has_async": false,
        "has_fastapi": true,
        "is_database_test": true,
        "is_api_test": true,
        "is_llm_test": true,
        "is_auth_test": true,
        "has_hardcoded_values": true,
        "is_debug": false,
        "content_preview": "# \ud83d\ude80 SynapScale Backend API\n\n[![Python 3.11+](https://img.shields.io/badge/python-3.11+-blue.svg)](https://www.python.org/downloads/)\n[![FastAPI](https://img.shields.io/badge/FastAPI-0.104+-green.svg)](https://fastapi.tiangolo.com/)\n[![PostgreSQL](https://img.shields.io/badge/PostgreSQL-13+-blue.svg)](https://www.postgresql.org/)\n[![Redis](https://img.shields.io/badge/Redis-6+-red.svg)](https://redis.io/)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.or..."
      }
    },
    "final_database_alignment_test.py": {
      "category": "review_database_validation",
      "info": {
        "size_bytes": 5750,
        "size_kb": 5.6,
        "modified": "2025-07-01T17:23:53.243423",
        "exists": true,
        "line_count": 173,
        "char_count": 5658,
        "imports": [
          "import os",
          "import sys",
          "from dotenv import load_dotenv"
        ],
        "has_pytest": false,
        "has_unittest": false,
        "has_async": false,
        "has_fastapi": false,
        "is_database_test": true,
        "is_api_test": false,
        "is_llm_test": true,
        "is_auth_test": true,
        "has_hardcoded_values": false,
        "is_debug": true,
        "content_preview": "#!/usr/bin/env python3\n\"\"\"\nScript de valida\u00e7\u00e3o final - ALINHAMENTO TOTAL COM BANCO DE DADOS\nVerifica se todos os modelos est\u00e3o perfeitamente alinhados com a estrutura real do banco\n\"\"\"\n\nimport os\nimport sys\nfrom dotenv import load_dotenv\nload_dotenv('.env')\n\n# Add src to path\nsys.path.insert(0, './src')\n\ndef test_critical_models():\n    \"\"\"Testa modelos cr\u00edticos para verificar alinhamento\"\"\"\n    print(\"\ud83d\udd0d TESTE DE ALINHAMENTO COM BANCO DE DADOS\")\n    print(\"=\" * 60)\n    \n    critical_models = [\n  ..."
      }
    },
    "SECURITY_API_KEYS.md": {
      "category": "other",
      "info": {
        "size_bytes": 3049,
        "size_kb": 3.0,
        "modified": "2025-06-25T18:18:57.572930",
        "exists": true,
        "line_count": 135,
        "char_count": 2965,
        "imports": [],
        "has_pytest": false,
        "has_unittest": false,
        "has_async": false,
        "has_fastapi": false,
        "is_database_test": false,
        "is_api_test": true,
        "is_llm_test": true,
        "is_auth_test": false,
        "has_hardcoded_values": false,
        "is_debug": false,
        "content_preview": "# \ud83d\udd10 Guia de Seguran\u00e7a - Chaves de API\n\n## \u26a0\ufe0f IMPORTANTE: Nunca commite chaves de API!\n\nEste documento orienta sobre o manejo seguro de chaves de API no projeto SynapScale.\n\n## \ud83d\udea8 Problema Resolvido\n\n**Situa\u00e7\u00e3o:** Chave da API da Anthropic foi detectada pelo GitHub Push Protection\n**Solu\u00e7\u00e3o:** Chave removida e prote\u00e7\u00f5es implementadas\n\n## \ud83d\udccb Configura\u00e7\u00e3o Segura\n\n### 1. Arquivo de Configura\u00e7\u00e3o MCP\n\n**\u274c NUNCA fa\u00e7a isso:**\n```json\n{\n  \"env\": {\n    \"ANTHROPIC_API_KEY\": \"sk-ant-api03-sua-chave-real-aqui\"..."
      }
    },
    "OPENAPI_AGENTS_UPDATE_SUMMARY.md": {
      "category": "archive_reports",
      "info": {
        "size_bytes": 5073,
        "size_kb": 5.0,
        "modified": "2025-07-01T09:58:55.713822",
        "exists": true,
        "line_count": 195,
        "char_count": 4969,
        "imports": [],
        "has_pytest": false,
        "has_unittest": false,
        "has_async": false,
        "has_fastapi": false,
        "is_database_test": true,
        "is_api_test": true,
        "is_llm_test": true,
        "is_auth_test": true,
        "has_hardcoded_values": true,
        "is_debug": false,
        "content_preview": "# \ud83d\udcca **OpenAPI Agents Update - Resumo da Atualiza\u00e7\u00e3o**\n\n## \u2705 **Atualiza\u00e7\u00e3o Completa do OpenAPI**\n\nO arquivo `current_openapi.json` foi **successfully atualizado** com todos os novos endpoints e schemas do sistema completo de agents.\n\n---\n\n## \ud83c\udd95 **Novos Endpoints Adicionados**\n\n### **1. Agent Tools (Ferramentas)**\n```\nGET    /api/v1/agents/{agent_id}/tools\nPOST   /api/v1/agents/{agent_id}/tools  \nPUT    /api/v1/agents/{agent_id}/tools/{tool_id}\nDELETE /api/v1/agents/{agent_id}/tools/{tool_id}\n```\n\n..."
      }
    },
    "test_models_detailed.py": {
      "category": "review_database_validation",
      "info": {
        "size_bytes": 2513,
        "size_kb": 2.5,
        "modified": "2025-07-01T16:09:32.618271",
        "exists": true,
        "line_count": 73,
        "char_count": 2486,
        "imports": [
          "import os",
          "import traceback",
          "import sys"
        ],
        "has_pytest": false,
        "has_unittest": false,
        "has_async": false,
        "has_fastapi": false,
        "is_database_test": true,
        "is_api_test": false,
        "is_llm_test": true,
        "is_auth_test": true,
        "has_hardcoded_values": false,
        "is_debug": true,
        "content_preview": "#!/usr/bin/env python3\n\"\"\"\nTeste detalhado de importa\u00e7\u00e3o de modelos\n\"\"\"\n\nimport os\nimport traceback\n\n# Set required environment variables\nos.environ[\"SECRET_KEY\"] = \"test-secret-key-for-model-testing\"\nos.environ[\"JWT_SECRET_KEY\"] = \"test-jwt-secret-key-for-model-testing\"\nos.environ[\"DATABASE_URL\"] = \"postgresql://user:pass@localhost/test\"\n\ndef test_individual_import(module_name, class_name):\n    \"\"\"Test importing a single model\"\"\"\n    try:\n        # Clear any cached modules to avoid conflicts\n  ..."
      }
    },
    "test_service_architecture.py": {
      "category": "review_individual",
      "info": {
        "size_bytes": 4653,
        "size_kb": 4.5,
        "modified": "2025-07-01T13:56:42.395265",
        "exists": true,
        "line_count": 146,
        "char_count": 4576,
        "imports": [
          "import sys",
          "from pathlib import Path",
          "from synapse.core.services.base_service import BaseService",
          "from synapse.core.services.repository import (",
          "from synapse.core.services.dependency_container import ("
        ],
        "has_pytest": false,
        "has_unittest": false,
        "has_async": false,
        "has_fastapi": false,
        "is_database_test": true,
        "is_api_test": false,
        "is_llm_test": true,
        "is_auth_test": false,
        "has_hardcoded_values": false,
        "is_debug": true,
        "content_preview": "\"\"\"\nSimple Service Layer Architecture Test.\n\nThis test validates that all the service layer components are properly\nstructured and can be imported without errors.\n\"\"\"\n\nimport sys\nfrom pathlib import Path\n\n# Add src to path\nproject_root = Path(__file__).resolve().parent\nsrc_path = project_root / \"src\"\nsys.path.insert(0, str(src_path))\n\n\ndef test_service_layer_imports():\n    \"\"\"Test that all service layer components can be imported.\"\"\"\n\n    print(\"\ud83e\uddea Testing Service Layer Architecture...\")\n\n    try..."
      }
    },
    "test_simple_models.py": {
      "category": "review_database_validation",
      "info": {
        "size_bytes": 1073,
        "size_kb": 1.0,
        "modified": "2025-07-01T16:05:28.807480",
        "exists": true,
        "line_count": 33,
        "char_count": 1068,
        "imports": [
          "import os",
          "from sqlalchemy import Column, String, DateTime, BigInteger, Numeric, ForeignKey",
          "from sqlalchemy.dialects.postgresql import UUID",
          "from sqlalchemy.orm import relationship",
          "from sqlalchemy.sql import func",
          "from synapse.database import Base"
        ],
        "has_pytest": false,
        "has_unittest": false,
        "has_async": false,
        "has_fastapi": false,
        "is_database_test": true,
        "is_api_test": false,
        "is_llm_test": false,
        "is_auth_test": true,
        "has_hardcoded_values": false,
        "is_debug": true,
        "content_preview": "#!/usr/bin/env python3\n\"\"\"\nTeste de modelos simplificados para verificar importa\u00e7\u00e3o b\u00e1sica\n\"\"\"\n\nimport os\nos.environ[\"SECRET_KEY\"] = \"test-key\"\nos.environ[\"JWT_SECRET_KEY\"] = \"test-jwt\"\nos.environ[\"DATABASE_URL\"] = \"postgresql://user:pass@localhost/test\"\n\nfrom sqlalchemy import Column, String, DateTime, BigInteger, Numeric, ForeignKey\nfrom sqlalchemy.dialects.postgresql import UUID\nfrom sqlalchemy.orm import relationship\nfrom sqlalchemy.sql import func\nfrom synapse.database import Base\n\n# Simple..."
      }
    },
    "test_llm_endpoint.py": {
      "category": "review_individual",
      "info": {
        "size_bytes": 4377,
        "size_kb": 4.3,
        "modified": "2025-07-01T13:56:42.268771",
        "exists": true,
        "line_count": 135,
        "char_count": 4337,
        "imports": [
          "import asyncio",
          "import aiohttp",
          "import json",
          "from typing import Dict, Any"
        ],
        "has_pytest": false,
        "has_unittest": false,
        "has_async": true,
        "has_fastapi": false,
        "is_database_test": false,
        "is_api_test": true,
        "is_llm_test": true,
        "is_auth_test": true,
        "has_hardcoded_values": true,
        "is_debug": true,
        "content_preview": "#!/usr/bin/env python3\n\"\"\"\nScript para testar especificamente o endpoint LLM que estava falhando\n\"\"\"\n\nimport asyncio\nimport aiohttp\nimport json\nfrom typing import Dict, Any\n\nBASE_URL = \"http://localhost:8000\"\n\n\nasync def test_llm_models_endpoint():\n    \"\"\"Testa o endpoint /api/v1/llm/models\"\"\"\n\n    async with aiohttp.ClientSession() as session:\n        # Primeiro, fazer login para obter o token\n        login_data = {\"username\": \"test@test.com\", \"password\": \"test123\"}\n\n        print(\"\ud83d\udd10 Fazendo lo..."
      }
    },
    "init-debug.log": {
      "category": "other",
      "info": {
        "size_bytes": 7154,
        "size_kb": 7.0,
        "modified": "2025-06-30T13:40:28.244973",
        "exists": true,
        "line_count": 92,
        "char_count": 7144,
        "imports": [],
        "has_pytest": false,
        "has_unittest": false,
        "has_async": false,
        "has_fastapi": false,
        "is_database_test": false,
        "is_api_test": false,
        "is_llm_test": true,
        "is_auth_test": false,
        "has_hardcoded_values": false,
        "is_debug": false,
        "content_preview": "[INFO] No rules specified; interactive setup will be launched to select profiles.\n[INFO] Required options not provided, proceeding with prompts.\n[INFO] Initializing project in /Users/joaovictormiranda/backend/synapse-backend-agents-jc\n[INFO] Created directory: /Users/joaovictormiranda/backend/synapse-backend-agents-jc/.taskmaster\n[INFO] Created directory: /Users/joaovictormiranda/backend/synapse-backend-agents-jc/.taskmaster/tasks\n[INFO] Created directory: /Users/joaovictormiranda/backend/synaps..."
      }
    },
    "test_error_handling_system.py": {
      "category": "keep_current_functional",
      "info": {
        "size_bytes": 8827,
        "size_kb": 8.6,
        "modified": "2025-07-01T13:56:42.456917",
        "exists": true,
        "line_count": 295,
        "char_count": 8677,
        "imports": [
          "import os",
          "import sys",
          "import asyncio",
          "import logging",
          "import traceback",
          "import time",
          "from pathlib import Path",
          "from synapse.exceptions import (",
          "from synapse.logger_config import get_logger, get_error_stats",
          "from synapse.error_handlers import create_error_response, synapse_exception_handler",
          "from synapse.middlewares.error_middleware import ErrorInterceptionMiddleware"
        ],
        "has_pytest": false,
        "has_unittest": false,
        "has_async": true,
        "has_fastapi": false,
        "is_database_test": true,
        "is_api_test": true,
        "is_llm_test": true,
        "is_auth_test": true,
        "has_hardcoded_values": false,
        "is_debug": true,
        "content_preview": "\"\"\"\nTeste do Sistema de Error Handling e Logging do SynapScale\n\nEste teste verifica se o sistema de tratamento de erros globais,\nlogging estruturado e exce\u00e7\u00f5es customizadas est\u00e1 funcionando corretamente.\n\"\"\"\n\nimport os\nimport sys\nimport asyncio\nimport logging\nimport traceback\nimport time\nfrom pathlib import Path\n\n# Adicionar src ao path\nproject_root = Path(__file__).resolve().parent\nsrc_path = project_root / \"src\"\nif str(src_path) not in sys.path:\n    sys.path.insert(0, str(src_path))\n\nfrom syna..."
      }
    },
    "validate_complete_structure.py": {
      "category": "review_database_validation",
      "info": {
        "size_bytes": 10064,
        "size_kb": 9.8,
        "modified": "2025-07-01T16:51:03.193858",
        "exists": true,
        "line_count": 278,
        "char_count": 9956,
        "imports": [
          "import sys",
          "import os",
          "from src.synapse.database import sync_engine, DATABASE_SCHEMA",
          "from sqlalchemy import text",
          "import glob",
          "import importlib"
        ],
        "has_pytest": false,
        "has_unittest": false,
        "has_async": false,
        "has_fastapi": false,
        "is_database_test": true,
        "is_api_test": false,
        "is_llm_test": true,
        "is_auth_test": true,
        "has_hardcoded_values": false,
        "is_debug": true,
        "content_preview": "#!/usr/bin/env python3\n\"\"\"\nValida\u00e7\u00e3o COMPLETA da estrutura do banco vs modelos\nVerifica TODAS as 103 tabelas e seus modelos correspondentes\n\"\"\"\n\nimport sys\nimport os\nsys.path.insert(0, '/Users/joaovictormiranda/backend/synapse-backend-agents-jc')\n\n# Configurar env m\u00ednimas\nos.environ.setdefault('SECRET_KEY', 'test-secret-key')\nos.environ.setdefault('JWT_SECRET_KEY', 'test-jwt-secret')\nos.environ.setdefault('DATABASE_URL', 'postgresql://test:test@localhost/test')\n\nfrom src.synapse.database import ..."
      }
    },
    "test_service_layer_integration.py": {
      "category": "keep_current_functional",
      "info": {
        "size_bytes": 10737,
        "size_kb": 10.5,
        "modified": "2025-07-01T13:56:42.442328",
        "exists": true,
        "line_count": 282,
        "char_count": 10643,
        "imports": [
          "import asyncio",
          "import logging",
          "import sys",
          "import os",
          "from pathlib import Path",
          "from uuid import uuid4",
          "from datetime import datetime",
          "from synapse.core.services import configure_services, get_container",
          "from synapse.database import init_db, get_db"
        ],
        "has_pytest": false,
        "has_unittest": false,
        "has_async": true,
        "has_fastapi": false,
        "is_database_test": true,
        "is_api_test": true,
        "is_llm_test": true,
        "is_auth_test": true,
        "has_hardcoded_values": true,
        "is_debug": true,
        "content_preview": "#!/usr/bin/env python3\n\"\"\"\nService Layer Integration Test.\n\nThis script tests the complete service layer architecture including:\n- Dependency injection container integration\n- BaseService and repository pattern functionality\n- Database access through service layer\n- CRUD operations end-to-end\n- Transaction management and rollback\n- Error handling and logging\n\nRun this script to verify that the service layer foundation is working correctly.\n\"\"\"\n\nimport asyncio\nimport logging\nimport sys\nimport os\n..."
      }
    },
    "setup_improved_testing.py": {
      "category": "review_setup_scripts",
      "info": {
        "size_bytes": 3151,
        "size_kb": 3.1,
        "modified": "2025-07-01T13:56:40.019057",
        "exists": true,
        "line_count": 113,
        "char_count": 3083,
        "imports": [
          "import subprocess",
          "import sys",
          "import os",
          "import jsonschema",
          "import requests"
        ],
        "has_pytest": false,
        "has_unittest": false,
        "has_async": false,
        "has_fastapi": false,
        "is_database_test": true,
        "is_api_test": true,
        "is_llm_test": true,
        "is_auth_test": false,
        "has_hardcoded_values": true,
        "is_debug": true,
        "content_preview": "#!/usr/bin/env python3\n\"\"\"\nScript para configurar ambiente de teste melhorado\nInstala depend\u00eancias e valida configura\u00e7\u00e3o\n\"\"\"\nimport subprocess\nimport sys\nimport os\n\n\ndef install_dependencies():\n    \"\"\"Instala depend\u00eancias necess\u00e1rias\"\"\"\n    print(\"\ud83d\udd27 Instalando depend\u00eancias para teste melhorado...\")\n\n    dependencies = [\"jsonschema>=4.0.0\", \"requests>=2.25.0\"]\n\n    for dep in dependencies:\n        try:\n            print(f\"   Instalando {dep}...\")\n            subprocess.check_call(\n               ..."
      }
    },
    "comprehensive_validation.py": {
      "category": "review_database_validation",
      "info": {
        "size_bytes": 9676,
        "size_kb": 9.4,
        "modified": "2025-07-01T16:44:41.446514",
        "exists": true,
        "line_count": 273,
        "char_count": 9539,
        "imports": [
          "import os",
          "import sys",
          "from pathlib import Path",
          "import logging",
          "from sqlalchemy import create_engine, text, inspect",
          "from sqlalchemy.orm import sessionmaker",
          "from dotenv import load_dotenv",
          "from synapse.models.workspace import Workspace",
          "from synapse.models.user import User",
          "from synapse.models.tenant import Tenant",
          "from synapse.models.plan import Plan",
          "from synapse.models.agent import Agent",
          "from synapse.models.workflow import Workflow",
          "from synapse.models.node import Node",
          "from synapse.models.feature import Feature"
        ],
        "has_pytest": false,
        "has_unittest": false,
        "has_async": false,
        "has_fastapi": false,
        "is_database_test": true,
        "is_api_test": false,
        "is_llm_test": true,
        "is_auth_test": false,
        "has_hardcoded_values": false,
        "is_debug": false,
        "content_preview": "#!/usr/bin/env python3\n\"\"\"\nScript de valida\u00e7\u00e3o abrangente para verificar todos os modelos SQLAlchemy\ncontra a estrutura real do banco de dados.\n\"\"\"\n\nimport os\nimport sys\nfrom pathlib import Path\n\n# Adicionar o src ao path\nsys.path.append(str(Path(__file__).parent / \"src\"))\n\nimport logging\nfrom sqlalchemy import create_engine, text, inspect\nfrom sqlalchemy.orm import sessionmaker\nfrom dotenv import load_dotenv\n\n# Carregar vari\u00e1veis de ambiente\nload_dotenv()\n\n# Configurar logging\nlogging.basicConf..."
      }
    },
    "endpoint_database_sync_analysis.py": {
      "category": "review_database_validation",
      "info": {
        "size_bytes": 14382,
        "size_kb": 14.0,
        "modified": "2025-07-01T17:42:19.134646",
        "exists": true,
        "line_count": 343,
        "char_count": 14242,
        "imports": [
          "import os",
          "import json",
          "import asyncio",
          "import asyncpg",
          "from dotenv import load_dotenv",
          "from pathlib import Path",
          "from typing import Dict, List, Set, Tuple"
        ],
        "has_pytest": false,
        "has_unittest": false,
        "has_async": true,
        "has_fastapi": false,
        "is_database_test": true,
        "is_api_test": true,
        "is_llm_test": true,
        "is_auth_test": true,
        "has_hardcoded_values": false,
        "is_debug": true,
        "content_preview": "#!/usr/bin/env python3\n\"\"\"\nScript para verificar sincroniza\u00e7\u00e3o entre estrutura do banco de dados e endpoints da API\n\"\"\"\n\nimport os\nimport json\nimport asyncio\nimport asyncpg\nfrom dotenv import load_dotenv\nfrom pathlib import Path\nfrom typing import Dict, List, Set, Tuple\n\n# Carregar vari\u00e1veis de ambiente\nload_dotenv()\n\nclass EndpointDatabaseSyncAnalyzer:\n    def __init__(self):\n        self.database_url = os.getenv('DATABASE_URL')\n        self.schema_name = os.getenv('DATABASE_SCHEMA', 'synapscal..."
      }
    },
    "synapscale_api_test_report_20250701_070113.json": {
      "category": "archive_reports",
      "info": {
        "size_bytes": 63940,
        "size_kb": 62.4,
        "modified": "2025-07-01T07:01:13.916226",
        "exists": true,
        "line_count": 2477,
        "char_count": 63940,
        "imports": [],
        "has_pytest": false,
        "has_unittest": false,
        "has_async": false,
        "has_fastapi": false,
        "is_database_test": true,
        "is_api_test": true,
        "is_llm_test": true,
        "is_auth_test": true,
        "has_hardcoded_values": true,
        "is_debug": true,
        "content_preview": "{\n  \"test_config\": {\n    \"base_url\": \"http://localhost:8000\",\n    \"timestamp\": \"2025-07-01T07:01:13.914303\",\n    \"total_endpoints\": 239,\n    \"tested_endpoints\": 239\n  },\n  \"metrics\": {\n    \"total\": 239,\n    \"tested\": 239,\n    \"passed\": 239,\n    \"failed\": 0,\n    \"by_method\": {\n      \"GET\": {\n        \"passed\": 120,\n        \"failed\": 0\n      },\n      \"POST\": {\n        \"passed\": 83,\n        \"failed\": 0\n      },\n      \"DELETE\": {\n        \"passed\": 17,\n        \"failed\": 0\n      },\n      \"PUT\": {\n     ..."
      }
    },
    "test_auth_endpoints.py": {
      "category": "keep_current_functional",
      "info": {
        "size_bytes": 14022,
        "size_kb": 13.7,
        "modified": "2025-07-01T13:56:42.281247",
        "exists": true,
        "line_count": 359,
        "char_count": 13828,
        "imports": [
          "import requests",
          "import json",
          "from urllib.parse import urljoin",
          "from typing import Dict, List, Optional",
          "import time"
        ],
        "has_pytest": false,
        "has_unittest": false,
        "has_async": false,
        "has_fastapi": false,
        "is_database_test": false,
        "is_api_test": true,
        "is_llm_test": true,
        "is_auth_test": true,
        "has_hardcoded_values": true,
        "is_debug": true,
        "content_preview": "#!/usr/bin/env python3\n\"\"\"\nScript de teste rigoroso para verificar autentica\u00e7\u00e3o obrigat\u00f3ria\nS\u00f3 considera sucesso quando h\u00e1 autentica\u00e7\u00e3o v\u00e1lida E resposta 2xx\n\"\"\"\n\nimport requests\nimport json\nfrom urllib.parse import urljoin\nfrom typing import Dict, List, Optional\nimport time\n\n# Configura\u00e7\u00f5es\nAPI_BASE_URL = \"http://localhost:8000\"\nAPI_V1_PREFIX = \"/api/v1\"\n\n# Endpoints que DEVEM ser p\u00fablicos (sem autentica\u00e7\u00e3o)\nPUBLIC_ENDPOINTS = {\n    \"/\",\n    \"/health\",\n    \"/api/v1/health\",\n    \"/info\",\n    \"/a..."
      }
    },
    "test_endpoints_comprehensive.py": {
      "category": "keep_current_functional",
      "info": {
        "size_bytes": 20968,
        "size_kb": 20.5,
        "modified": "2025-07-01T13:56:42.565735",
        "exists": true,
        "line_count": 610,
        "char_count": 20820,
        "imports": [
          "import argparse",
          "import asyncio",
          "import aiohttp",
          "import json",
          "import time",
          "import uuid",
          "from datetime import datetime",
          "from typing import Dict, List, Any, Optional",
          "from urllib.parse import urljoin",
          "import re",
          "import concurrent.futures",
          "from dataclasses import dataclass",
          "import os",
          "import sys"
        ],
        "has_pytest": false,
        "has_unittest": false,
        "has_async": false,
        "has_fastapi": false,
        "is_database_test": true,
        "is_api_test": true,
        "is_llm_test": true,
        "is_auth_test": true,
        "has_hardcoded_values": true,
        "is_debug": true,
        "content_preview": "#!/usr/bin/env python3\n\"\"\"\nSCRIPT ABRANGENTE DE TESTE DE ENDPOINTS - SYNAPSCALE API\nVers\u00e3o otimizada com testes paralelos, autentica\u00e7\u00e3o robusta e relat\u00f3rios detalhados\n\"\"\"\nimport argparse\nimport asyncio\nimport aiohttp\nimport json\nimport time\nimport uuid\nfrom datetime import datetime\nfrom typing import Dict, List, Any, Optional\nfrom urllib.parse import urljoin\nimport re\nimport concurrent.futures\nfrom dataclasses import dataclass\nimport os\nimport sys\n\n# Configura\u00e7\u00f5es\nAPI_BASE_URL = \"http://localho..."
      }
    },
    "AGENTS_API_DOCUMENTATION.md": {
      "category": "other",
      "info": {
        "size_bytes": 7452,
        "size_kb": 7.3,
        "modified": "2025-07-01T09:47:09.078870",
        "exists": true,
        "line_count": 239,
        "char_count": 7195,
        "imports": [],
        "has_pytest": false,
        "has_unittest": false,
        "has_async": false,
        "has_fastapi": false,
        "is_database_test": true,
        "is_api_test": true,
        "is_llm_test": true,
        "is_auth_test": true,
        "has_hardcoded_values": false,
        "is_debug": false,
        "content_preview": "# \ud83e\udd16 **Sistema Completo de Agents - Documenta\u00e7\u00e3o da API**\n\n## \ud83d\udccb **Resumo da Implementa\u00e7\u00e3o**\n\nSistema completo implementado para **11 tabelas de agents** com **40+ endpoints** organizados e estruturados, incluindo multi-tenancy e controle de acesso.\n\n---\n\n## \ud83d\uddc2\ufe0f **Estrutura Implementada**\n\n### **1. Tabelas e Models**\n- \u2705 `agents` - Tabela principal\n- \u2705 `agent_tools` - Rela\u00e7\u00e3o N:N com ferramentas  \n- \u2705 `agent_models` - Rela\u00e7\u00e3o N:N com LLMs\n- \u2705 `agent_configurations` - Versionamento de configura\u00e7\u00f5es\n..."
      }
    },
    "AGENTS.md": {
      "category": "other",
      "info": {
        "size_bytes": 13404,
        "size_kb": 13.1,
        "modified": "2025-06-25T07:22:33.675756",
        "exists": true,
        "line_count": 418,
        "char_count": 13258,
        "imports": [],
        "has_pytest": false,
        "has_unittest": false,
        "has_async": false,
        "has_fastapi": false,
        "is_database_test": true,
        "is_api_test": true,
        "is_llm_test": true,
        "is_auth_test": true,
        "has_hardcoded_values": false,
        "is_debug": true,
        "content_preview": "# Task Master AI - Claude Code Integration Guide\n\n## Essential Commands\n\n### Core Workflow Commands\n\n```bash\n# Project Setup\ntask-master init                                    # Initialize Task Master in current project\ntask-master parse-prd .taskmaster/docs/prd.txt      # Generate tasks from PRD document\ntask-master models --setup                        # Configure AI models interactively\n\n# Daily Development Workflow\ntask-master list                                   # Show all tasks with sta..."
      }
    },
    "run_with_memory_bank.py": {
      "category": "other",
      "info": {
        "size_bytes": 2392,
        "size_kb": 2.3,
        "modified": "2025-07-01T13:56:39.859436",
        "exists": true,
        "line_count": 83,
        "char_count": 2372,
        "imports": [
          "import os",
          "import sys",
          "import logging",
          "import subprocess",
          "from pathlib import Path",
          "import memory_bank"
        ],
        "has_pytest": false,
        "has_unittest": false,
        "has_async": false,
        "has_fastapi": false,
        "is_database_test": false,
        "is_api_test": false,
        "is_llm_test": true,
        "is_auth_test": false,
        "has_hardcoded_values": false,
        "is_debug": false,
        "content_preview": "#!/usr/bin/env python\n\"\"\"\nScript para executar o SynapScale Backend com o Memory Bank habilitado\n\"\"\"\nimport os\nimport sys\nimport logging\nimport subprocess\nfrom pathlib import Path\n\n# Configurar logging\nlogging.basicConfig(\n    level=logging.INFO, format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\"\n)\nlogger = logging.getLogger(\"synapse-memory-bank-runner\")\n\n\ndef main():\n    \"\"\"\n    Fun\u00e7\u00e3o principal para executar o SynapScale Backend com o Memory Bank\n    \"\"\"\n    try:\n        # Verificar..."
      }
    },
    "tasks.json": {
      "category": "other",
      "info": {
        "size_bytes": 21236,
        "size_kb": 20.7,
        "modified": "2025-07-01T15:36:38.110972",
        "exists": true,
        "line_count": 499,
        "char_count": 20992,
        "imports": [],
        "has_pytest": false,
        "has_unittest": false,
        "has_async": false,
        "has_fastapi": false,
        "is_database_test": true,
        "is_api_test": true,
        "is_llm_test": true,
        "is_auth_test": true,
        "has_hardcoded_values": false,
        "is_debug": false,
        "content_preview": "{\n  \"tasks\": [\n    {\n      \"id\": 1,\n      \"title\": \"An\u00e1lise e Corre\u00e7\u00e3o de Modelos Cr\u00edticos (ALTA PRIORIDADE)\",\n      \"description\": \"Corrigir problemas cr\u00edticos nos modelos existentes, incluindo workspace_features e relacionamentos de chave estrangeira\",\n      \"status\": \"done\",\n      \"dependencies\": [],\n      \"priority\": \"high\",\n      \"details\": \"Esta \u00e9 a fase mais cr\u00edtica. Precisamos primeiro corrigir os modelos existentes com problemas antes de prosseguir com novos modelos. Inclui corre\u00e7\u00e3o de ..."
      }
    },
    "performance_report.txt": {
      "category": "archive_reports",
      "info": {
        "size_bytes": 2878,
        "size_kb": 2.8,
        "modified": "2025-07-01T05:47:12.957945",
        "exists": true,
        "line_count": 126,
        "char_count": 2826,
        "imports": [],
        "has_pytest": false,
        "has_unittest": false,
        "has_async": false,
        "has_fastapi": false,
        "is_database_test": true,
        "is_api_test": false,
        "is_llm_test": true,
        "is_auth_test": false,
        "has_hardcoded_values": false,
        "is_debug": false,
        "content_preview": "================================================================================\n\ud83c\udfc6 SYNAPSCALE DATABASE PERFORMANCE REPORT\n================================================================================\n\n\ud83d\udcca PERFORMANCE SUMMARY:\n----------------------------------------\n\ud83d\udfe1 Health Check                124.82ms avg\n\ud83d\udfe1 Schema Info                 126.01ms avg\n\ud83d\udfe1 Workspaces Rls              125.24ms avg\n\ud83d\udfe1 Complex Join                125.29ms avg\n\ud83d\udfe1 Without Rls                 124.87ms avg\n\ud83d\udfe1 With Rls       ..."
      }
    },
    "check_missing_models.py": {
      "category": "review_database_validation",
      "info": {
        "size_bytes": 5387,
        "size_kb": 5.3,
        "modified": "2025-07-01T15:53:37.332604",
        "exists": true,
        "line_count": 135,
        "char_count": 5376,
        "imports": [
          "import psycopg2",
          "import os",
          "from pathlib import Path"
        ],
        "has_pytest": false,
        "has_unittest": false,
        "has_async": false,
        "has_fastapi": false,
        "is_database_test": true,
        "is_api_test": false,
        "is_llm_test": true,
        "is_auth_test": true,
        "has_hardcoded_values": false,
        "is_debug": true,
        "content_preview": "#!/usr/bin/env python3\n\"\"\"\nScript para verificar quais tabelas do banco n\u00e3o possuem modelos SQLAlchemy correspondentes\n\"\"\"\n\nimport psycopg2\nimport os\nfrom pathlib import Path\n\n# Tabelas no banco (103 tabelas)\nDATABASE_TABLES = [\n    'agent_acl', 'agent_configurations', 'agent_error_logs', 'agent_hierarchy', 'agent_kbs',\n    'agent_models', 'agent_quotas', 'agent_tools', 'agent_triggers', 'agent_usage_metrics',\n    'agents', 'alembic_version', 'analytics_alerts', 'analytics_dashboards', 'analytic..."
      }
    },
    "VALIDATION_REPORT.md": {
      "category": "archive_reports",
      "info": {
        "size_bytes": 5348,
        "size_kb": 5.2,
        "modified": "2025-07-01T16:47:04.299426",
        "exists": true,
        "line_count": 144,
        "char_count": 5229,
        "imports": [],
        "has_pytest": false,
        "has_unittest": false,
        "has_async": false,
        "has_fastapi": false,
        "is_database_test": true,
        "is_api_test": true,
        "is_llm_test": true,
        "is_auth_test": true,
        "has_hardcoded_values": false,
        "is_debug": false,
        "content_preview": "# Relat\u00f3rio de Valida\u00e7\u00e3o da Estrutura do Banco de Dados\n\n## Resumo Executivo\n\n\u2705 **VALIDA\u00c7\u00c3O COMPLETA**: Todos os modelos principais est\u00e3o **PERFEITAMENTE ALINHADOS** com a estrutura real do banco de dados PostgreSQL.\n\n## Base de Dados Validada\n\n- **Database**: `defaultdb`  \n- **Schema**: `synapscale_db`\n- **Total de Tabelas**: 103\n- **SGBD**: PostgreSQL\n\n## Estrutura Validada\n\n### 1. Tabela `users` (19 colunas)\n\u2705 **PERFEITAMENTE ALINHADA**\n\n**Colunas validadas:**\n- `id` (UUID, PRIMARY KEY)\n- `em..."
      }
    },
    "CLAUDE.md": {
      "category": "other",
      "info": {
        "size_bytes": 13404,
        "size_kb": 13.1,
        "modified": "2025-06-25T07:22:33.671290",
        "exists": true,
        "line_count": 418,
        "char_count": 13258,
        "imports": [],
        "has_pytest": false,
        "has_unittest": false,
        "has_async": false,
        "has_fastapi": false,
        "is_database_test": true,
        "is_api_test": true,
        "is_llm_test": true,
        "is_auth_test": true,
        "has_hardcoded_values": false,
        "is_debug": true,
        "content_preview": "# Task Master AI - Claude Code Integration Guide\n\n## Essential Commands\n\n### Core Workflow Commands\n\n```bash\n# Project Setup\ntask-master init                                    # Initialize Task Master in current project\ntask-master parse-prd .taskmaster/docs/prd.txt      # Generate tasks from PRD document\ntask-master models --setup                        # Configure AI models interactively\n\n# Daily Development Workflow\ntask-master list                                   # Show all tasks with sta..."
      }
    },
    "validate_no_hardcoded_final.py": {
      "category": "other",
      "info": {
        "size_bytes": 8067,
        "size_kb": 7.9,
        "modified": "2025-07-01T13:56:43.101014",
        "exists": true,
        "line_count": 245,
        "char_count": 7964,
        "imports": [
          "import os",
          "import re",
          "import glob",
          "from typing import List, Tuple"
        ],
        "has_pytest": false,
        "has_unittest": false,
        "has_async": false,
        "has_fastapi": false,
        "is_database_test": false,
        "is_api_test": true,
        "is_llm_test": true,
        "is_auth_test": true,
        "has_hardcoded_values": false,
        "is_debug": true,
        "content_preview": "#!/usr/bin/env python3\n\"\"\"\nScript para validar que n\u00e3o h\u00e1 valores hardcoded no sistema\nGarante que tudo vem do .env\n\"\"\"\n\nimport os\nimport re\nimport glob\nfrom typing import List, Tuple\n\n\ndef scan_for_hardcoded_values() -> List[Tuple[str, str, int, str]]:\n    \"\"\"\n    Escaneia arquivos Python em busca de valores hardcoded\n    Retorna lista de (arquivo, padr\u00e3o, linha, conte\u00fado)\n    \"\"\"\n\n    findings = []\n\n    # Padr\u00f5es a procurar (valores hardcoded suspeitos)\n    patterns = {\n        \"api_keys\": r\"(..."
      }
    },
    "test_endpoints_functional.py": {
      "category": "keep_current_functional",
      "info": {
        "size_bytes": 23708,
        "size_kb": 23.2,
        "modified": "2025-07-01T13:56:42.476268",
        "exists": true,
        "line_count": 642,
        "char_count": 23576,
        "imports": [
          "import requests",
          "import json",
          "import uuid",
          "import time",
          "from datetime import datetime",
          "from typing import Dict, List, Any, Optional",
          "import argparse"
        ],
        "has_pytest": false,
        "has_unittest": false,
        "has_async": false,
        "has_fastapi": false,
        "is_database_test": false,
        "is_api_test": true,
        "is_llm_test": true,
        "is_auth_test": true,
        "has_hardcoded_values": true,
        "is_debug": true,
        "content_preview": "#!/usr/bin/env python3\n\"\"\"\nTESTE FUNCIONAL ESPEC\u00cdFICO DE ENDPOINTS - SYNAPSCALE API\nFoca em testes funcionais detalhados por categoria\n\"\"\"\nimport requests\nimport json\nimport uuid\nimport time\nfrom datetime import datetime\nfrom typing import Dict, List, Any, Optional\nimport argparse\n\n# Configura\u00e7\u00f5es\nAPI_BASE_URL = \"http://localhost:8000\"\nAPI_V1_PREFIX = \"/api/v1\"\n\n\nclass FunctionalEndpointTester:\n    def __init__(self, base_url: str = API_BASE_URL, verbose: bool = False):\n        self.base_url = b..."
      }
    },
    "final_relationship_test.py": {
      "category": "other",
      "info": {
        "size_bytes": 6486,
        "size_kb": 6.3,
        "modified": "2025-07-01T16:47:07.270830",
        "exists": true,
        "line_count": 175,
        "char_count": 6408,
        "imports": [
          "import os",
          "import sys",
          "from pathlib import Path",
          "import logging",
          "from sqlalchemy import create_engine",
          "from sqlalchemy.orm import sessionmaker",
          "from dotenv import load_dotenv",
          "from synapse.models.workspace import Workspace",
          "from synapse.models.workspace_project import WorkspaceProject",
          "from synapse.models.workspace_member import WorkspaceMember",
          "from synapse.models.workspace_activity import WorkspaceActivity",
          "from synapse.models.workspace_invitation import WorkspaceInvitation",
          "from synapse.models.user import User",
          "from synapse.models.tenant import Tenant",
          "from synapse.models.plan import Plan",
          "from synapse.models.agent import Agent",
          "from synapse.models.workflow import Workflow",
          "from synapse.models.node import Node",
          "from synapse.models.feature import Feature",
          "from synapse.models.file import File",
          "from synapse.models.llm import LLM"
        ],
        "has_pytest": false,
        "has_unittest": false,
        "has_async": false,
        "has_fastapi": false,
        "is_database_test": true,
        "is_api_test": false,
        "is_llm_test": true,
        "is_auth_test": false,
        "has_hardcoded_values": false,
        "is_debug": false,
        "content_preview": "#!/usr/bin/env python3\n\"\"\"\nTeste final para verificar relacionamentos SQLAlchemy e registry.\n\"\"\"\n\nimport os\nimport sys\nfrom pathlib import Path\n\n# Adicionar o src ao path\nsys.path.append(str(Path(__file__).parent / \"src\"))\n\nimport logging\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker\nfrom dotenv import load_dotenv\n\n# Carregar vari\u00e1veis de ambiente\nload_dotenv()\n\n# Configurar logging\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\ndef t..."
      }
    }
  },
  "recommendations": {
    "keep": {
      "files": [
        "test_llm_endpoints.py",
        "test_error_handling_system.py",
        "test_service_layer_integration.py",
        "test_auth_endpoints.py",
        "test_endpoints_comprehensive.py",
        "test_endpoints_functional.py"
      ],
      "action": "Keep these files - they are current functional tests",
      "reason": "These test the current API endpoints and core functionality"
    },
    "consolidate_database": {
      "files": [
        "validate_models_comprehensive.py",
        "analyze_remaining_models.py",
        "comprehensive_model_test.py",
        "test_model_validation.py",
        "verify_models_detailed.py",
        "check_database_structure.py",
        "final_database_alignment_test.py",
        "test_models_detailed.py",
        "test_simple_models.py",
        "validate_complete_structure.py",
        "comprehensive_validation.py",
        "endpoint_database_sync_analysis.py",
        "check_missing_models.py"
      ],
      "count": 13,
      "total_size_kb": 94.2,
      "action": "Review and consolidate these database validation scripts",
      "reason": "Multiple scripts testing similar database functionality can be merged"
    },
    "remove": {
      "files": [
        "test_simple_imports.py",
        "test_llm_endpoint_simple.py",
        "temp_backup.py",
        "decrypt_existing_data.py",
        "current_openapi.json.backup"
      ],
      "count": 5,
      "total_size_kb": 863.3,
      "action": "Delete these files - they are deprecated or temporary",
      "reason": "No longer needed for current functionality"
    },
    "archive": {
      "files": [
        "FINAL_VALIDATION_REPORT.md",
        "database_structure_analysis_20250701_175004.json",
        "ENDPOINTS_IMPLEMENTATION_SUMMARY.md",
        "OPENAPI_AGENTS_UPDATE_SUMMARY.md",
        "synapscale_api_test_report_20250701_070113.json",
        "performance_report.txt",
        "VALIDATION_REPORT.md"
      ],
      "count": 7,
      "total_size_kb": 1290.0,
      "action": "Move these to docs/archive/ folder",
      "reason": "Historical reports and analysis documents"
    },
    "review_individual": {
      "files": [
        "test_registration_debug.py",
        "test_agents_system.py",
        "test_complete_llm_system.py",
        "test_cleanup_analysis.py",
        "test_service_architecture.py",
        "test_llm_endpoint.py"
      ],
      "count": 6,
      "action": "Review each file individually to determine keep/remove/update",
      "reason": "These files need individual assessment for current relevance"
    }
  }
}