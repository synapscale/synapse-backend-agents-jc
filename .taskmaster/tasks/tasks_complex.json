{
    "metadata": {
      "version": "0.18.0",
      "createdAt": "2025-01-30T16:45:00.000Z",
      "updatedAt": "2025-01-30T16:45:00.000Z",
      "name": "SaaS Critical Fixes",
      "description": "Correções críticas da estrutura SaaS SynapScale baseadas na análise empírica do banco de dados"
    },
    "tasks": [
      {
        "id": 1,
        "title": "EMERGENCIAL: Correção Features FREE Plan",
        "description": "Remover features premium incorretas do plano FREE que estão causando perda crítica de receita de $79.90-$199.90/mês por tenant",
        "status": "pending",
        "priority": "high",
        "dependencies": [],
        "details": "SCRIPT SQL EMERGENCIAL:\n1. UPDATE plan_features SET is_enabled=false WHERE plan_id=(SELECT id FROM plans WHERE slug='free') AND feature_id IN (SELECT id FROM features WHERE key IN ('sso','white_label','priority_support','custom_branding','api_access','webhooks'));\n2. Manter habilitadas apenas: workspace_creation (limit 3), agent_creation (limit 2)\n3. UPDATE plans SET features=NULL WHERE slug='free'; -- Deprecar JSON conflitante\n4. Validar exatamente 2 features ativas no FREE\n5. Testar API endpoints com feature gates\n6. Documentar mudanças no changelog\n\nPROBLEMA ATUAL: FREE plan tem 20 features vs apenas 2 corretas conforme análise synapscale_db",
        "testStrategy": "1. Query antes: SELECT COUNT(*) FROM plan_features pf JOIN plans p ON pf.plan_id=p.id WHERE p.slug='free' AND pf.is_enabled=true; (deve ser 20)\n2. Executar script de correção\n3. Query depois: Deve mostrar exatamente 2 features ativas\n4. Testar API GET /features com user FREE → deve negar premium features\n5. Verificar billing accuracy: FREE users não podem acessar SSO, white_label, etc\n6. Smoke test: criar workspace FREE → máximo 3 permitidos",
        "subtasks": []
      },
      {
        "id": 2,
        "title": "EMERGENCIAL: Configurar Planos Premium (BASIC/PRO/ENTERPRISE)",
        "description": "Configurar features corretas para planos pagos que atualmente têm valores NULL, causando inconsistência total",
        "status": "pending",
        "priority": "high",
        "dependencies": [1],
        "details": "CONFIGURAÇÃO EMERGENCIAL DOS PLANOS:\n\nBASIC ($29.90/mês):\n- workspace_creation (limit 10)\n- agent_creation (limit 5)\n- api_access\n- basic_analytics\n- email_support\n\nPRO ($79.90/mês):\n- Todas features BASIC +\n- advanced_analytics\n- custom_branding\n- webhooks\n- priority_support\n- collaboration_tools\n\nENTERPRISE ($199.90/mês):\n- Todas features PRO +\n- sso\n- white_label\n- dedicated_support\n- enterprise_security\n\nSCRIPT SQL:\nINSERT INTO plan_features (plan_id, feature_id, is_enabled, limits) VALUES (...)",
        "testStrategy": "1. Executar script de configuração para cada plano\n2. Verificar counts: BASIC (5 features), PRO (10 features), ENTERPRISE (14 features)\n3. Testar upgrade path: FREE → BASIC → PRO → ENTERPRISE\n4. Validar limites por plano (workspaces, agents, storage)\n5. Testar feature gates por plano no frontend\n6. Confirmar billing integration accuracy",
        "subtasks": []
      },
      {
        "id": 3,
        "title": "CRÍTICO: Eliminar Dual Truth System (JSON vs Relacional)",
        "description": "Remover uso conflitante de plans.features (JSON) vs plan_features (relacional) que causa comportamento indefinido",
        "status": "pending",
        "priority": "high",
        "dependencies": [1, 2],
        "details": "DECISÃO ARQUITETURAL: Usar apenas tabela relacional plan_features\n\nETAPAS:\n1. Backup de plans.features JSON existente\n2. Migrar lógica de aplicação para usar apenas plan_features\n3. UPDATE plans SET features=NULL, restrictions=NULL; -- Deprecar JSON\n4. Remover código que consulta JSON plans.features\n5. Atualizar API endpoints para usar plan_features\n6. Atualizar feature gates no frontend\n7. Criar trigger de consistência\n\nARQUIVOS A MODIFICAR:\n- API routes: /plans, /features, /subscriptions\n- Models: Plan.js, PlanFeature.js\n- Frontend: feature checks, billing pages",
        "testStrategy": "1. Backup completo antes da migração\n2. Teste de regressão completo: todas features por plano\n3. Verificar API consistency: GET /plans vs GET /plan-features\n4. Teste E2E: signup → plan selection → feature access\n5. Load test: performance com queries relacionais\n6. Rollback plan preparado caso falhas críticas",
        "subtasks": []
      },
      {
        "id": 4,
        "title": "ESTRUTURAL: Implementar Sincronização Tenant-Plan Automática",
        "description": "Criar sistema automático para sincronizar tenants com seus planos via subscriptions, eliminando dessincronia manual",
        "status": "pending",
        "priority": "high",
        "dependencies": [3],
        "details": "IMPLEMENTAR SISTEMA DE SINCRONIZAÇÃO:\n\n1. Criar view materializada:\nCREATE MATERIALIZED VIEW tenant_plan_features AS\nSELECT t.id as tenant_id, pf.feature_id, pf.is_enabled, pf.limits\nFROM tenants t\nJOIN subscriptions s ON t.id = s.tenant_id\nJOIN plans p ON s.plan_id = p.id\nJOIN plan_features pf ON p.id = pf.plan_id\nWHERE s.status = 'active';\n\n2. Triggers de sincronização automática:\n- ON subscription change → refresh view\n- ON plan_features change → refresh view\n\n3. API middleware para verificação\n\n4. Scheduled job para validação diária",
        "testStrategy": "1. Testar mudança de plano: FREE → PRO → features atualizadas instantaneamente\n2. Testar cancelamento: PRO → FREE → features removidas\n3. Testar bulk changes: modificar features PRO → todos tenants PRO afetados\n4. Performance test: view refresh time < 100ms\n5. Data consistency: manual check vs automated sync\n6. Error handling: plan change failure scenarios",
        "subtasks": []
      },
      {
        "id": 5,
        "title": "ESTRUTURAL: Implementar Validação de Limites Dinâmica",
        "description": "Criar sistema de constraints automáticas para prevenir violação de limites (workspaces, storage, membros)",
        "status": "pending",
        "priority": "medium",
        "dependencies": [4],
        "details": "SISTEMA DE CONSTRAINTS DINÂMICAS:\n\n1. Triggers de validação:\nCREATE OR REPLACE FUNCTION validate_workspace_limits()\nRETURNS TRIGGER AS $$\nBEGIN\n  IF (SELECT COUNT(*) FROM workspaces WHERE tenant_id = NEW.tenant_id) >= \n     (SELECT max_workspaces FROM tenant_plan_limits WHERE tenant_id = NEW.tenant_id)\n  THEN\n    RAISE EXCEPTION 'Workspace limit exceeded for tenant %', NEW.tenant_id;\n  END IF;\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;\n\n2. API validations pré-operação\n3. Frontend preventivo: disable buttons quando limite atingido\n4. Graceful degradation: soft limits com warnings",
        "testStrategy": "1. Teste limits: FREE (3 workspaces) → criar 4º deve falhar\n2. Teste upgrade: FREE → BASIC → limites expandidos automaticamente\n3. Teste storage: upload file quando próximo do limite\n4. Teste members: adicionar member quando no limite\n5. Performance: validation overhead < 10ms\n6. UX test: error messages claros para usuários",
        "subtasks": []
      },
      {
        "id": 6,
        "title": "ESTRUTURAL: Corrigir Problems de Foreign Keys",
        "description": "Padronizar ações de FK (CASCADE/RESTRICT) e tornar tenant_id NOT NULL onde crítico",
        "status": "pending",
        "priority": "medium",
        "dependencies": [5],
        "details": "CORREÇÕES DE INTEGRIDADE REFERENCIAL:\n\n1. Padronizar CASCADE behaviors:\nALTER TABLE users DROP CONSTRAINT users_tenant_id_fkey;\nALTER TABLE users ADD CONSTRAINT users_tenant_id_fkey \n  FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE;\n\n2. Tornar tenant_id NOT NULL:\nALTER TABLE users ALTER COLUMN tenant_id SET NOT NULL;\nALTER TABLE workspaces ALTER COLUMN tenant_id SET NOT NULL;\nALTER TABLE workflows ALTER COLUMN tenant_id SET NOT NULL;\n\n3. Criar indexes para performance:\nCREATE INDEX CONCURRENTLY idx_users_tenant_id ON users(tenant_id);\nCREATE INDEX CONCURRENTLY idx_workspaces_tenant_id ON workspaces(tenant_id);",
        "testStrategy": "1. Backup completo antes das alterações\n2. Teste CASCADE: deletar tenant → todos dados associados removidos\n3. Teste NOT NULL: tentar criar user sem tenant_id → deve falhar\n4. Performance test: queries com novos indexes\n5. Data integrity: verify referential integrity pós-mudanças\n6. Rollback test: capacidade de reverter se problemas",
        "subtasks": []
      },
      {
        "id": 7,
        "title": "OTIMIZAÇÃO: Migrar JSON Sensível para Colunas Estruturadas",
        "description": "Migrar dados críticos de JSONB (tenants.settings, tenants.extra_metadata) para colunas tipadas",
        "status": "pending",
        "priority": "medium",
        "dependencies": [6],
        "details": "MIGRAÇÃO DE DADOS SENSÍVEIS:\n\n1. Analisar structure atual dos JSONs:\nSELECT DISTINCT jsonb_object_keys(settings) FROM tenants;\nSELECT DISTINCT jsonb_object_keys(extra_metadata) FROM tenants;\n\n2. Criar colunas tipadas:\nALTER TABLE tenants ADD COLUMN timezone VARCHAR(50);\nALTER TABLE tenants ADD COLUMN max_storage_gb INTEGER;\nALTER TABLE tenants ADD COLUMN billing_email VARCHAR(255);\nALTER TABLE tenants ADD COLUMN security_settings JSONB; -- Only non-critical data\n\n3. Migrar dados existentes:\nUPDATE tenants SET \n  timezone = settings->>'timezone',\n  max_storage_gb = (settings->>'max_storage_gb')::INTEGER,\n  billing_email = settings->>'billing_email';",
        "testStrategy": "1. Data validation: compare JSON vs new columns\n2. Query performance: structured vs JSON queries\n3. Application compatibility: update all references\n4. Backup/restore test: ensure data integrity\n5. Index effectiveness on new columns\n6. Migration rollback capability",
        "subtasks": []
      },
      {
        "id": 8,
        "title": "OTIMIZAÇÃO: Implementar Audit System Completo",
        "description": "Criar sistema de auditoria para monitorar mudanças críticas em planos, features e limites",
        "status": "pending",
        "priority": "medium",
        "dependencies": [7],
        "details": "SISTEMA DE AUDITORIA:\n\n1. Criar tabela de audit:\nCREATE TABLE audit_log (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  table_name VARCHAR(50) NOT NULL,\n  operation VARCHAR(10) NOT NULL, -- INSERT, UPDATE, DELETE\n  row_id UUID NOT NULL,\n  old_values JSONB,\n  new_values JSONB,\n  changed_by UUID REFERENCES users(id),\n  changed_at TIMESTAMP DEFAULT now(),\n  tenant_id UUID REFERENCES tenants(id)\n);\n\n2. Triggers de auditoria para tabelas críticas:\n- plans, plan_features\n- tenants, subscriptions\n- workspaces (limit changes)\n\n3. Dashboard de auditoria para admins",
        "testStrategy": "1. Teste triggers: mudanças são logadas corretamente\n2. Performance impact: overhead do audit < 5%\n3. Data retention: cleanup de logs antigos\n4. Security: apenas admins acessam audit logs\n5. Compliance: logs atendem requisitos de auditoria\n6. Recovery: usar audit logs para debug de problemas",
        "subtasks": []
      },
      {
        "id": 9,
        "title": "VALIDAÇÃO: Teste Completo do Sistema Billing",
        "description": "Executar bateria completa de testes para validar integridade do sistema de billing e features",
        "status": "pending",
        "priority": "high",
        "dependencies": [8],
        "details": "TESTE COMPLETO DE BILLING:\n\n1. User Journey Testing:\n- Signup FREE → access features → hit limits\n- Upgrade FREE → BASIC → new features unlocked\n- Upgrade BASIC → PRO → advanced features\n- Upgrade PRO → ENTERPRISE → premium features\n- Downgrade scenarios: ENTERPRISE → FREE\n\n2. Edge Cases:\n- Plan change during billing cycle\n- Subscription expiration\n- Payment failure scenarios\n- Refund processing\n\n3. Load Testing:\n- 100 concurrent plan upgrades\n- Feature access under load\n- Database performance with realistic data volume",
        "testStrategy": "1. E2E automated tests: complete user journeys\n2. Load testing: 1000+ concurrent users\n3. Security testing: unauthorized feature access attempts\n4. Performance testing: response times < 200ms\n5. Data consistency: billing matches feature access\n6. Error handling: graceful failures and recovery\n7. Documentation: test results and metrics",
        "subtasks": []
      },
      {
        "id": 10,
        "title": "MONITORAMENTO: Implementar Dashboards de Business Intelligence",
        "description": "Criar dashboards para monitorar métricas de receita, conversão de planos e uso de features",
        "status": "pending",
        "priority": "medium",
        "dependencies": [9],
        "details": "DASHBOARDS DE BI:\n\n1. Revenue Metrics:\n- MRR por plano\n- Customer LTV\n- Churn rate por plano\n- Feature adoption rates\n\n2. Conversion Funnel:\n- FREE → BASIC conversion\n- BASIC → PRO conversion\n- Feature usage leading to upgrades\n\n3. Operational Metrics:\n- Plan limit violations\n- Support tickets por plano\n- Performance metrics\n\n4. Alertas automáticos:\n- Revenue drops\n- High churn rates\n- System health issues",
        "testStrategy": "1. Dashboard accuracy: manual verification vs automated metrics\n2. Real-time updates: data freshness < 5 minutes\n3. Performance: dashboard load time < 3 seconds\n4. User access: role-based dashboard permissions\n5. Alert testing: trigger conditions and notifications\n6. Mobile responsiveness: dashboards accessible on mobile",
        "subtasks": []
      },
      {
        "id": 11,
        "title": "PERFORMANCE: Otimizar Queries de Feature Access",
        "description": "Implementar cache e otimizações para queries frequentes de verificação de features",
        "status": "pending",
        "priority": "medium",
        "dependencies": [10],
        "details": "OTIMIZAÇÕES DE PERFORMANCE:\n\n1. Redis Cache Layer:\n- Cache tenant features por 1 hora\n- Invalidation automática em plan changes\n- Cache warming para tenants ativos\n\n2. Database Optimizations:\n- Materialized views para queries complexas\n- Partitioning por tenant_id\n- Connection pooling otimizado\n\n3. API Optimizations:\n- GraphQL DataLoader pattern\n- Batch feature checks\n- Response compression",
        "testStrategy": "1. Performance baseline: measure current response times\n2. Cache hit rate: target >90% para feature checks\n3. Load testing: 10x current traffic\n4. Memory usage: Redis cache overhead\n5. Cache invalidation: correctness under high concurrency\n6. Database impact: connection pool efficiency",
        "subtasks": []
      },
      {
        "id": 12,
        "title": "SEGURANÇA: Implementar Feature Gates Seguros",
        "description": "Criar sistema robusto de feature gates com bypass protection e audit logging",
        "status": "pending",
        "priority": "high",
        "dependencies": [11],
        "details": "FEATURE GATES SEGUROS:\n\n1. Middleware de Segurança:\n- JWT validation com feature claims\n- Rate limiting por feature e tenant\n- Bypass attempt detection\n\n2. Feature Gate Architecture:\n- Server-side validation (nunca client-side only)\n- Encrypted feature tokens\n- Audit logging de access attempts\n\n3. Admin Override System:\n- Emergency feature toggles\n- Admin impersonation com audit\n- Temporary feature grants",
        "testStrategy": "1. Security testing: attempt feature bypasses\n2. Penetration testing: unauthorized access attempts\n3. Performance impact: security overhead < 50ms\n4. Admin functions: emergency toggles work correctly\n5. Audit completeness: all access attempts logged\n6. Token security: encryption and expiration",
        "subtasks": []
      },
      {
        "id": 13,
        "title": "COMPLIANCE: Implementar GDPR e SOC2 Requirements",
        "description": "Assegurar compliance com GDPR, SOC2 e outros requirements regulatórios para SaaS enterprise",
        "status": "pending",
        "priority": "medium",
        "dependencies": [12],
        "details": "COMPLIANCE IMPLEMENTATION:\n\n1. GDPR Requirements:\n- Data portability: export tenant data\n- Right to be forgotten: complete data deletion\n- Privacy by design: encryption at rest/transit\n- Consent management system\n\n2. SOC2 Type II:\n- Access controls and monitoring\n- Data encryption standards\n- Incident response procedures\n- Vendor management processes\n\n3. Documentation:\n- Privacy policy updates\n- Data processing agreements\n- Security documentation\n- Compliance reports",
        "testStrategy": "1. GDPR compliance audit: data handling procedures\n2. SOC2 readiness assessment: control effectiveness\n3. Data deletion verification: complete removal confirmation\n4. Encryption validation: data protection standards\n5. Access control testing: least privilege principles\n6. Documentation review: legal and compliance standards",
        "subtasks": []
      },
      {
        "id": 14,
        "title": "PRODUÇÃO: Deploy e Monitoramento Final",
        "description": "Deploy final das correções para produção com monitoramento ativo e plano de rollback",
        "status": "pending",
        "priority": "high",
        "dependencies": [13],
        "details": "DEPLOYMENT STRATEGY:\n\n1. Blue-Green Deployment:\n- Deploy em ambiente blue\n- Smoke testing completo\n- Traffic switch gradual: 10% → 50% → 100%\n\n2. Monitoring:\n- Real-time alertas para errors\n- Business metrics monitoring\n- Performance degradation detection\n\n3. Rollback Plan:\n- Database rollback procedures\n- Application rollback automation\n- Communication plan para stakeholders\n\n4. Post-Deploy:\n- 24h monitoring intensivo\n- Performance benchmarking\n- User feedback collection",
        "testStrategy": "1. Pre-deploy checklist: all systems green\n2. Smoke testing: critical user journeys\n3. Performance monitoring: response times and errors\n4. Business continuity: revenue and conversion tracking\n5. Rollback testing: verify rollback procedures work\n6. User satisfaction: feedback and support ticket volume\n7. Success metrics: revenue protection and system stability",
        "subtasks": []
      }
    ]
  }