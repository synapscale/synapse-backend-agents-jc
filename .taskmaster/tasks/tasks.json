{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "EMERGENCIAL: Corre√ß√£o Features FREE Plan",
        "description": "Remover features premium incorretas do plano FREE que est√£o causando perda cr√≠tica de receita",
        "status": "done",
        "priority": "high",
        "dependencies": [],
        "details": "SCRIPT SQL EMERGENCIAL para corrigir features do plano FREE conforme an√°lise do banco synapscale_db\n\n[2025-01-30 16:45] IMPLEMENTA√á√ÉO REALIZADA:\n- ‚úÖ Script SQL criado: fix_critical_json_synchronization_v3.sql\n- ‚úÖ Problema: FREE plan com 20 features (incorreto) ‚Üí 2 features (correto)\n- ‚úÖ Features corretas: basic_ai_tools, community_templates\n- ‚úÖ Restrictions definidas: max_workspaces=1, max_storage=100MB, max_api_calls=100/day\n- ‚úÖ Sistema de backup e rollback implementado\n- ‚úÖ Audit logging completo\n- ‚úÖ Valida√ß√£o autom√°tica de corre√ß√£o\n\n[2025-01-30 18:15] EXECU√á√ÉO EM PRODU√á√ÉO REALIZADA:\n- ‚úÖ EXECUTADO: Corre√ß√£o aplicada no banco PostgreSQL synapscale_db\n- ‚úÖ CONFIRMADO: Plano FREE agora tem 2 features (basic_ai_tools, community_templates)\n- ‚úÖ CONFIRMADO: Restrictions ativas (1 workspace, 100MB, 100 calls/day)\n- ‚úÖ BACKUP: Criada tabela backup_plans_features_task1 para rollback\n- ‚úÖ RESULTADO: Perda de receita estancada - Features premium removidas",
        "testStrategy": "Verificar que apenas 2 features permanecem ativas no plano FREE",
        "subtasks": []
      },
      {
        "id": 2,
        "title": "EMERGENCIAL: Configurar Planos Premium",
        "description": "Configurar features corretas para planos BASIC/PRO/ENTERPRISE que t√™m valores NULL",
        "status": "done",
        "priority": "high",
        "dependencies": [
          1
        ],
        "details": "Configurar features para BASIC ($29.90), PRO ($79.90), ENTERPRISE ($199.90)\n\n[2025-01-30 18:20] EXECU√á√ÉO REALIZADA:\n- ‚úÖ BASIC: 5 features configuradas (api_access, webhooks, analytics_basic, email_templates, custom_workflows)\n- ‚úÖ PRO: 8 features configuradas (+ custom_branding, team_collaboration, advanced_integrations)\n- ‚úÖ ENTERPRISE: 12 features configuradas (+ sso_integration, white_label, priority_support, custom_domains)\n- ‚úÖ Restrictions definidas por plano (workspaces, storage, API calls, members)\n- ‚úÖ BACKUP: backup_premium_plans_task2 criado\n- ‚úÖ RESULTADO: Planos premium agora monetiz√°veis",
        "testStrategy": "Verificar features corretas por plano",
        "subtasks": []
      },
      {
        "id": 10,
        "title": "Instalar depend√™ncia asyncpg",
        "description": "Adicionar 'asyncpg' em requirements.txt e garantir que o app carrega sem ModuleNotFoundError.",
        "status": "todo",
        "priority": "high",
        "dependencies": [],
        "details": "Verificar se 'import asyncpg' funciona; ajustar requirements e instalar via pip."
      },
      {
        "id": 11,
        "title": "Atualizar imports de schemas antigos",
        "description": "Substituir todos os schemas manuais em src/synapse/api e routers para usar src/synapse/schemas/models.py",
        "status": "todo",
        "priority": "high",
        "dependencies": [
          10
        ],
        "details": "Grep por imports em 'synapse.schemas.*' e apontar para 'synapse.schemas.models'."
      },
      {
        "id": 12,
        "title": "Validar carga da aplica√ß√£o",
        "description": "Executar startup (python -c 'from synapse.main import app') e corrigir erros de importa√ß√£o ou configura√ß√£o",
        "status": "todo",
        "priority": "high",
        "dependencies": [
          10,
          11
        ],
        "details": "Garantir que app inicializa sem erros ap√≥s instala√ß√£o das deps e refatora√ß√£o de imports."
      },
      {
        "id": 13,
        "title": "Reintroduzir valida√ß√µes customizadas",
        "description": "Migrar valida√ß√µes manuais (ex: senha, email) do legacy para os models gerados ou adicionar decorators apropriados",
        "status": "todo",
        "priority": "medium",
        "dependencies": [
          11,
          12
        ],
        "details": "Adicionar Field validators ou m√©todos @validator em classes Pydantic para replicar regras perdidas."
      },
      {
        "id": 14,
        "title": "Gerar Enums Python para colunas ENUM do BD",
        "description": "Criar classes Enum em schemas/models.py para colunas que usam tipos ENUM no Postgres",
        "status": "todo",
        "priority": "medium",
        "dependencies": [
          11
        ],
        "details": "Mapear cada enum SQL para Python Enum e us√°-los nos modelos."
      },
      {
        "id": 15,
        "title": "Corrigir 81 inconsist√™ncias detectadas",
        "description": "Analisar cada mismatch listado pelo checker e ajustar spec ou BD para alinhar",
        "status": "todo",
        "priority": "high",
        "dependencies": [
          11,
          12
        ],
        "details": "Remover campos de pagina√ß√£o do spec, ajustar upload, migrar campos de agents, workspaces etc."
      },
      {
        "id": 16,
        "title": "Executar suite de testes e validar endpoints",
        "description": "Rodar pytest e testes de integra√ß√£o/curl para verificar fluxos b√°sicos",
        "status": "todo",
        "priority": "high",
        "dependencies": [
          12,
          15
        ],
        "details": "Garantir que testes passam e endpoints retornam 200 com payload conforme models gerados."
      },
      {
        "id": 3,
        "title": "CR√çTICO: Eliminar Dual Truth System",
        "description": "Remover uso conflitante de JSON vs relacional para features",
        "status": "done",
        "priority": "high",
        "dependencies": [
          1,
          2
        ],
        "details": "Usar apenas tabela relacional plan_features\n\n[2025-01-30 18:30] DUAL TRUTH PROBLEM RESOLVIDO:\n- ‚úÖ PROBLEMA CONFIRMADO: JSON vs Relacional completamente dessincronizados\n- ‚úÖ BACKUP: backup_plan_features_task3 criado (80 registros antigos)\n- ‚úÖ LIMPEZA: Removidos registros conflitantes da plan_features\n- ‚úÖ SINCRONIZA√á√ÉO: plan_features repopulada baseada no JSON correto\n- ‚úÖ MAPEAMENTO: Features JSON ‚Üí keys relacionais (ex: basic_ai_tools ‚Üí api_access)\n- ‚úÖ VALIDA√á√ÉO: 100% sincroniza√ß√£o confirmada para todos os planos\n- ‚úÖ RESULTADO: Sistema agora tem fonte √∫nica da verdade (plan_features)\n\nPR√ìXIMO PASSO: Deprecar plans.features (JSON) na aplica√ß√£o",
        "testStrategy": "Verificar consist√™ncia entre JSON e tabela relacional",
        "subtasks": []
      },
      {
        "id": 4,
        "title": "ESTRUTURAL: Sincroniza√ß√£o Tenant-Plan Autom√°tica",
        "description": "Criar sistema autom√°tico para sincronizar tenants com planos",
        "status": "done",
        "priority": "high",
        "dependencies": [
          3
        ],
        "details": "Implementar view materializada e triggers de sincroniza√ß√£o\n\n[2025-01-30 18:45] SINCRONIZA√á√ÉO AUTOM√ÅTICA IMPLEMENTADA:\n- ‚úÖ PROBLEMA IDENTIFICADO: Tenants com settings gen√©ricos (users:100, workspaces:10) independente do plano\n- ‚úÖ BACKUP: backup_tenant_settings_task4 criado\n- ‚úÖ VIEW MATERIALIZADA: tenant_plan_sync criada para sincroniza√ß√£o\n- ‚úÖ SINCRONIZA√á√ÉO APLICADA: 4 tenants atualizados com limits corretos por plano\n  * FREE: 1 workspace, 100MB\n  * BASIC: 5 workspaces, 1500MB (testado)\n  * PRO: 10 workspaces, 5000MB\n  * ENTERPRISE: Unlimited (-1)\n- ‚úÖ TRIGGERS AUTOM√ÅTICOS: Criados em plans e subscriptions\n- ‚úÖ TESTE CONFIRMADO: Mudan√ßa no plano BASIC sincronizada automaticamente\n- ‚úÖ RESULTADO: Sistema agora mant√©m tenants sincronizados com planos em tempo real\n\nPR√ìXIMO PASSO: Monitorar performance dos triggers",
        "testStrategy": "Testar mudan√ßas de plano em tempo real",
        "subtasks": []
      },
      {
        "id": 5,
        "title": "ESTRUTURAL: Valida√ß√£o de Limites Din√¢mica",
        "description": "Criar constraints autom√°ticas para limites de workspaces e storage",
        "status": "done",
        "priority": "medium",
        "dependencies": [
          4
        ],
        "details": "Implementar triggers de valida√ß√£o de limites",
        "testStrategy": "Testar viola√ß√£o de limites por plano",
        "subtasks": []
      },
      {
        "id": 6,
        "title": "ESTRUTURAL: Corrigir Foreign Keys",
        "description": "Padronizar a√ß√µes de FK e tornar tenant_id NOT NULL",
        "status": "done",
        "priority": "medium",
        "dependencies": [
          5
        ],
        "details": "Corre√ß√µes de integridade referencial",
        "testStrategy": "Verificar integridade referencial",
        "subtasks": []
      },
      {
        "id": 7,
        "title": "üîç AN√ÅLISE CR√çTICA: Depend√™ncias Before Migration",
        "description": "An√°lise completa de depend√™ncias antes de alterar estrutura tenant/workspace",
        "status": "done",
        "priority": "high",
        "dependencies": [
          6
        ],
        "details": "**AN√ÅLISE OBRIGAT√ìRIA ANTES DE MIGRATION:**\n\n**OBJETIVO:** Evitar quebrar sistema durante corre√ß√£o arquitetural\n\n**1. AN√ÅLISE DE FOREIGN KEYS:**\n- Identificar todas FKs que referenciam workspace.plan_id\n- Mapear cascade actions (ON DELETE/UPDATE)\n- Verificar dependent tables que ser√£o √≥rf√£s\n\n**2. AN√ÅLISE DE C√ìDIGO DA APLICA√á√ÉO:**\n- Grep por 'workspace.plan_id' em todo codebase\n- Identificar queries, valida√ß√µes, business logic\n- Mapear feature gates baseadas em workspace plan\n\n**3. AN√ÅLISE DE APIs:**\n- Endpoints que retornam workspace.plan_id\n- Breaking changes em responses JSON\n- Documenta√ß√£o que precisa atualiza√ß√£o\n\n**4. EDGE CASES CR√çTICOS:**\n- Tenant sem subscription ativa\n- Subscription cancelada/expirada  \n- Tenant √≥rf√£o (sem subscription)\n- Workspace √≥rf√£o (sem tenant)\n\n**5. PLANO DE MIGRA√á√ÉO DO C√ìDIGO:**\n- Atualizar queries: workspace.plan_id ‚Üí tenant.plan_id via JOIN\n- Atualizar feature validations\n- Atualizar API responses\n- Testes de regress√£o\n\n**RESULTADO:** Checklist completo para migration segura",
        "testStrategy": "Verificar que nenhuma depend√™ncia ser√° quebrada",
        "subtasks": []
      },
      {
        "id": 8,
        "title": "üéØ CORRE√á√ÉO DEFINITIVA: Arquitetura Multi-Tenant",
        "description": "Corrigir arquitetura multi-tenant executando SQL direto no PostgreSQL",
        "status": "done",
        "priority": "high",
        "dependencies": [
          7
        ],
        "details": "**PROBLEMA CR√çTICO IDENTIFICADO:**\n\n**SITUA√á√ÉO ATUAL INCORRETA:**\n- Tenants ‚Üí subscription.plan_id (billing) ‚úÖ CORRETO\n- Workspaces ‚Üí plan_id pr√≥prio (operational) ‚ùå INCORRETO  \n- RESULTADO: Tenant BASIC com workspace FREE (inconsist√™ncia)\n\n**EVID√äNCIA DO PROBLEMA:**\n```sql\n-- Tenant BASIC com workspace FREE:\nTenant: 'Tenant Workspace de Test User 56d7473d'\n‚îú‚îÄ‚îÄ subscription.plan_id: Plano BASIC\n‚îî‚îÄ‚îÄ workspace.plan_id: Plano FREE  ‚ùå INCONSISTENTE\n\n-- Tenant PRO com workspace FREE:\nTenant: 'Tenant Workspace de Jo√£o Victor'\n‚îú‚îÄ‚îÄ subscription.plan_id: Plano PRO  \n‚îî‚îÄ‚îÄ workspace.plan_id: Plano FREE  ‚ùå INCONSISTENTE\n```\n\n**SOLU√á√ÉO DEFINITIVA:**\n1. Adicionar `tenants.plan_id` copiando de `subscription.plan_id`\n2. Remover `workspaces.plan_id` \n3. Workspaces herdam plano do tenant via JOIN\n4. Atualizar todas as refer√™ncias no c√≥digo\n\n**EXECU√á√ÉO DIRETA NO POSTGRESQL:**\n- Database: defaultdb\n- Schema: synapscale_db\n- Opera√ß√£o at√¥mica com backup autom√°tico",
        "testStrategy": "Verificar que workspaces herdam plano do tenant corretamente",
        "subtasks": [
          {
            "id": 1,
            "title": "üîí Backup de Seguran√ßa das Tabelas Cr√≠ticas",
            "description": "Criar backup completo das tabelas que ser√£o modificadas",
            "details": "```sql\n-- Backup de seguran√ßa\nCREATE TABLE synapscale_db.backup_tenants_task8 AS SELECT * FROM synapscale_db.tenants;\nCREATE TABLE synapscale_db.backup_workspaces_task8 AS SELECT * FROM synapscale_db.workspaces;\nCREATE TABLE synapscale_db.backup_subscriptions_task8 AS SELECT * FROM synapscale_db.subscriptions;\n\n-- Verificar backups\nSELECT 'tenants' as table_name, count(*) as records FROM synapscale_db.backup_tenants_task8\nUNION ALL\nSELECT 'workspaces', count(*) FROM synapscale_db.backup_workspaces_task8  \nUNION ALL\nSELECT 'subscriptions', count(*) FROM synapscale_db.backup_subscriptions_task8;\n\n-- Criar script de rollback\nCREATE OR REPLACE FUNCTION synapscale_db.rollback_task8()\nRETURNS void AS $$\nBEGIN\n    -- Restore workspaces\n    DROP TABLE IF EXISTS synapscale_db.workspaces;\n    ALTER TABLE synapscale_db.backup_workspaces_task8 RENAME TO workspaces;\n    \n    -- Restore tenants\n    DROP TABLE IF EXISTS synapscale_db.tenants;\n    ALTER TABLE synapscale_db.backup_tenants_task8 RENAME TO tenants;\n    \n    RAISE NOTICE 'Rollback conclu√≠do com sucesso';\nEND;\n$$ LANGUAGE plpgsql;\n```",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 8
          },
          {
            "id": 2,
            "title": "‚ûï Adicionar plan_id em Tenants",
            "description": "Adicionar coluna plan_id em tenants e popular com dados das subscriptions",
            "details": "```sql\n-- Adicionar coluna plan_id em tenants\nALTER TABLE synapscale_db.tenants \nADD COLUMN plan_id UUID;\n\n-- Popular plan_id com dados da subscription ativa\nUPDATE synapscale_db.tenants t\nSET plan_id = s.plan_id\nFROM synapscale_db.subscriptions s\nWHERE t.id = s.tenant_id \n  AND s.status = 'active';\n\n-- Para tenants sem subscription ativa, usar plano FREE\nUPDATE synapscale_db.tenants t\nSET plan_id = (SELECT id FROM synapscale_db.plans WHERE name = 'FREE' LIMIT 1)\nWHERE plan_id IS NULL;\n\n-- Verificar atualiza√ß√£o\nSELECT \n    t.name as tenant_name,\n    t.plan_id as tenant_plan_id,\n    s.plan_id as subscription_plan_id,\n    s.status as subscription_status,\n    CASE \n        WHEN t.plan_id = s.plan_id THEN '‚úÖ OK' \n        WHEN s.plan_id IS NULL THEN '‚ö†Ô∏è SEM SUBSCRIPTION'\n        ELSE '‚ùå ERRO' \n    END as status\nFROM synapscale_db.tenants t\nLEFT JOIN synapscale_db.subscriptions s ON t.id = s.tenant_id AND s.status = 'active';\n```",
            "status": "done",
            "dependencies": [
              1
            ],
            "parentTaskId": 8
          },
          {
            "id": 3,
            "title": "üîó Criar Foreign Key + Indexes",
            "description": "Adicionar constraint FK e indexes para performance",
            "details": "```sql\n-- Tornar plan_id NOT NULL\nALTER TABLE synapscale_db.tenants \nALTER COLUMN plan_id SET NOT NULL;\n\n-- Adicionar FK constraint\nALTER TABLE synapscale_db.tenants \nADD CONSTRAINT fk_tenants_plan_id \nFOREIGN KEY (plan_id) REFERENCES synapscale_db.plans(id)\nON DELETE RESTRICT ON UPDATE CASCADE;\n\n-- Criar index para performance dos JOINs\nCREATE INDEX CONCURRENTLY idx_tenants_plan_id \nON synapscale_db.tenants(plan_id);\n\nCREATE INDEX CONCURRENTLY idx_workspaces_tenant_id \nON synapscale_db.workspaces(tenant_id);\n\n-- Verificar constraints e indexes\nSELECT \n    tc.constraint_name,\n    tc.table_name,\n    kcu.column_name\nFROM information_schema.table_constraints AS tc\nJOIN information_schema.key_column_usage AS kcu\n    ON tc.constraint_name = kcu.constraint_name\nWHERE tc.constraint_type = 'FOREIGN KEY' \n    AND tc.table_schema = 'synapscale_db'\n    AND tc.table_name = 'tenants'\n    AND kcu.column_name = 'plan_id';\n```",
            "status": "done",
            "dependencies": [
              2
            ],
            "parentTaskId": 8
          },
          {
            "id": 4,
            "title": "üóëÔ∏è Remover workspaces.plan_id (CUIDADO)",
            "description": "Remover coluna plan_id dos workspaces AP√ìS validar depend√™ncias",
            "details": "```sql\n-- CRITICAL: Verificar se n√£o h√° FKs dependentes\nSELECT \n    tc.table_name,\n    tc.constraint_name,\n    tc.constraint_type\nFROM information_schema.table_constraints tc\nJOIN information_schema.constraint_column_usage ccu\n    ON tc.constraint_name = ccu.constraint_name\nWHERE ccu.table_schema = 'synapscale_db'\n    AND ccu.table_name = 'workspaces'\n    AND ccu.column_name = 'plan_id'\n    AND tc.constraint_type = 'FOREIGN KEY';\n\n-- Se encontrar FKs, remover primeiro:\n-- ALTER TABLE [dependent_table] DROP CONSTRAINT [constraint_name];\n\n-- Remover FK constraint da pr√≥pria tabela se existir\nALTER TABLE synapscale_db.workspaces \nDROP CONSTRAINT IF EXISTS fk_workspaces_plan_id;\n\n-- Remover coluna plan_id\nALTER TABLE synapscale_db.workspaces \nDROP COLUMN plan_id;\n\n-- Verificar que coluna foi removida\nSELECT column_name \nFROM information_schema.columns \nWHERE table_schema = 'synapscale_db' \n    AND table_name = 'workspaces' \n    AND column_name = 'plan_id';\n-- Deve retornar vazio\n```",
            "status": "done",
            "dependencies": [
              3
            ],
            "parentTaskId": 8
          },
          {
            "id": 5,
            "title": "‚úÖ Validar Arquitetura + Performance",
            "description": "Verificar que corre√ß√£o funcionou e performance est√° boa",
            "details": "```sql\n-- Teste 1: Workspaces herdam plano do tenant\nSELECT \n    t.name as tenant_name,\n    w.name as workspace_name,\n    p.name as plan_name,\n    p.price,\n    '‚úÖ Workspace herda do tenant' as status\nFROM synapscale_db.tenants t\nJOIN synapscale_db.workspaces w ON t.id = w.tenant_id\nJOIN synapscale_db.plans p ON t.plan_id = p.id\nORDER BY t.name, w.name;\n\n-- Teste 2: Performance do novo JOIN\nEXPLAIN ANALYZE\nSELECT t.name, w.name, p.name, p.price\nFROM synapscale_db.tenants t\nJOIN synapscale_db.workspaces w ON t.id = w.tenant_id\nJOIN synapscale_db.plans p ON t.plan_id = p.id\nWHERE w.id = 'any-workspace-id';\n-- Deve usar indexes e ser < 10ms\n\n-- Teste 3: Verificar integridade\nSELECT \n    'tenants_com_plan' as metric,\n    COUNT(*) as count\nFROM synapscale_db.tenants \nWHERE plan_id IS NOT NULL\nUNION ALL\nSELECT \n    'workspaces_total',\n    COUNT(*)\nFROM synapscale_db.workspaces\nUNION ALL\nSELECT \n    'workspaces_sem_plan_id',\n    COUNT(*)\nFROM information_schema.columns \nWHERE table_schema = 'synapscale_db' \n    AND table_name = 'workspaces' \n    AND column_name = 'plan_id';\n-- √öltima query deve retornar 0\n```",
            "status": "done",
            "dependencies": [
              4
            ],
            "parentTaskId": 8
          }
      ,
      {
        "id": 17,
        "title": "Implementar script de resposta segura (create_safe_response_models.py)",
        "description": "Gerar e refinar modelos de resposta que removam campos sens√≠veis e internos conforme MIGRATION_REVIEW_COMPLETE.md",
        "status": "in-progress",
        "priority": "high",
        "dependencies": [11],
        "details": "Criar scripts/scripts_safe_response_models.py que gere src/synapse/schemas/response_models.py"        
      },
      {
        "id": 18,
        "title": "Implementar migra√ß√£o autom√°tica de endpoints (complete_schema_migration.py)",
        "description": "Atualizar endpoints para usar response_models via script conforme MIGRATION_REVIEW_COMPLETE.md",
        "status": "in-progress",
        "priority": "high",
        "dependencies": [17],
        "details": "Gerar scripts/complete_schema_migration.py para refatorar importa√ß√µes em src/synapse/api/v1/endpoints/*"
      },
      {
        "id": 19,
        "title": "Atualizar endpoints para usar response_models e models sincronizados",
        "description": "Substituir todos imports em routers e APIs para usar modelos gerados em schemas/models.py e schemas/response_models.py",
        "status": "in-progress",
        "priority": "high",
        "dependencies": [18,12],
        "details": "Grep e refactor: from synapse.schemas.<legacy> -> synapse.schemas.models ou response_models"
      }
        ]
      },
      {
        "id": 9,
        "title": "üîÑ ATUALIZA√á√ÉO: C√≥digo da Aplica√ß√£o",
        "description": "Atualizar c√≥digo que usa workspace.plan_id para tenant.plan_id via JOIN",
        "status": "done",
        "priority": "high",
        "dependencies": [
          8
        ],
        "details": "**ATUALIZA√á√ïES CR√çTICAS NO C√ìDIGO:**\n\n**1. QUERIES DE FEATURE VERIFICATION:**\n```python\n# ANTES (vai quebrar):\nworkspace.plan_id\n\n# DEPOIS (correto):\nworkspace.tenant.plan_id\n# ou via JOIN:\nSELECT ... FROM workspaces w \nJOIN tenants t ON w.tenant_id = t.id \nJOIN plans p ON t.plan_id = p.id\n```\n\n**2. API RESPONSES:**\n- Endpoints que retornam workspace.plan_id\n- Atualizar para workspace.tenant.plan\n- Manter backwards compatibility tempor√°ria\n\n**3. BUSINESS LOGIC:**\n- Feature gates baseadas em workspace plan\n- Valida√ß√µes de limites\n- Billing calculations\n\n**4. TESTES:**\n- Atualizar unit tests\n- Integration tests\n- End-to-end tests\n\n**RESULTADO:** Sistema funcionando com nova arquitetura",
        "testStrategy": "Executar toda suite de testes e verificar APIs",
        "subtasks": [
          {
            "id": 1,
            "title": "üîß Atualizar Model Workspace",
            "description": "Remover plan_id FK e relationship do model Workspace",
            "details": "ARQUIVO: src/synapse/models/workspace.py (linha 70)\n\nANTES:\n```python\nplan_id = Column(UUID(as_uuid=True), ForeignKey('plans.id'), nullable=False)\nplan = relationship(\"Plan\", back_populates=\"workspaces\")\n```\n\nDEPOIS:\n```python\n# Remover plan_id e plan relationship\n# Workspace agora herda plano via tenant\n```\n\nVALIDA√á√ÉO:\n- Verificar que model n√£o tem mais plan_id\n- Workspace acessa plano via workspace.tenant.plan\n- Testes unit√°rios passando",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 9
          },
          {
            "id": 2,
            "title": "üìã Atualizar Schema WorkspaceResponse",
            "description": "Mudar plan_id para plan object no schema de resposta da API",
            "details": "ARQUIVO: src/synapse/schemas/workspace.py (linha 94)\n\nPROBLEMA CRITICAL: WorkspaceResponse.plan_id √© retornado em TODAS as APIs de workspace\n\nANTES:\n```python\nclass WorkspaceResponse(BaseModel):\n    plan_id: UUID  # ‚ùå Vai quebrar - coluna removida\n```\n\nDEPOIS:\n```python\nclass WorkspaceResponse(BaseModel):\n    plan: Optional[PlanSchema] = None  # ‚úÖ Retorna objeto plan via tenant\n\n    @validator('plan', pre=True, always=True)\n    def get_plan_from_tenant(cls, v, values):\n        # Se workspace tem tenant, retorna tenant.plan\n        if hasattr(values.get('tenant'), 'plan'):\n            return values['tenant'].plan\n        return None\n```\n\nBREAKING CHANGE: APIs agora retornam plan object ao inv√©s de plan_id UUID",
            "status": "done",
            "dependencies": [
              "9.1"
            ],
            "parentTaskId": 9
          },
          {
            "id": 3,
            "title": "üîç Atualizar Queries e Business Logic",
            "description": "Atualizar todas as queries que usam workspace.plan_id para JOIN via tenant",
            "details": "ARQUIVOS AFETADOS: Services e endpoints que fazem feature verification\n\nPATTERN A CORRIGIR:\n```python\n# ‚ùå ANTES (vai quebrar):\nworkspace = session.query(Workspace).filter_by(id=workspace_id).first()\nplan_id = workspace.plan_id  # ERRO: coluna removida\n\n# ‚úÖ DEPOIS (correto):\nworkspace = session.query(Workspace)\\\n    .join(Tenant, Workspace.tenant_id == Tenant.id)\\\n    .join(Plan, Tenant.plan_id == Plan.id)\\\n    .filter(Workspace.id == workspace_id)\\\n    .first()\nplan = workspace.tenant.plan\n```\n\nQUERIES CR√çTICAS A ATUALIZAR:\n1. Feature gates (verificar se workspace tem feature X)\n2. Billing calculations (baseado no plano)\n3. Limit validations (workspaces, storage, API calls)\n4. Endpoints que retornam workspace details\n\nVALIDA√á√ÉO:\n- Todas as queries fazem JOIN correto\n- Feature verification funcionando\n- Performance mantida (< 100ms)",
            "status": "done",
            "dependencies": [
              "9.2"
            ],
            "parentTaskId": 9
          },
          {
            "id": 4,
            "title": "üåê Atualizar Endpoints da API",
            "description": "Atualizar endpoints que retornam workspace com plan_id para nova estrutura",
            "details": "ENDPOINTS CR√çTICOS A ATUALIZAR:\n\n1. **GET /api/v1/workspaces/{id}** - workspace details\n2. **GET /api/v1/workspaces** - lista workspaces\n3. **POST /api/v1/workspaces** - criar workspace  \n4. **PUT /api/v1/workspaces/{id}** - atualizar workspace\n\nMUDAN√áAS NECESS√ÅRIAS:\n```python\n# ANTES - endpoints inclu√≠am plan_id na response\n@router.get(\"/{workspace_id}\")\nasync def get_workspace(workspace_id: UUID):\n    workspace = get_workspace_by_id(workspace_id)\n    return WorkspaceResponse(\n        id=workspace.id,\n        name=workspace.name,\n        plan_id=workspace.plan_id  # ‚ùå QUEBRA\n    )\n\n# DEPOIS - incluir plan object via tenant\n@router.get(\"/{workspace_id}\")\nasync def get_workspace(workspace_id: UUID):\n    workspace = get_workspace_with_plan(workspace_id)  # JOIN tenant+plan\n    return WorkspaceResponse(\n        id=workspace.id,\n        name=workspace.name,\n        plan=workspace.tenant.plan  # ‚úÖ CORRETO\n    )\n```\n\nVALIDA√á√ÉO:\n- APIs retornam plan object ao inv√©s de plan_id\n- Performance dos JOINs adequada\n- Backwards compatibility considerada",
            "status": "done",
            "dependencies": [
              "9.3"
            ],
            "parentTaskId": 9
          },
          {
            "id": 5,
            "title": "üß™ Atualizar Testes para Nova Arquitetura",
            "description": "Atualizar unit tests, integration tests e mocks para nova estrutura",
            "details": "TESTES A ATUALIZAR:\n\n1. **Unit Tests:**\n   - tests/test_workspace_model.py\n   - tests/test_workspace_schema.py\n   - tests/test_feature_verification.py\n\n2. **Integration Tests:**\n   - tests/test_workspace_api.py\n   - tests/test_billing_integration.py\n\nMUDAN√áAS NECESS√ÅRIAS:\n```python\n# ANTES - testes assumiam workspace.plan_id\ndef test_workspace_plan_access():\n    workspace = create_test_workspace(plan_id=basic_plan.id)\n    assert workspace.plan_id == basic_plan.id  # ‚ùå QUEBRA\n\n# DEPOIS - testes verificam tenant.plan\ndef test_workspace_plan_access():\n    tenant = create_test_tenant(plan_id=basic_plan.id)\n    workspace = create_test_workspace(tenant_id=tenant.id)\n    assert workspace.tenant.plan.id == basic_plan.id  # ‚úÖ CORRETO\n```\n\nMOCK UPDATES:\n```python\n# Atualizar mocks de workspace para incluir tenant.plan\n@pytest.fixture\ndef mock_workspace_with_plan():\n    return Mock(\n        id=uuid4(),\n        name=\"Test Workspace\",\n        tenant=Mock(\n            plan=Mock(id=uuid4(), name=\"BASIC\")\n        )\n    )\n```\n\nVALIDA√á√ÉO:\n- Todos os testes passando\n- Coverage mantida > 80%\n- Testes de performance para JOINs",
            "status": "done",
            "dependencies": [
              "9.4"
            ],
            "parentTaskId": 9
          },
          {
            "id": 6,
            "title": "‚úÖ Valida√ß√£o Final e Compatibilidade",
            "description": "Validar que todas as mudan√ßas funcionam e sistema est√° √≠ntegro",
            "details": "VALIDA√á√ïES OBRIGAT√ìRIAS:\n\n1. **FUNCTIONAL TESTING:**\n   ```bash\n   # Testar endpoints cr√≠ticos\n   curl -X GET /api/v1/workspaces/{id}\n   # Deve retornar plan object, n√£o plan_id\n   \n   # Testar feature verification\n   curl -X POST /api/v1/workspaces/{id}/verify-feature\n   # Deve verificar features baseado no tenant.plan\n   ```\n\n2. **PERFORMANCE TESTING:**\n   ```sql\n   -- Queries devem usar indexes e ser < 100ms\n   EXPLAIN ANALYZE \n   SELECT w.*, p.name as plan_name \n   FROM workspaces w \n   JOIN tenants t ON w.tenant_id = t.id \n   JOIN plans p ON t.plan_id = p.id \n   WHERE w.id = 'test-id';\n   ```\n\n3. **INTEGRATION TESTING:**\n   - Feature gates funcionando\n   - Billing calculations corretas\n   - Limites aplicados baseado no tenant.plan\n   - API responses corretas\n\n4. **REGRESSION TESTING:**\n   ```bash\n   # Executar suite completa de testes\n   pytest tests/ -v\n   # Coverage deve ser > 80%\n   ```\n\nCRIT√âRIOS DE SUCESSO:\n- ‚úÖ Todos os testes passando\n- ‚úÖ APIs retornando plan object\n- ‚úÖ Feature verification baseada em tenant.plan\n- ‚úÖ Performance < 100ms nos JOINs\n- ‚úÖ Zero refer√™ncias a workspace.plan_id no c√≥digo\n\nROLLBACK PLAN:\n- Se algo quebrar, usar backup_workspaces_task8\n- Reverter mudan√ßas de c√≥digo via git",
            "status": "done",
            "dependencies": [
              "9.5"
            ],
            "parentTaskId": 9
          }
        ]
      },
      {
        "id": 10,
        "title": "‚úÖ VALIDA√á√ÉO: Sistema Multi-Tenant Correto",
        "description": "Validar que a corre√ß√£o arquitetural funcionou e sistema est√° √≠ntegro",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          9
        ],
        "details": "**VALIDA√á√ïES NECESS√ÅRIAS:**\n\n**1. INTEGRIDADE DE DADOS:**\n- Todos tenants t√™m plan_id correto\n- Nenhum workspace tem plan_id √≥rf√£o\n- Joins tenant‚Üíplan funcionam\n\n**2. FUNCIONALIDADE:**\n- Feature access baseado no plano do tenant\n- Limites aplicados corretamente\n- Billing calculations corretas\n\n**3. PERFORMANCE:**\n- Queries de feature verification < 100ms\n- Joins otimizados com indexes\n\n**4. TESTES FUNCIONAIS:**\n- Criar workspace respeitando limite do tenant\n- Upgrade/downgrade de plano reflete nos workspaces\n- Edge cases (tenant sem subscription)\n\n**5. VALIDA√á√ÉO FINAL:**\n- 0 inconsist√™ncias entre tenant/workspace plans\n- Sistema pronto para produ√ß√£o",
        "testStrategy": "Bateria completa de testes de integridade e funcionalidade",
        "subtasks": [
          {
            "id": 1,
            "title": "üîß CR√çTICO: Migrar JSON para Colunas Relacionais",
            "description": "Migrar configura√ß√µes importantes de campos JSON para colunas relacionais bem definidas",
            "details": "**PROBLEMA CR√çTICO IDENTIFICADO:**\n\n**TENANTS.SETTINGS (JSON) ‚Üí COLUNAS RELACIONAIS:**\n```json\n// DADOS ATUAIS EM JSON QUE DEVEM SER COLUNAS:\n{\n  \"preferences\": {\n    \"theme\": \"light\",         ‚Üí tenants.theme\n    \"language\": \"en\",         ‚Üí tenants.default_language  \n    \"timezone\": \"UTC\"         ‚Üí tenants.timezone\n  },\n  \"security\": {\n    \"mfa_required\": false,    ‚Üí tenants.mfa_required\n    \"session_timeout\": 3600,  ‚Üí tenants.session_timeout\n    \"ip_whitelist\": []        ‚Üí tenants.ip_whitelist (JSONB)\n  }\n}\n```\n\n**WORKSPACES.NOTIFICATION_SETTINGS (JSON) ‚Üí COLUNAS:**\n```json\n// DADOS ATUAIS EM JSON:\n{\n  \"email_notifications\": true,  ‚Üí workspaces.email_notifications\n  \"push_notifications\": false   ‚Üí workspaces.push_notifications\n}\n```\n\n**COLUNAS DE TRACKING AUSENTES EM WORKSPACES:**\n- api_calls_today (tracking di√°rio)\n- api_calls_this_month (tracking mensal)  \n- last_api_reset_daily (controle de reset)\n- last_api_reset_monthly (controle de reset)\n- feature_usage_count (JSON - tracking de uso por feature)\n\n**EXECU√á√ÉO:**\n1. Criar colunas relacionais nas tabelas\n2. Migrar dados do JSON para colunas\n3. Atualizar c√≥digo da aplica√ß√£o\n4. Remover depend√™ncia dos campos JSON",
            "status": "done",
            "dependencies": [
              9
            ],
            "parentTaskId": 10
          }
        ]
      }
    ],
    "metadata": {
      "version": "0.18.0",
      "createdAt": "2025-01-30T16:45:00.000Z",
      "updatedAt": "2025-01-30T16:45:00.000Z",
      "name": "SaaS Critical Fixes",
      "description": "Corre√ß√µes cr√≠ticas da estrutura SaaS SynapScale",
      "created": "2025-06-30T17:15:03.833Z",
      "updated": "2025-06-30T21:16:06.953Z"
    }
  },
  "database-restructuring-v2": {
    "tasks": [
      {
        "id": 1,
        "title": "Fase 1: Prepara√ß√£o e Infraestrutura",
        "description": "Estabelecer infraestrutura segura para migra√ß√£o do banco de dados, incluindo backups completos, ambiente de teste e scripts de migra√ß√£o base",
        "status": "done",
        "priority": "high",
        "dependencies": [],
        "details": "Preparar toda a infraestrutura necess√°ria para a reestrutura√ß√£o segura do banco de dados synapscale_db com 147+ tabelas. Esta fase √© cr√≠tica para garantir que a migra√ß√£o seja executada sem perda de dados e com capacidade de rollback completo.",
        "testStrategy": "Verificar que backups est√£o √≠ntegros, ambiente de teste est√° funcional e scripts de migra√ß√£o base est√£o validados",
        "subtasks": [
          {
            "id": 1,
            "title": "Backup Completo do Banco de Dados",
            "description": "Criar backup completo e verificado do banco synapscale_db",
            "details": "Executar pg_dump completo com verifica√ß√£o de integridade e teste de restore em ambiente separado",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 1
          },
          {
            "id": 2,
            "title": "Setup de Ambiente de Desenvolvimento/Staging",
            "description": "Configurar ambiente isolado para testes de migra√ß√£o",
            "details": "Criar ambiente de staging com c√≥pia completa dos dados de produ√ß√£o para testes seguros",
            "status": "done",
            "dependencies": [
              1
            ],
            "parentTaskId": 1
          },
          {
            "id": 3,
            "title": "Cria√ß√£o de Scripts de Migra√ß√£o Alembic Base",
            "description": "Desenvolver estrutura base dos scripts de migra√ß√£o usando Alembic",
            "details": "Criar templates e estrutura organizacional para as migra√ß√µes por grupos de tabelas",
            "status": "done",
            "dependencies": [
              2
            ],
            "parentTaskId": 1
          },
          {
            "id": 4,
            "title": "Implementa√ß√£o de Testes de Regress√£o",
            "description": "Criar suite de testes para validar integridade antes e ap√≥s migra√ß√µes",
            "details": "Desenvolver testes automatizados para verificar consist√™ncia de dados e performance",
            "status": "done",
            "dependencies": [
              3
            ],
            "parentTaskId": 1
          }
        ]
      },
      {
        "id": 2,
        "title": "Fase 2: Migra√ß√µes de Dados - Grupos Cr√≠ticos",
        "description": "Executar migra√ß√µes dos grupos mais cr√≠ticos de tabelas (RBAC, Workflows, LLMs)",
        "status": "done",
        "priority": "high",
        "dependencies": [
          1
        ],
        "details": "Migrar os grupos de tabelas mais cr√≠ticos primeiro, incluindo RBAC (3 tabelas), Workflows (2 tabelas) e LLMs (6 tabelas). Estes grupos s√£o fundamentais para o funcionamento do sistema.",
        "testStrategy": "Validar integridade de dados e performance ap√≥s cada grupo migrado",
        "subtasks": [
          {
            "id": 1,
            "title": "Migra√ß√£o Grupo RBAC (3 tabelas)",
            "description": "Migrar rbac_roles, rbac_permissions, rbac_role_permissions",
            "details": "- rbac_roles: Remover coluna permissions (migrar para rbac_role_permissions)\n- rbac_permissions: Clarificar arquitetura de tenant_id nul√°vel\n- rbac_role_permissions: Manter estrutura atual",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 2
          },
          {
            "id": 2,
            "title": "Migra√ß√£o Grupo Workflows (2 tabelas)",
            "description": "Migrar workflows e workflow_executions",
            "details": "- workflows: workspace_id NOT NULL, tags JSON ‚Üí JSONB, ON DELETE CASCADE\n- workflow_executions: JSON ‚Üí JSONB, meta_data ‚Üí metadata",
            "status": "done",
            "dependencies": [
              1
            ],
            "parentTaskId": 2
          },
          {
            "id": 3,
            "title": "Migra√ß√£o Grupo LLMs (6 tabelas)",
            "description": "Migrar todas as tabelas relacionadas a LLMs e conversas",
            "details": "- agents: Remover model_provider, JSON ‚Üí JSONB, workspace_id NOT NULL\n- llms: llm_metadata JSON ‚Üí JSONB, ajustar ON DELETE para logs\n- llms_conversations: JSON ‚Üí JSONB, clarificar tenant_id\n- llms_conversations_turns: Renomear para conversation_turns\n- llms_messages: Remover rating/feedback, renomear para messages\n- llms_message_feedbacks: JSON ‚Üí JSONB, renomear para message_feedbacks\n- llms_usage_logs: JSON ‚Üí JSONB, manter todas as colunas de rastreamento",
            "status": "done",
            "dependencies": [
              2
            ],
            "parentTaskId": 2
          }
        ]
      },
      {
        "id": 3,
        "title": "Fase 2: Migra√ß√µes de Dados - Grupos Secund√°rios",
        "description": "Executar migra√ß√µes dos grupos secund√°rios (Marketplace, Analytics, Billing)",
        "status": "done",
        "priority": "high",
        "dependencies": [
          2
        ],
        "details": "Migrar grupos secund√°rios incluindo Marketplace (5 tabelas), Analytics (6 tabelas) e Billing (5 tabelas). Estes grupos s√£o importantes mas n√£o cr√≠ticos para funcionamento b√°sico.",
        "testStrategy": "Validar integridade e performance, verificar que funcionalidades relacionadas continuam operacionais",
        "subtasks": [
          {
            "id": 1,
            "title": "Migra√ß√£o Grupo Marketplace (5 tabelas)",
            "description": "Migrar marketplace_components e tabelas relacionadas",
            "details": "- marketplace_components: Remover author_name, JSON ‚Üí JSONB, manter contadores\n- component_versions: JSON ‚Üí JSONB, timestamps com timezone\n- component_purchases: Timestamps com timezone\n- component_ratings: Timestamps com timezone\n- component_downloads: Timestamps com timezone",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 3
          },
          {
            "id": 2,
            "title": "Migra√ß√£o Grupo Analytics (6 tabelas)",
            "description": "Migrar todas as tabelas de analytics",
            "details": "- Padronizar JSON ‚Üí JSONB em todas as tabelas\n- Timestamps com timezone\n- Adicionar a√ß√µes ON DELETE apropriadas\n- Manter tenant_id em todas as tabelas",
            "status": "done",
            "dependencies": [
              1
            ],
            "parentTaskId": 3
          },
          {
            "id": 3,
            "title": "Migra√ß√£o Grupo Billing (5 tabelas)",
            "description": "Migrar billing_events e tabelas relacionadas",
            "details": "- billing_events: billing_metadata JSON ‚Üí JSONB\n- Manter estruturas atuais das demais tabelas",
            "status": "done",
            "dependencies": [
              2
            ],
            "parentTaskId": 3
          }
        ]
      },
      {
        "id": 4,
        "title": "Fase 2: Migra√ß√µes de Dados - Grupos Finais",
        "description": "Executar migra√ß√µes dos grupos finais (Users, Workspaces, Nodes, M√©tricas)",
        "status": "done",
        "priority": "medium",
        "dependencies": [
          3
        ],
        "details": "Migrar os grupos finais incluindo Users (5 tabelas), Workspaces (8 tabelas), Nodes (9 tabelas) e outros grupos restantes.",
        "testStrategy": "Validar integridade completa do sistema e performance geral",
        "subtasks": [
          {
            "id": 1,
            "title": "Migra√ß√£o Grupo Users (5 tabelas)",
            "description": "Migrar users e tabelas de autentica√ß√£o",
            "details": "- users: REMOVER coluna tenant_id\n- Manter estruturas das demais tabelas de autentica√ß√£o",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 4
          },
          {
            "id": 2,
            "title": "Migra√ß√£o Grupo Workspaces (8 tabelas)",
            "description": "Migrar workspaces e tabelas relacionadas",
            "details": "- workspaces: feature_usage_count JSON ‚Üí JSONB, manter contadores\n- workspace_projects: Timestamps com timezone, manter contadores\n- workspace_members: JSON ‚Üí JSONB, timestamps com timezone\n- workspace_activities: meta_data ‚Üí metadata, JSON ‚Üí JSONB\n- workspace_invitations: Timestamps com timezone\n- project_collaborators: JSON ‚Üí JSONB, timestamps com timezone\n- project_comments: Timestamps com timezone\n- project_versions: JSON ‚Üí JSONB, timestamps com timezone",
            "status": "done",
            "dependencies": [
              1
            ],
            "parentTaskId": 4
          },
          {
            "id": 3,
            "title": "Migra√ß√£o Grupo Nodes (9 tabelas)",
            "description": "Migrar nodes e workflow_nodes relacionados",
            "details": "- nodes: JSON ‚Üí JSONB, manter contadores de performance\n- node_executions: JSON ‚Üí JSONB, meta_data ‚Üí metadata\n- node_templates: JSON ‚Üí JSONB\n- workflow_connections: Adicionar a√ß√µes ON DELETE\n- workflow_execution_metrics: JSON ‚Üí JSONB\n- workflow_execution_queue: JSON ‚Üí JSONB, meta_data ‚Üí metadata\n- workflow_nodes: JSON ‚Üí JSONB\n- workflow_templates: JSON ‚Üí JSONB, manter contadores",
            "status": "done",
            "dependencies": [
              2
            ],
            "parentTaskId": 4
          },
          {
            "id": 4,
            "title": "Migra√ß√£o Grupos Restantes (Templates, M√©tricas, Outros)",
            "description": "Migrar templates (5 tabelas), m√©tricas (6 tabelas) e outras (5 tabelas)",
            "details": "- Templates: template_collections JSON ‚Üí JSONB, template_usage modifications_made JSON ‚Üí JSONB\n- M√©tricas: Padronizar JSON ‚Üí JSONB, timestamps com timezone\n- Outros: tags tag_metadata JSON ‚Üí JSONB",
            "status": "done",
            "dependencies": [
              3
            ],
            "parentTaskId": 4
          }
        ]
      },
      {
        "id": 5,
        "title": "Fase 3: Atualiza√ß√£o de C√≥digo",
        "description": "Atualizar modelos SQLAlchemy, servi√ßos e APIs para refletir as mudan√ßas do banco",
        "status": "done",
        "priority": "high",
        "dependencies": [
          4
        ],
        "details": "Atualizar todo o c√≥digo da aplica√ß√£o para trabalhar com a nova estrutura do banco de dados, incluindo modelos ORM, schemas Pydantic, servi√ßos e endpoints de API.",
        "testStrategy": "Executar suite completa de testes unit√°rios, integra√ß√£o e end-to-end",
        "subtasks": [
          {
            "id": 1,
            "title": "Atualiza√ß√£o de Modelos SQLAlchemy",
            "description": "Atualizar todos os modelos ORM para refletir mudan√ßas no schema",
            "details": "- Atualizar tipos de dados (JSON ‚Üí JSONB)\n- Renomear colunas (meta_data ‚Üí metadata)\n- Ajustar foreign keys e relacionamentos\n- Implementar Row-Level Security onde aplic√°vel",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 5
          },
          {
            "id": 2,
            "title": "Sincroniza√ß√£o de Servi√ßos e APIs",
            "description": "Atualizar servi√ßos e endpoints para trabalhar com novos modelos",
            "details": "- Atualizar queries e opera√ß√µes CRUD\n- Ajustar l√≥gica de neg√≥cio\n- Verificar compatibilidade de APIs",
            "status": "done",
            "dependencies": [
              1
            ],
            "parentTaskId": 5
          },
          {
            "id": 3,
            "title": "Atualiza√ß√£o de Schemas Pydantic",
            "description": "Atualizar schemas de valida√ß√£o e serializa√ß√£o",
            "details": "- Ajustar tipos de dados nos schemas\n- Atualizar validadores\n- Manter compatibilidade de API onde poss√≠vel",
            "status": "done",
            "dependencies": [
              2
            ],
            "parentTaskId": 5
          },
          {
            "id": 4,
            "title": "Implementa√ß√£o de Row-Level Security",
            "description": "Implementar RLS onde apropriado para multi-tenancy",
            "details": "- Criar pol√≠ticas RLS para tabelas multi-tenant\n- Testar isolamento de dados\n- Documentar pol√≠ticas implementadas",
            "status": "done",
            "dependencies": [
              3
            ],
            "parentTaskId": 5
          }
        ]
      },
      {
        "id": 6,
        "title": "Fase 4: Testes e Valida√ß√£o",
        "description": "Executar testes abrangentes e valida√ß√£o completa do sistema reestruturado",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          5
        ],
        "details": "Realizar testes completos incluindo unit√°rios, integra√ß√£o, performance, carga e valida√ß√£o end-to-end para garantir que o sistema funciona corretamente com a nova estrutura.",
        "testStrategy": "Suite completa de testes automatizados + testes manuais de funcionalidades cr√≠ticas",
        "subtasks": [
          {
            "id": 1,
            "title": "Testes Unit√°rios e de Integra√ß√£o",
            "description": "Executar e corrigir todos os testes unit√°rios e de integra√ß√£o",
            "details": "- Atualizar testes existentes para nova estrutura\n- Criar novos testes para funcionalidades modificadas\n- Garantir 100% de cobertura em √°reas cr√≠ticas",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 6
          },
          {
            "id": 2,
            "title": "Testes de Performance e Carga",
            "description": "Validar que performance n√£o degradou com as mudan√ßas",
            "details": "- Benchmarks de queries cr√≠ticas\n- Testes de carga em endpoints principais\n- Validar que performance manteve ou melhorou",
            "status": "done",
            "dependencies": [
              1
            ],
            "parentTaskId": 6
          },
          {
            "id": 3,
            "title": "Valida√ß√£o End-to-End",
            "description": "Testar funcionalidades completas do sistema",
            "details": "- Fluxos cr√≠ticos de usu√°rio\n- Opera√ß√µes multi-tenant\n- Integra√ß√µes com sistemas externos",
            "status": "in-progress",
            "dependencies": [
              2
            ],
            "parentTaskId": 6
          },
          {
            "id": 4,
            "title": "Revis√£o de Seguran√ßa",
            "description": "Validar aspectos de seguran√ßa da nova estrutura",
            "details": "- Testar isolamento multi-tenant\n- Validar RLS policies\n- Auditoria de permiss√µes e acessos",
            "status": "pending",
            "dependencies": [
              3
            ],
            "parentTaskId": 6
          }
        ]
      },
      {
        "id": 7,
        "title": "Fase 5: Documenta√ß√£o e Deploy",
        "description": "Finalizar documenta√ß√£o e executar deploy em produ√ß√£o",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          6
        ],
        "details": "Completar toda a documenta√ß√£o t√©cnica, criar diagramas ER atualizados e executar deploy seguro em produ√ß√£o com monitoramento adequado.",
        "testStrategy": "Validar documenta√ß√£o completa e deploy bem-sucedido com monitoramento ativo",
        "subtasks": [
          {
            "id": 1,
            "title": "Atualiza√ß√£o de Documenta√ß√£o T√©cnica",
            "description": "Atualizar toda a documenta√ß√£o para refletir nova estrutura",
            "details": "- Documenta√ß√£o de API\n- Guias de desenvolvimento\n- Documenta√ß√£o de arquitetura\n- Changelog detalhado",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 7
          },
          {
            "id": 2,
            "title": "Cria√ß√£o de Diagramas ER Atualizados",
            "description": "Criar diagramas de entidade-relacionamento atualizados",
            "details": "- Diagramas completos do novo schema\n- Documenta√ß√£o de relacionamentos\n- Guias visuais de mudan√ßas",
            "status": "pending",
            "dependencies": [
              1
            ],
            "parentTaskId": 7
          },
          {
            "id": 3,
            "title": "Deploy em Ambiente de Produ√ß√£o",
            "description": "Executar deploy seguro da nova estrutura em produ√ß√£o",
            "details": "- Planejamento de janela de manuten√ß√£o\n- Execu√ß√£o de migra√ß√µes em produ√ß√£o\n- Valida√ß√£o p√≥s-deploy",
            "status": "pending",
            "dependencies": [
              2
            ],
            "parentTaskId": 7
          },
          {
            "id": 4,
            "title": "Monitoramento P√≥s-Deploy",
            "description": "Monitorar sistema ap√≥s deploy para identificar problemas",
            "details": "- Monitoramento de performance\n- Alertas de erro\n- Valida√ß√£o de funcionalidades cr√≠ticas\n- Plano de rollback se necess√°rio",
            "status": "pending",
            "dependencies": [
              3
            ],
            "parentTaskId": 7
          }
        ]
      },
      {
        "id": 8,
        "title": "Arquivamento de Tabelas de Backup",
        "description": "Exportar e remover 16 tabelas de backup do schema de produ√ß√£o",
        "status": "pending",
        "priority": "low",
        "dependencies": [
          7
        ],
        "details": "Criar script automatizado para exportar via pg_dump e remover as 16 tabelas de backup identificadas no plano, com logs de auditoria completos.",
        "testStrategy": "Verificar que tabelas foram exportadas corretamente e removidas do schema",
        "subtasks": [
          {
            "id": 1,
            "title": "Script de Arquivamento Automatizado",
            "description": "Criar script para exportar tabelas de backup",
            "details": "- Identificar todas as 16 tabelas de backup\n- Criar script pg_dump para cada tabela\n- Implementar logs de auditoria",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 8
          },
          {
            "id": 2,
            "title": "Remo√ß√£o Segura das Tabelas",
            "description": "Remover tabelas de backup do schema de produ√ß√£o",
            "details": "- Validar que exports est√£o √≠ntegros\n- Remover tabelas do schema\n- Documentar processo de recupera√ß√£o se necess√°rio",
            "status": "pending",
            "dependencies": [
              1
            ],
            "parentTaskId": 8
          }
        ]
      }
    ],
    "metadata": {
      "createdAt": "2025-01-30T22:00:00Z",
      "description": "Implementa√ß√£o completa da reestrutura√ß√£o otimizada do banco de dados SynapScale com 147+ tabelas",
      "totalTasks": 8,
      "estimatedDuration": "6-8 semanas",
      "complexity": "Level 4 (Strategic/Enterprise)",
      "created": "2025-07-01T06:50:00.542Z",
      "updated": "2025-07-01T08:48:47.577Z"
    }
  },
  "production-optimization": {
    "createdAt": "2025-01-27T21:00:00Z",
    "lastModified": "2025-01-27T21:00:00Z",
    "tasks": [
      {
        "id": 1,
        "title": "Auditoria Completa: An√°lise de Discrep√¢ncias Database vs Modelos",
        "description": "Documentar todas as inconsist√™ncias cr√≠ticas identificadas entre schema PostgreSQL real e modelos SQLAlchemy/Pydantic",
        "status": "done",
        "dependencies": [],
        "priority": "high",
        "details": "**AN√ÅLISE CR√çTICA COMPLETA REALIZADA**\n\n**DISCREP√ÇNCIAS TABELA TENANTS:**\n\nCampos AUSENTES no modelo SQLAlchemy:\n- `domain` (character varying)\n- `theme` (character varying, default 'light')\n- `default_language` (character varying, default 'en')\n- `timezone` (character varying, default 'UTC')\n- `mfa_required` (boolean, default false)\n- `session_timeout` (integer, default 3600)\n- `ip_whitelist` (jsonb, default '[]')\n- `max_api_calls_per_day` (integer)\n- `enabled_features` (ARRAY)\n\nCampos AUSENTES no banco real:\n- `description`, `logo_url`, `website`, `type`, `settings`, `extra_metadata`, `max_users`, `max_storage_gb`, `user_count`, `workspace_count`, `storage_used_gb`, `last_activity_at`, `trial_ends_at`, `subscription_status`\n\n**DISCREP√ÇNCIAS TABELA USERS:**\n- Campos ausentes no modelo: `status`, `metadata`, `last_login_at`, `login_count`, `failed_login_attempts`, `account_locked_until`, `bio`, `profile_image_url`\n\n**DISCREP√ÇNCIAS TABELA WORKSPACES:**\n- Campos ausentes no modelo: `email_notifications`, `push_notifications`, `api_calls_today`, `api_calls_this_month`, `last_api_reset_daily`, `last_api_reset_monthly`, `feature_usage_count`\n\n**ESTRUTURA MULTI-TENANT IDENTIFICADA:**\n- 4 tenants ativos com planos (FREE, BASIC, PRO, ENTERPRISE)\n- 5 workspaces distribu√≠dos entre tenants\n- Sistema RBAC ativo com user_tenant_roles\n- Foreign keys funcionais: tenant_id ‚Üí workspaces, subscriptions\n\n**PR√ìXIMAS A√á√ïES:** Corrigir modelos SQLAlchemy, schemas Pydantic e validar endpoints",
        "testStrategy": "Valida√ß√£o atrav√©s de queries SQL diretas comparadas com estruturas dos modelos"
      },
      {
        "id": 2,
        "title": "Corrigir Modelo SQLAlchemy Tenant",
        "description": "Atualizar o modelo Tenant para incluir todos os campos existentes no banco PostgreSQL real",
        "status": "done",
        "dependencies": [
          1
        ],
        "priority": "high",
        "details": "**CAMPOS A ADICIONAR:**\n- `domain` (String, nullable=True)\n- `theme` (String, default='light')\n- `default_language` (String, default='en')\n- `timezone` (String, default='UTC')\n- `mfa_required` (Boolean, default=False)\n- `session_timeout` (Integer, default=3600)\n- `ip_whitelist` (JSONB, default=[])\n- `max_api_calls_per_day` (Integer, nullable=True)\n- `enabled_features` (ARRAY, nullable=True)\n\n**CAMPOS A REMOVER/MIGRAR:**\nDecider se campos ausentes no banco devem ser adicionados ao banco ou removidos do modelo:\n- `description`, `logo_url`, `website`, `type`\n- `settings`, `extra_metadata`\n- `user_count`, `workspace_count`, `storage_used_gb`\n- `last_activity_at`, `trial_ends_at`, `subscription_status`\n\n**ARQUIVO:** `src/synapse/models/tenant.py`",
        "testStrategy": "Testar cria√ß√£o de tenant e validar todos os campos retornados"
      },
      {
        "id": 3,
        "title": "Corrigir Modelo SQLAlchemy User",
        "description": "Atualizar o modelo User para incluir campos de seguran√ßa e perfil existentes no banco",
        "status": "done",
        "dependencies": [
          1
        ],
        "priority": "high",
        "details": "**CAMPOS A ADICIONAR:**\n- `status` (String, nullable=True) - Status do usu√°rio\n- `metadata` (JSONB, default={}) - Metadados extras\n- `last_login_at` (DateTime, nullable=True) - √öltimo login\n- `login_count` (Integer, default=0) - Contador de logins\n- `failed_login_attempts` (Integer, default=0) - Tentativas falhadas\n- `account_locked_until` (DateTime, nullable=True) - Bloqueio de conta\n- `bio` (String, nullable=True) - Biografia\n- `profile_image_url` (String, nullable=True) - URL da foto\n\n**ARQUIVO:** `src/synapse/models/user.py`\n\n**NOTA:** Estes campos s√£o cr√≠ticos para funcionalidades de seguran√ßa e perfil do usu√°rio que j√° existem no frontend",
        "testStrategy": "Validar login, perfil de usu√°rio e funcionalidades de seguran√ßa"
      },
      {
        "id": 4,
        "title": "Corrigir Modelo SQLAlchemy Workspace",
        "description": "Atualizar o modelo Workspace para incluir campos de notifica√ß√µes e API tracking",
        "status": "done",
        "dependencies": [
          1
        ],
        "priority": "high",
        "details": "**CAMPOS A ADICIONAR:**\n- `email_notifications` (Boolean, nullable=True) - Notifica√ß√µes por email\n- `push_notifications` (Boolean, nullable=True) - Notifica√ß√µes push\n- `api_calls_today` (Integer, nullable=True) - Chamadas API hoje\n- `api_calls_this_month` (Integer, nullable=True) - Chamadas API m√™s\n- `last_api_reset_daily` (DateTime, nullable=True) - Reset di√°rio API\n- `last_api_reset_monthly` (DateTime, nullable=True) - Reset mensal API\n- `feature_usage_count` (JSONB, nullable=True) - Contadores de uso\n\n**REMOVER CAMPO CONFLITANTE:**\n- Revisar `notification_settings` JSONB vs campos individuais\n\n**ARQUIVO:** `src/synapse/models/workspace.py`",
        "testStrategy": "Testar cria√ß√£o de workspace e tracking de API calls"
      },
      {
        "id": 5,
        "title": "Atualizar Schemas Pydantic para Tenant",
        "description": "Sincronizar schemas Pydantic com o modelo SQLAlchemy atualizado do Tenant",
        "status": "done",
        "dependencies": [
          2
        ],
        "priority": "high",
        "details": "**ARQUIVOS A ATUALIZAR:**\n- `src/synapse/schemas/tenant.py`\n\n**SCHEMAS A REVISAR:**\n- `TenantCreate` - Adicionar novos campos opcionais\n- `TenantUpdate` - Permitir atualiza√ß√£o dos novos campos\n- `TenantResponse` - Incluir todos os campos na resposta\n- `TenantPublic` - Definir campos p√∫blicos vs privados\n\n**VALIDA√á√ïES:**\n- Validar formato de timezone\n- Validar valores de theme (light/dark)\n- Validar formato de domain\n- Validar array de enabled_features\n- Validar estrutura de ip_whitelist",
        "testStrategy": "Testar endpoints de CRUD de tenant com todos os campos"
      },
      {
        "id": 6,
        "title": "Atualizar Schemas Pydantic para User",
        "description": "Sincronizar schemas Pydantic com o modelo SQLAlchemy atualizado do User",
        "status": "done",
        "dependencies": [
          3
        ],
        "priority": "high",
        "details": "**ARQUIVOS A ATUALIZAR:**\n- `src/synapse/schemas/user.py`\n\n**SCHEMAS A REVISAR:**\n- `UserCreate` - Campos de perfil opcionais\n- `UserUpdate` - Permitir atualiza√ß√£o de bio, profile_image_url\n- `UserResponse` - Incluir status, metadata, login stats\n- `UserSecurity` - Campos de seguran√ßa para admin\n- `UserProfile` - Schema espec√≠fico para perfil p√∫blico\n\n**CAMPOS SENS√çVEIS (apenas admin):**\n- `failed_login_attempts`\n- `account_locked_until`\n- `login_count`\n- `last_login_at`",
        "testStrategy": "Testar endpoints de perfil e autentica√ß√£o"
      },
      {
        "id": 7,
        "title": "Atualizar Schemas Pydantic para Workspace",
        "description": "Sincronizar schemas Pydantic com o modelo SQLAlchemy atualizado do Workspace",
        "status": "done",
        "dependencies": [
          4
        ],
        "priority": "high",
        "details": "**ARQUIVOS A ATUALIZAR:**\n- `src/synapse/schemas/workspace.py`\n\n**SCHEMAS A REVISAR:**\n- `WorkspaceCreate` - Configura√ß√µes de notifica√ß√£o\n- `WorkspaceUpdate` - Permitir atualiza√ß√£o de prefer√™ncias\n- `WorkspaceResponse` - Incluir stats de API e usage\n- `WorkspaceSettings` - Schema espec√≠fico para configura√ß√µes\n\n**NOVOS SCHEMAS:**\n- `WorkspaceAPIStats` - Estat√≠sticas de uso de API\n- `WorkspaceUsageStats` - Contadores de features",
        "testStrategy": "Testar endpoints de workspace e tracking de usage"
      },
      {
        "id": 8,
        "title": "Validar e Corrigir Endpoints de Tenant",
        "description": "Atualizar todos os endpoints relacionados a tenant para usar os campos corretos",
        "status": "done",
        "dependencies": [
          5
        ],
        "priority": "high",
        "details": "**ENDPOINTS A REVISAR:**\n- `GET /api/v1/tenants/` - Incluir novos campos\n- `POST /api/v1/tenants/` - Validar cria√ß√£o\n- `PUT /api/v1/tenants/{id}` - Permitir atualiza√ß√£o\n- `GET /api/v1/tenants/{id}/settings` - Configura√ß√µes\n- `PUT /api/v1/tenants/{id}/settings` - Atualizar config\n\n**VALIDA√á√ïES:**\n- Theme toggle (light/dark)\n- Timezone configuration\n- MFA settings\n- Domain configuration\n- Feature flags\n\n**ARQUIVOS:**\n- `src/synapse/api/v1/endpoints/tenants.py`",
        "testStrategy": "Testes automatizados de todos os endpoints de tenant"
      },
      {
        "id": 9,
        "title": "Validar e Corrigir Endpoints de User",
        "description": "Atualizar endpoints de usu√°rio para incluir campos de perfil e seguran√ßa",
        "status": "done",
        "dependencies": [
          6
        ],
        "priority": "high",
        "details": "**ENDPOINTS A REVISAR:**\n- `GET /api/v1/auth/users/me` - Incluir perfil completo\n- `PUT /api/v1/auth/users/me` - Atualizar perfil\n- `GET /api/v1/auth/users/me/security` - Status seguran√ßa\n- `POST /api/v1/auth/users/me/avatar` - Upload foto\n- `GET /api/v1/admin/users/{id}/security` - Admin view\n\n**FUNCIONALIDADES:**\n- Upload de avatar\n- Edi√ß√£o de bio\n- Hist√≥rico de login\n- Status de seguran√ßa\n- Metadata customizada\n\n**ARQUIVOS:**\n- `src/synapse/api/v1/endpoints/auth.py`\n- `src/synapse/api/v1/endpoints/users.py`",
        "testStrategy": "Testar autentica√ß√£o, perfil e funcionalidades de seguran√ßa"
      },
      {
        "id": 10,
        "title": "Validar e Corrigir Endpoints de Workspace",
        "description": "Atualizar endpoints de workspace para incluir tracking de API e notifica√ß√µes",
        "status": "done",
        "dependencies": [
          7
        ],
        "priority": "high",
        "details": "**ENDPOINTS A REVISAR:**\n- `GET /api/v1/workspaces/{id}` - Incluir stats completas\n- `PUT /api/v1/workspaces/{id}/notifications` - Config notifica√ß√µes\n- `GET /api/v1/workspaces/{id}/api-usage` - Stats de API\n- `GET /api/v1/workspaces/{id}/feature-usage` - Usage features\n- `POST /api/v1/workspaces/{id}/reset-api-limits` - Reset limits\n\n**FUNCIONALIDADES:**\n- Dashboard de API usage\n- Configura√ß√£o de notifica√ß√µes\n- M√©tricas de features\n- Reset de limites API\n\n**ARQUIVOS:**\n- `src/synapse/api/v1/endpoints/workspaces.py`",
        "testStrategy": "Testar workspace settings e tracking de usage"
      },
      {
        "id": 11,
        "title": "Executar Migra√ß√£o de Database (se necess√°rio)",
        "description": "Executar migrations para adicionar campos ausentes no banco (se decidido manter campos extras do modelo)",
        "status": "done",
        "dependencies": [
          2,
          3,
          4
        ],
        "priority": "medium",
        "details": "**DECIS√ÉO PENDENTE:**\nDefinir se campos ausentes no banco devem ser adicionados ou se campos extras do modelo devem ser removidos.\n\n**OP√á√ÉO A - Adicionar ao banco:**\n- Criar migration para adicionar campos extras\n- Manter compatibilidade completa\n\n**OP√á√ÉO B - Remover do modelo:**\n- Simplificar modelos\n- Usar apenas campos existentes\n\n**MIGRATION FILES:**\n- Usar Alembic para migrations\n- Testar em ambiente de desenvolvimento primeiro\n- Backup completo antes da migration\n\n**RECOMENDA√á√ÉO:** Op√ß√£o B (remover campos extras) para manter simplicidade",
        "testStrategy": "Teste completo em ambiente de desenvolvimento antes de produ√ß√£o"
      },
      {
        "id": 12,
        "title": "Atualizar OpenAPI Specification",
        "description": "Sincronizar a documenta√ß√£o OpenAPI com os modelos e endpoints atualizados",
        "status": "done",
        "dependencies": [
          8,
          9,
          10
        ],
        "priority": "medium",
        "details": "**ARQUIVOS A ATUALIZAR:**\n- `current_openapi.json`\n- Auto-generated docs\n\n**SE√á√ïES A REVISAR:**\n- Tenant schemas com novos campos\n- User schemas com campos de perfil\n- Workspace schemas com tracking\n- Response examples atualizados\n- Error schemas validados\n\n**VALIDA√á√ïES:**\n- Todos os endpoints documentados\n- Schemas de request/response corretos\n- Examples funcionais\n- Descriptions atualizadas",
        "testStrategy": "Validar documenta√ß√£o contra endpoints reais"
      },
      {
        "id": 13,
        "title": "Atualizar Testes Automatizados",
        "description": "Corrigir e expandir testes para cobrir todos os novos campos e funcionalidades",
        "status": "in-progress",
        "dependencies": [
          8,
          9,
          10
        ],
        "priority": "medium",
        "details": "**ARQUIVOS DE TESTE:**\n- `test_endpoints_comprehensive.py` ‚úÖ (j√° existe)\n- `test_endpoints_functional.py` ‚úÖ (j√° existe)\n- Testes espec√≠ficos por modelo\n\n**TESTES A ADICIONAR:**\n- Valida√ß√£o de todos os campos novos\n- Testes de perfil de usu√°rio\n- Testes de configura√ß√µes de tenant\n- Testes de tracking de workspace\n- Testes de notifica√ß√µes\n- Testes de seguran√ßa (MFA, locks)\n\n**COVERAGE:**\n- Aumentar cobertura para 95%+\n- Testes de integra√ß√£o completos",
        "testStrategy": "Executar test suite completa com coverage report"
      },
      {
        "id": 14,
        "title": "Valida√ß√£o de Produ√ß√£o - Teste de Carga",
        "description": "Executar testes de carga e performance com a estrutura atualizada",
        "status": "pending",
        "dependencies": [
          11,
          12,
          13
        ],
        "priority": "medium",
        "details": "**TESTES DE PERFORMANCE:**\n- Load testing com 1000+ requisi√ß√µes simult√¢neas\n- Stress testing endpoints cr√≠ticos\n- Memory leak detection\n- Database connection pooling\n\n**M√âTRICAS TARGET:**\n- Response time < 200ms (95th percentile)\n- 99.9% uptime\n- 0% data loss\n- Graceful degradation\n\n**FERRAMENTAS:**\n- Apache Bench (ab)\n- Locust\n- Database monitoring\n- Memory profiling\n\n**ENDPOINTS CR√çTICOS:**\n- Authentication\n- Workspace operations\n- File operations\n- Real-time features",
        "testStrategy": "Monitoramento completo durante testes de carga"
      },
      {
        "id": 15,
        "title": "Documenta√ß√£o de Produ√ß√£o e Deploy",
        "description": "Criar documenta√ß√£o completa para deploy em produ√ß√£o e manuten√ß√£o",
        "status": "pending",
        "dependencies": [
          14
        ],
        "priority": "low",
        "details": "**DOCUMENTA√á√ÉO A CRIAR:**\n- Setup guide de produ√ß√£o\n- Environment variables\n- Database setup e migrations\n- Monitoring e alertas\n- Backup strategies\n- Security checklist\n- Performance tuning\n- Troubleshooting guide\n\n**DEPLOY CHECKLIST:**\n- ‚úÖ Database migrations\n- ‚úÖ Environment config\n- ‚úÖ Security headers\n- ‚úÖ SSL certificates\n- ‚úÖ Monitoring setup\n- ‚úÖ Backup automation\n- ‚úÖ Log aggregation\n- ‚úÖ Health checks\n\n**ARQUIVOS:**\n- `docs/production-setup.md`\n- `docs/deployment-guide.md`\n- `docs/monitoring-guide.md`",
        "testStrategy": "Validar documenta√ß√£o seguindo os passos em ambiente limpo"
      },
      {
        "id": 16,
        "title": "CR√çTICO: Resolver Depend√™ncias Faltantes",
        "description": "Instalar depend√™ncias cr√≠ticas faltantes que impedem a aplica√ß√£o de carregar",
        "status": "in-progress",
        "priority": "high",
        "dependencies": [],
        "details": "**PROBLEMA IDENTIFICADO:**\n- Erro: `ModuleNotFoundError: No module named 'asyncpg'`\n- Aplica√ß√£o n√£o carrega por depend√™ncias faltantes\n- Sistema n√£o pode ser testado adequadamente\n\n**DEPEND√äNCIAS A INSTALAR:**\n- `asyncpg` - Driver PostgreSQL async\n- `psycopg2-binary` - Driver PostgreSQL alternativo\n- Outras depend√™ncias identificadas no requirements.txt\n\n**A√á√ïES:**\n1. Atualizar requirements.txt com todas as depend√™ncias\n2. Instalar depend√™ncias no ambiente virtual\n3. Testar carregamento da aplica√ß√£o\n4. Validar conex√£o com banco de dados\n\n**VALIDA√á√ÉO:**\n- `python -c \"from synapse.main import app; print('OK')\"`\n- Aplica√ß√£o deve carregar sem erros",
        "testStrategy": "Testar carregamento completo da aplica√ß√£o FastAPI"
      },
      {
        "id": 17,
        "title": "CR√çTICO: Migrar Importa√ß√µes para schemas.models",
        "description": "Atualizar todas as importa√ß√µes de schemas para usar os novos modelos gerados automaticamente",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          16
        ],
        "details": "**PROBLEMA IDENTIFICADO:**\n- Endpoints ainda importam de `schemas.corrected_models` e `schemas.legacy`\n- Os novos modelos gerados est√£o em `schemas.models` mas n√£o sendo usados\n- 81 inconsist√™ncias no OpenAPI por causa disso\n\n**ARQUIVOS A ATUALIZAR:**\n\n**Services:**\n- `services/analytics_service.py` - from synapse.schemas.analytics\n- `services/variable_service.py` - from synapse.schemas.user_variable\n- `services/user_service.py` - from synapse.schemas.user\n- `services/alert_service.py` - from synapse.schemas.analytics\n- `services/template_service.py` - from synapse.schemas.template\n- `services/file_service.py` - from synapse.schemas.file\n- `services/execution_service.py` - from synapse.schemas.workflow_execution\n- `services/workspace_service.py` - from synapse.schemas.workspace\n\n**Endpoints:**\n- Todos os arquivos em `api/v1/endpoints/` que importam de `corrected_models`\n- `auth.py` - from synapse.schemas.legacy.auth\n\n**MIGRA√á√ÉO:**\n- Trocar TODAS as importa√ß√µes para: `from synapse.schemas.models import ModelName`\n- Remover depend√™ncias dos schemas antigos\n- Validar que todos os campos necess√°rios existem nos novos modelos",
        "testStrategy": "Executar check_schema_alignment.py e verificar redu√ß√£o de inconsist√™ncias"
      },
      {
        "id": 18,
        "title": "CR√çTICO: Criar Schemas de Response e Request",
        "description": "Criar schemas espec√≠ficos para requests e responses baseados nos modelos do banco",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          17
        ],
        "details": "**PROBLEMA IDENTIFICADO:**\n- Os modelos gerados s√£o 1:1 com o banco (incluem todos os campos internos)\n- Precisamos de schemas espec√≠ficos para API (request/response)\n- Campos sens√≠veis devem ser filtrados (passwords, internal_ids, etc.)\n- Schemas de pagina√ß√£o n√£o existem no banco (s√£o estruturas de API)\n\n**SCHEMAS NECESS√ÅRIOS:**\n\n**1. Response Models:**\n- `UserResponse` - campos p√∫blicos do usu√°rio\n- `WorkspaceResponse` - dados de workspace para API\n- `AgentResponse` - dados de agent para API\n- `WorkflowResponse` - dados de workflow para API\n- `FileResponse` - dados de arquivo para API\n\n**2. Request Models:**\n- `UserCreate`, `UserUpdate` - para criar/atualizar usu√°rios\n- `WorkspaceCreate`, `WorkspaceUpdate` - para workspaces\n- `AgentCreate`, `AgentUpdate` - para agents\n- `WorkflowCreate`, `WorkflowUpdate` - para workflows\n\n**3. Pagination Models:**\n- `PaginatedResponse[T]` - estrutura gen√©rica de pagina√ß√£o\n- `ListResponse[T]` - lista com metadados\n\n**4. Specialized Models:**\n- `WorkflowExecutionRequest` - dados para execu√ß√£o\n- `WorkflowExecutionResponse` - resultado da execu√ß√£o\n\n**IMPLEMENTA√á√ÉO:**\n- Criar arquivo `src/synapse/schemas/api_models.py`\n- Basear nos modelos do banco mas filtrar campos adequados\n- Implementar heran√ßa e composi√ß√£o quando necess√°rio",
        "testStrategy": "Validar que schemas atendem necessidades da API sem expor dados internos"
      },
      {
        "id": 19,
        "title": "CR√çTICO: Restaurar Valida√ß√µes e Enums Perdidos",
        "description": "Recriar valida√ß√µes customizadas e enums que foram perdidos na migra√ß√£o autom√°tica",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          18
        ],
        "details": "**PROBLEMA IDENTIFICADO:**\n- Valida√ß√µes customizadas foram perdidas na gera√ß√£o autom√°tica\n- Enums viraram strings simples\n- Campos computados n√£o existem mais\n- L√≥gica de neg√≥cio foi removida\n\n**VALIDA√á√ïES A RESTAURAR:**\n\n**1. User Validations:**\n- Valida√ß√£o de password forte\n- Valida√ß√£o de email\n- Valida√ß√£o de username (caracteres permitidos)\n- Valida√ß√£o de bio (tamanho m√°ximo)\n\n**2. Workspace Validations:**\n- Valida√ß√£o de nome (√∫nico por tenant)\n- Valida√ß√£o de configura√ß√µes\n- Valida√ß√£o de limites por plano\n\n**3. Agent Validations:**\n- Valida√ß√£o de configura√ß√£o\n- Valida√ß√£o de model_provider\n- Valida√ß√£o de par√¢metros\n\n**ENUMS A RECRIAR:**\n- `UserStatus` (active, inactive, suspended, pending)\n- `WorkspaceType` (individual, collaborative)\n- `AgentStatus` (active, inactive, training)\n- `WorkflowStatus` (draft, active, inactive)\n- `ExecutionStatus` (pending, running, completed, failed)\n\n**COMPUTED FIELDS A RESTAURAR:**\n- `user.display_name` - full_name ou username\n- `user.role` - baseado em is_superuser\n- `workspace.plan` - via tenant.plan\n- `agent.agent_type` - baseado em configura√ß√£o\n\n**IMPLEMENTA√á√ÉO:**\n- Criar arquivo `src/synapse/schemas/validators.py`\n- Criar arquivo `src/synapse/schemas/enums.py`\n- Estender os modelos base com valida√ß√µes",
        "testStrategy": "Testar todas as valida√ß√µes e garantir que enums funcionam corretamente"
      },
      {
        "id": 20,
        "title": "ESTRUTURAL: Atualizar Todos os Endpoints",
        "description": "Atualizar todos os endpoints para usar os novos schemas de API",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          19
        ],
        "details": "**ENDPOINTS A ATUALIZAR:**\n\n**1. Auth Endpoints:**\n- `/auth/login` - usar novos schemas de auth\n- `/auth/register` - valida√ß√µes atualizadas\n- `/auth/me` - response com novos campos\n\n**2. User Endpoints:**\n- `/users/` - listar com pagina√ß√£o\n- `/users/{id}` - response atualizado\n- `/users/{id}/profile` - campos de perfil\n\n**3. Workspace Endpoints:**\n- `/workspaces/` - usar WorkspaceResponse\n- `/workspaces/{id}` - incluir tenant.plan\n- `/workspaces/{id}/members` - response atualizado\n\n**4. Agent Endpoints:**\n- `/agents/` - AgentResponse com enums\n- `/agents/{id}` - campos computados\n- `/agents/{id}/config` - valida√ß√µes\n\n**5. Workflow Endpoints:**\n- `/workflows/` - WorkflowResponse\n- `/workflows/{id}/execute` - request/response espec√≠ficos\n- `/workflows/{id}/executions` - pagina√ß√£o\n\n**6. File Endpoints:**\n- `/files/` - FileResponse\n- `/files/upload` - valida√ß√µes de upload\n\n**PADR√ïES A SEGUIR:**\n- Usar `response_model` correto em todas as rotas\n- Implementar pagina√ß√£o consistente\n- Validar permiss√µes multi-tenant\n- Retornar erros padronizados\n\n**BREAKING CHANGES:**\n- Documentar mudan√ßas na API\n- Manter backward compatibility onde poss√≠vel\n- Atualizar documenta√ß√£o",
        "testStrategy": "Testar todos os endpoints e validar responses esperados"
      },
      {
        "id": 21,
        "title": "VALIDA√á√ÉO: Teste Completo da Aplica√ß√£o",
        "description": "Executar testes completos para validar que toda a migra√ß√£o funcionou corretamente",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          20
        ],
        "details": "**TESTES DE VALIDA√á√ÉO:**\n\n**1. Teste de Carregamento:**\n- Aplica√ß√£o carrega sem erros\n- Conex√£o com banco funciona\n- Todos os imports resolvem\n\n**2. Teste de Endpoints:**\n- Todos os endpoints respondem\n- Status codes corretos\n- Response schemas v√°lidos\n- Request validation funciona\n\n**3. Teste de Funcionalidades:**\n- Autentica√ß√£o funciona\n- CRUD operations funcionam\n- Multi-tenancy isolado\n- Permiss√µes respeitadas\n\n**4. Teste de Performance:**\n- Response times aceit√°veis\n- Queries otimizadas\n- Memory usage est√°vel\n\n**5. Verifica√ß√£o de Schema:**\n- `check_schema_alignment.py` passa sem erros\n- OpenAPI spec est√° correto\n- Documenta√ß√£o atualizada\n\n**M√âTRICAS DE SUCESSO:**\n- 0 inconsist√™ncias no schema alignment\n- 100% dos endpoints funcionando\n- 0 erros no carregamento\n- Response times < 200ms\n- Testes unit√°rios passando\n\n**ROLLBACK PLAN:**\n- Se falhar, reverter para schemas/legacy\n- Restaurar importa√ß√µes antigas\n- Usar backup dos modelos",
        "testStrategy": "Executar suite completa de testes e valida√ß√µes automatizadas"
      },
      {
        "id": 22,
        "title": "DOCUMENTA√á√ÉO: Atualizar Processo de Migra√ß√£o",
        "description": "Documentar todo o processo de migra√ß√£o e criar guias para futuras atualiza√ß√µes",
        "status": "pending",
        "priority": "low",
        "dependencies": [
          21
        ],
        "details": "**DOCUMENTA√á√ÉO A CRIAR:**\n\n**1. Guia de Migra√ß√£o Completo:**\n- Processo passo-a-passo executado\n- Problemas encontrados e solu√ß√µes\n- Li√ß√µes aprendidas\n- Rollback procedures\n\n**2. Processo Automatizado:**\n- Como usar `generate_pydantic_models.py`\n- Como executar `check_schema_alignment.py`\n- Integra√ß√£o no dev.sh\n- CI/CD pipeline\n\n**3. Manuten√ß√£o Cont√≠nua:**\n- Como manter schemas sincronizados\n- Processo para mudan√ßas no banco\n- Valida√ß√£o de novos endpoints\n- Monitoring de inconsist√™ncias\n\n**4. Troubleshooting Guide:**\n- Problemas comuns e solu√ß√µes\n- Como debugar inconsist√™ncias\n- Como reverter migra√ß√µes\n- Como validar integridade\n\n**ARQUIVOS:**\n- `docs/SCHEMA_MIGRATION_COMPLETE.md`\n- `docs/MAINTENANCE_GUIDE.md`\n- `docs/TROUBLESHOOTING.md`\n- Atualizar `docs/SCHEMA_SYNC_AUTOMATION.md`\n\n**BENEF√çCIOS:**\n- Processo reproduz√≠vel\n- Manuten√ß√£o simplificada\n- Onboarding de novos devs\n- Redu√ß√£o de bugs de schema",
        "testStrategy": "Validar documenta√ß√£o seguindo os processos descritos"
      }
    ],
    "metadata": {
      "created": "2025-07-01T10:29:10.156Z",
      "updated": "2025-07-01T14:23:48.030Z",
      "description": "Tasks for production-optimization context"
    }
  },
  "global": {
    "defaultTag": "production-optimization"
  }
}