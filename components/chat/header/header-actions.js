"use client";
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HeaderActions = HeaderActions;
var jsx_runtime_1 = require("react/jsx-runtime");
var lucide_react_1 = require("lucide-react");
var header_button_1 = require("./header-button");
var dropdown_menu_1 = require("@/components/ui/dropdown-menu");
var app_context_1 = require("@/contexts/app-context");
function HeaderActions(_a) {
    var onNewChat = _a.onNewChat, onToggleSidebar = _a.onToggleSidebar, showComponentSelector = _a.showComponentSelector, onToggleComponentSelector = _a.onToggleComponentSelector, _b = _a.isMobile, isMobile = _b === void 0 ? false : _b;
    var _c = (0, app_context_1.useApp)(), theme = _c.theme, setTheme = _c.setTheme, showConfig = _c.showConfig, setShowConfig = _c.setShowConfig, focusMode = _c.focusMode, setFocusMode = _c.setFocusMode;
    var toggleTheme = function () { return setTheme(theme === "light" ? "dark" : "light"); };
    return ((0, jsx_runtime_1.jsxs)("div", { className: "flex items-center", children: [isMobile && ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(header_button_1.HeaderButton, { icon: (0, jsx_runtime_1.jsx)(lucide_react_1.Menu, { className: "h-5 w-5 text-gray-600 dark:text-gray-300" }), onClick: onToggleSidebar, tooltip: "Toggle sidebar", className: "md:hidden mr-2" }), (0, jsx_runtime_1.jsx)(header_button_1.HeaderButton, { icon: (0, jsx_runtime_1.jsx)(lucide_react_1.PlusCircle, { className: "h-5 w-5 text-gray-600 dark:text-gray-300" }), onClick: onNewChat, tooltip: "New conversation", className: "md:hidden" })] })), (0, jsx_runtime_1.jsx)(header_button_1.HeaderButton, { icon: theme === "light" ? ((0, jsx_runtime_1.jsx)(lucide_react_1.Moon, { className: "h-5 w-5 text-gray-600 dark:text-gray-300" })) : ((0, jsx_runtime_1.jsx)(lucide_react_1.Sun, { className: "h-5 w-5 text-gray-600 dark:text-gray-300" })), onClick: toggleTheme, tooltip: theme === "light" ? "Dark mode" : "Light mode", className: "mr-1" }), (0, jsx_runtime_1.jsx)(header_button_1.HeaderButton, { icon: focusMode ? ((0, jsx_runtime_1.jsx)(lucide_react_1.Maximize2, { className: "h-5 w-5 text-gray-600 dark:text-gray-300" })) : ((0, jsx_runtime_1.jsx)(lucide_react_1.Minimize2, { className: "h-5 w-5 text-gray-600 dark:text-gray-300" })), onClick: function () { return setFocusMode(!focusMode); }, tooltip: focusMode ? "Exit focus mode" : "Enter focus mode", className: "mr-1" }), onToggleComponentSelector && ((0, jsx_runtime_1.jsx)(header_button_1.HeaderButton, { icon: (0, jsx_runtime_1.jsx)(lucide_react_1.Code, { className: "h-5 w-5 text-gray-600 dark:text-gray-300" }), onClick: onToggleComponentSelector, tooltip: showComponentSelector ? "Hide component selector" : "Show component selector", active: showComponentSelector, className: "mr-1" })), (0, jsx_runtime_1.jsxs)(dropdown_menu_1.DropdownMenu, { children: [(0, jsx_runtime_1.jsx)(dropdown_menu_1.DropdownMenuTrigger, { asChild: true, children: (0, jsx_runtime_1.jsx)(header_button_1.HeaderButton, { icon: (0, jsx_runtime_1.jsx)(lucide_react_1.Settings, { className: "h-5 w-5 text-gray-600 dark:text-gray-300" }), tooltip: "Settings", className: "mr-2" }) }), (0, jsx_runtime_1.jsxs)(dropdown_menu_1.DropdownMenuContent, { align: "end", className: "w-56", children: [(0, jsx_runtime_1.jsxs)(dropdown_menu_1.DropdownMenuItem, { onClick: function () { return setShowConfig(!showConfig); }, children: [showConfig ? "Hide" : "Show", " chat settings"] }), (0, jsx_runtime_1.jsx)(dropdown_menu_1.DropdownMenuItem, { onClick: toggleTheme, children: theme === "light" ? "Dark mode" : "Light mode" }), (0, jsx_runtime_1.jsx)(dropdown_menu_1.DropdownMenuItem, { onClick: function () { return setFocusMode(!focusMode); }, children: focusMode ? "Exit focus mode" : "Enter focus mode" })] })] })] }));
}
