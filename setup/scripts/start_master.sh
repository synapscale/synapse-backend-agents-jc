#!/bin/bash
# =============================================================================
# SYNAPSCALE BACKEND - SCRIPT MASTER DE INICIALIZA√á√ÉO
# =============================================================================
# Este √© o script principal que voc√™ deve executar
# Ele faz ABSOLUTAMENTE TUDO automaticamente
# =============================================================================

set -e

# Cores
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

# Fun√ß√µes
log_info() { echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"; }
log_success() { echo -e "${GREEN}‚úÖ $1${NC}"; }
log_warning() { echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"; }
log_error() { echo -e "${RED}‚ùå $1${NC}"; }
log_header() { echo -e "${PURPLE}$1${NC}"; }

# Header impressionante
clear
echo "============================================================================="
log_header "üöÄ SYNAPSCALE BACKEND - CONFIGURA√á√ÉO AUTOM√ÅTICA COMPLETA"
echo "============================================================================="
log_info "‚ú® TUDO ser√° configurado automaticamente"
log_info "üìù Voc√™ s√≥ precisa preencher o .env no final"
log_info "üéØ 100% autom√°tico - Zero trabalho manual"
echo "============================================================================="

# Verificar se √© a primeira execu√ß√£o
if [ ! -f ".env" ] && [ ! -d "venv" ]; then
    log_header "üîß PRIMEIRA EXECU√á√ÉO - SETUP COMPLETO"
    log_info "Executando configura√ß√£o inicial completa..."
    
    # Executar setup completo
    if ./auto_setup.sh; then
        log_success "Setup completo executado com sucesso!"
    else
        log_error "Falha no setup inicial"
        exit 1
    fi
else
    log_header "üîÑ EXECU√á√ÉO SUBSEQUENTE - VERIFICA√á√ÉO E ATUALIZA√á√ÉO"
    
    # Verificar se precisa atualizar configura√ß√µes
    log_info "Verificando se configura√ß√µes precisam ser atualizadas..."
    
    # Ativar ambiente virtual
    if [ -d "venv" ]; then
        log_info "Ativando ambiente virtual..."
        source venv/bin/activate
        log_success "Ambiente virtual ativado"
    else
        log_error "Ambiente virtual n√£o encontrado! Execute o setup inicial."
        exit 1
    fi
    
    # Verificar se .env existe
    if [ ! -f ".env" ]; then
        log_warning "Arquivo .env n√£o encontrado. Criando..."
        python3 setup_complete.py
    fi
    
    # Re-propagar vari√°veis
    log_info "Atualizando configura√ß√µes com base no .env..."
    if python3 propagate_env.py; then
        log_success "Configura√ß√µes atualizadas"
    else
        log_warning "Erro na propaga√ß√£o, mas continuando..."
    fi
fi

# Valida√ß√£o final
log_info "Executando valida√ß√£o final..."
if python3 validate_setup.py; then
    log_success "Valida√ß√£o passou - sistema OK!"
else
    log_warning "Valida√ß√£o encontrou problemas, mas continuando..."
fi

# Verificar configura√ß√£o do banco
log_info "Verificando configura√ß√£o do banco de dados..."
if grep -q "DATABASE_URL=postgresql" .env; then
    log_success "DATABASE_URL configurada"
else
    log_warning "DATABASE_URL n√£o configurada adequadamente"
    log_info "Por favor, configure DATABASE_URL no arquivo .env"
    
    # Perguntar se quer editar agora
    read -p "üîß Quer configurar o DATABASE_URL agora? (y/N): " -r
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        log_info "Abrindo .env para edi√ß√£o..."
        ${EDITOR:-nano} .env
        
        # Re-propagar ap√≥s edi√ß√£o
        log_info "Atualizando configura√ß√µes..."
        python3 propagate_env.py
    fi
fi

# Menu de inicializa√ß√£o
echo ""
echo "============================================================================="
log_header "üéØ ESCOLHA O MODO DE INICIALIZA√á√ÉO"
echo "============================================================================="
echo "1) üîß Desenvolvimento (com reload autom√°tico)"
echo "2) üè≠ Produ√ß√£o (otimizado)"
echo "3) üß™ Apenas validar (n√£o iniciar)"
echo "4) ‚öôÔ∏è  Configurar apenas (sem iniciar)"
echo "5) üìä Mostrar status atual"
echo "6) üö™ Sair"
echo "============================================================================="

read -p "Escolha uma op√ß√£o (1-6): " choice

case $choice in
    1)
        log_header "üîß INICIANDO MODO DESENVOLVIMENTO"
        log_info "Servidor com reload autom√°tico em http://localhost:8000"
        log_info "Documenta√ß√£o em http://localhost:8000/docs"
        ./start_dev_auto.sh
        ;;
    2)
        log_header "üè≠ INICIANDO MODO PRODU√á√ÉO"
        log_info "Servidor otimizado com Gunicorn"
        ./start_prod_auto.sh
        ;;
    3)
        log_header "üß™ EXECUTANDO VALIDA√á√ÉO COMPLETA"
        python3 validate_setup.py
        ;;
    4)
        log_header "‚öôÔ∏è EXECUTANDO APENAS CONFIGURA√á√ÉO"
        python3 setup_complete.py
        python3 propagate_env.py
        log_success "Configura√ß√£o conclu√≠da!"
        ;;
    5)
        log_header "üìä STATUS ATUAL DO SISTEMA"
        echo ""
        log_info "Verificando arquivos essenciais..."
        
        # Verificar arquivos
        files=(".env" "venv" "requirements.txt" "src/synapse/main.py")
        for file in "${files[@]}"; do
            if [ -e "$file" ]; then
                log_success "$file existe"
            else
                log_error "$file n√£o encontrado"
            fi
        done
        
        echo ""
        log_info "Verificando vari√°veis cr√≠ticas no .env..."
        if [ -f ".env" ]; then
            if grep -q "SECRET_KEY=.*[a-zA-Z0-9]" .env; then
                log_success "SECRET_KEY configurada"
            else
                log_warning "SECRET_KEY n√£o configurada"
            fi
            
            if grep -q "DATABASE_URL=.*postgresql" .env; then
                log_success "DATABASE_URL configurada"
            else
                log_warning "DATABASE_URL n√£o configurada"
            fi
        else
            log_error "Arquivo .env n√£o encontrado"
        fi
        
        echo ""
        log_info "Para configura√ß√£o completa, escolha op√ß√£o 4"
        ;;
    6)
        log_info "At√© logo!"
        exit 0
        ;;
    *)
        log_error "Op√ß√£o inv√°lida"
        exit 1
        ;;
esac
