Metadata-Version: 2.4
Name: synapse-backend
Version: 2.0.0
Summary: Backend para a plataforma SynapScale de integração com LLMs
Author-email: SynapScale Team <team@synapscale.com>
License: MIT
Project-URL: Homepage, https://github.com/synapscale/synapse-backend
Project-URL: Repository, https://github.com/synapscale/synapse-backend.git
Project-URL: Documentation, https://docs.synapscale.com
Project-URL: Bug Tracker, https://github.com/synapscale/synapse-backend/issues
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Framework :: FastAPI
Requires-Python: >=3.11
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: fastapi<0.115.0,>=0.110.0
Requires-Dist: uvicorn[standard]<0.30.0,>=0.27.0
Requires-Dist: pydantic<3.0.0,>=2.6.0
Requires-Dist: pydantic-settings<3.0.0,>=2.2.0
Requires-Dist: gunicorn<22.0.0,>=21.2.0
Requires-Dist: sqlalchemy<3.0.0,>=2.0.25
Requires-Dist: psycopg2-binary<3.0.0,>=2.9.9
Requires-Dist: asyncpg>=0.30.0
Requires-Dist: alembic<2.0.0,>=1.13.0
Requires-Dist: redis<6.0.0,>=5.0.1
Requires-Dist: aioredis<3.0.0,>=2.0.1
Requires-Dist: pyjwt<3.0.0,>=2.8.0
Requires-Dist: python-jose[cryptography]<4.0.0,>=3.3.0
Requires-Dist: passlib[bcrypt]<2.0.0,>=1.7.4
Requires-Dist: python-multipart<0.1.0,>=0.0.6
Requires-Dist: cryptography<43.0.0,>=42.0.0
Requires-Dist: bcrypt<5.0.0,>=4.1.2
Requires-Dist: httpx<0.28.0,>=0.26.0
Requires-Dist: aiohttp<4.0.0,>=3.9.3
Requires-Dist: requests<3.0.0,>=2.31.0
Requires-Dist: pandas<3.0.0,>=2.2.0
Requires-Dist: numpy<2.0.0,>=1.26.0
Requires-Dist: python-dateutil<3.0.0,>=2.8.2
Requires-Dist: email-validator<3.0.0,>=2.1.0
Requires-Dist: python-slugify<9.0.0,>=8.0.2
Requires-Dist: pydantic-extra-types<3.0.0,>=2.5.0
Requires-Dist: loguru<0.8.0,>=0.7.2
Requires-Dist: sentry-sdk[fastapi]<2.0.0,>=1.40.0
Requires-Dist: prometheus-client<0.21.0,>=0.19.0
Requires-Dist: python-dotenv<2.0.0,>=1.0.1
Requires-Dist: click<9.0.0,>=8.1.7
Requires-Dist: rich<14.0.0,>=13.7.0
Requires-Dist: typer<0.13.0,>=0.9.0
Requires-Dist: slowapi<0.2.0,>=0.1.9
Requires-Dist: websockets<13.0,>=12.0
Requires-Dist: python-magic<0.5.0,>=0.4.27
Requires-Dist: pillow<11.0.0,>=10.2.0
Requires-Dist: aiofiles<24.0.0,>=23.2.1
Requires-Dist: jinja2<4.0.0,>=3.1.3
Requires-Dist: aiosmtplib<4.0.0,>=3.0.1
Requires-Dist: pytz>=2024.1
Requires-Dist: openai<2.0.0,>=1.12.0
Requires-Dist: anthropic<1.0.0,>=0.15.0
Requires-Dist: google-generativeai<1.0.0,>=0.4.0
Requires-Dist: groq<1.0.0,>=0.4.2
Requires-Dist: cohere<5.0.0,>=4.47.0
Requires-Dist: together<1.0.0,>=0.2.7
Requires-Dist: replicate<1.0.0,>=0.25.0
Requires-Dist: transformers<5.0.0,>=4.38.0
Requires-Dist: accelerate<1.0.0,>=0.27.0
Provides-Extra: dev
Requires-Dist: pytest<9.0.0,>=8.0.0; extra == "dev"
Requires-Dist: pytest-asyncio<0.24.0,>=0.23.5; extra == "dev"
Requires-Dist: pytest-cov<5.0.0,>=4.1.0; extra == "dev"
Requires-Dist: pytest-mock<4.0.0,>=3.12.0; extra == "dev"
Requires-Dist: factory-boy<4.0.0,>=3.3.0; extra == "dev"
Requires-Dist: httpx<0.28.0,>=0.26.0; extra == "dev"
Requires-Dist: black<25.0.0,>=24.2.0; extra == "dev"
Requires-Dist: isort<6.0.0,>=5.13.2; extra == "dev"
Requires-Dist: mypy<2.0.0,>=1.8.0; extra == "dev"
Requires-Dist: flake8<8.0.0,>=7.0.0; extra == "dev"
Requires-Dist: pre-commit<4.0.0,>=3.6.0; extra == "dev"
Provides-Extra: ai-minimal
Requires-Dist: openai<2.0.0,>=1.12.0; extra == "ai-minimal"
Requires-Dist: anthropic<1.0.0,>=0.15.0; extra == "ai-minimal"
Provides-Extra: ai-full
Requires-Dist: openai<2.0.0,>=1.12.0; extra == "ai-full"
Requires-Dist: anthropic<1.0.0,>=0.15.0; extra == "ai-full"
Requires-Dist: google-generativeai<1.0.0,>=0.4.0; extra == "ai-full"
Requires-Dist: groq<1.0.0,>=0.4.2; extra == "ai-full"
Requires-Dist: cohere<5.0.0,>=4.47.0; extra == "ai-full"
Requires-Dist: together<1.0.0,>=0.2.7; extra == "ai-full"
Requires-Dist: replicate<1.0.0,>=0.25.0; extra == "ai-full"
Requires-Dist: transformers<5.0.0,>=4.38.0; extra == "ai-full"
Requires-Dist: accelerate<1.0.0,>=0.27.0; extra == "ai-full"
Dynamic: license-file

# 🚀 SynapScale Backend API

[![Python 3.11+](https://img.shields.io/badge/python-3.11+-blue.svg)](https://www.python.org/downloads/)
[![FastAPI](https://img.shields.io/badge/FastAPI-0.104+-green.svg)](https://fastapi.tiangolo.com/)
[![PostgreSQL](https://img.shields.io/badge/PostgreSQL-13+-blue.svg)](https://www.postgresql.org/)
[![Redis](https://img.shields.io/badge/Redis-6+-red.svg)](https://redis.io/)
[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)

> Plataforma de Automação com IA - Backend completo e otimizado para gerenciamento de workflows, agentes AI e automações empresariais.

## 📋 Sumário

1. [🏁 Início Rápido](#-início-rápido)
2. [🧩 Manutenção do Repositório](#-manutenção-do-repositório)
3. [🛠️ Instalação](#-instalação)
4. [⚙️ Configuração](#-configuração)
5. [🚀 Execução](#-execução)
6. [📁 Estrutura do Projeto](#-estrutura-do-projeto)
7. [🔍 Endpoints API](#-endpoints-api)
8. [🧪 Testes](#-testes)
9. [🚢 Deploy](#-deploy)
10. [📚 Documentação](#-documentação)

---

## 🏁 Início Rápido

Para iniciar rapidamente, execute:

```bash
# 1. Configuração inicial (uma vez)
./setup.sh

# 2. Configure o DATABASE_URL no arquivo .env

# 3. Inicie o servidor no modo desejado:
./dev.sh    # Desenvolvimento (com reload automático)
# ou
./prod.sh   # Produção (otimizado)
```

Depois acesse:

* API: [http://localhost:8000](http://localhost:8000)
* Documentação: [http://localhost:8000/docs](http://localhost:8000/docs)

---

## 🧩 Manutenção do Repositório

Para manter o repositório organizado e atualizado:

```bash
# Analisar estrutura atual do repositório
./scripts/analyze_repository.sh

# Reorganizar e limpar arquivos antigos
./scripts/reorganize_repository.sh

# Limpar arquivos temporários e caches
./scripts/clean_temp_files.sh

# Validar mudanças feitas na organização
./scripts/validate_changes.sh
```

Os scripts acima ajudam a manter o código limpo, remover documentação antiga e garantir que a estrutura do projeto siga as melhores práticas.

### 📦 Organização do Repositório

O projeto foi reorganizado para seguir um padrão mais claro:

* **Um único arquivo `requirements.txt`**: Todas as dependências em um único arquivo na raiz
* **Arquivos `.env` padronizados**: Apenas `.env.example` (modelo) e `.env` (configuração real)
* **Scripts de setup simplificados**: `setup.sh` com modos básico e completo

Exemplos de uso dos scripts de setup:

```bash
# Setup rápido (manual)
./setup.sh

# Setup completo (automatizado)
./setup.sh --complete
```

---

## 🛠️ Instalação

### Pré-requisitos

* Python 3.11+
* PostgreSQL 13+
* Redis 6+ (opcional)

### Passo a passo

1. Clone o repositório:
   ```bash
   git clone https://github.com/seu-usuario/synapscale-backend.git
   cd synapscale-backend
   ```

2. Execute o script de setup:
   ```bash
   ./setup.sh
   ```

   Este script automaticamente:
   * Cria ambiente virtual Python
   * Instala dependências
   * Configura diretórios
   * Prepara o arquivo .env
   * Gera chaves de segurança

---

## ⚙️ Configuração

### Arquivo .env

O arquivo mais importante para configurar é o `.env`. Após o setup inicial, você precisa configurar pelo menos:

1. **Configuração do banco de dados** (obrigatória):
   ```bash
   DATABASE_URL=postgresql://usuario:senha@localhost:5432/synapscale_db
   ```

2. **Outras configurações importantes** (opcionais):
   ```bash
   # API e servidor
   DEBUG=true
   PORT=8000
   
   # Segurança (geradas automaticamente pelo setup)
   SECRET_KEY=...
   JWT_SECRET_KEY=...
   
   # IA (configure suas chaves)
   OPENAI_API_KEY=sua_chave_openai
   ANTHROPIC_API_KEY=sua_chave_anthropic
   ```

Para configurações completas, veja o arquivo `.env.example`.

---

## 🚀 Execução

### Modo Desenvolvimento

```bash
./dev.sh
```

Características:
* Reload automático ao modificar código
* Modo debug ativo
* Logs detalhados

### Modo Produção

```bash
./prod.sh
```

Características:
* Workers otimizados (Gunicorn)
* Performance melhorada
* Logs estruturados

---

## 📁 Estrutura do Projeto

```
synapscale-backend/
├── config/             # Configurações (requirements, alembic)
├── deployment/         # Arquivos de deploy (Docker, render)
├── docs/               # Documentação do projeto
├── setup/              # Scripts de configuração
├── src/                # Código fonte principal
│   ├── synapse/        # Núcleo da aplicação
│   │   ├── api/        # Endpoints da API
│   │   ├── core/       # Núcleo (config, segurança)
│   │   ├── db/         # Modelos e conexão DB
│   │   ├── services/   # Serviços da aplicação
│   │   └── utils/      # Utilitários
├── tests/              # Testes automatizados
├── tools/              # Ferramentas e utilitários
├── .env                # Variáveis de ambiente (criar a partir do .env.example)
├── .env.example        # Exemplo de configuração
├── dev.sh              # Execução em desenvolvimento
├── prod.sh             # Execução em produção
└── setup.sh            # Script de configuração inicial
```

---

## 🔍 Endpoints API

Os principais endpoints disponíveis:

* `GET /api/v1/health` - Status da API
* `POST /api/v1/auth/login` - Autenticação
* `GET /api/v1/users/me` - Informações do usuário
* `POST /api/v1/workflows` - Criar workflow
* `GET /api/v1/agents` - Listar agentes

Documentação completa:
* Swagger UI: [http://localhost:8000/docs](http://localhost:8000/docs)
* ReDoc: [http://localhost:8000/redoc](http://localhost:8000/redoc)

---

## 🧪 Testes

Para executar os testes automatizados:

```bash
# Testes unitários
python -m pytest

# Testes com cobertura
python -m pytest --cov=src

# Testes específicos
python -m pytest tests/test_auth.py
```

---

## 🚢 Deploy

### Opção 1: Docker

```bash
# Build da imagem
docker build -t synapscale-backend .

# Execução
docker run -p 8000:8000 --env-file .env synapscale-backend
```

### Opção 2: Render.com

O projeto inclui configuração para Render.com:
1. Configure seu repositório no Render
2. Selecione o arquivo `render.yaml`
3. Configure variáveis de ambiente
4. Deploy!

Instruções detalhadas em: `docs/deployment/RENDER_DEPLOY.md`

---

## 📚 Documentação

* **Guia do Desenvolvedor**: `docs/development_guide.md`
* **Arquitetura**: `docs/architecture.md`
* **API Guide**: `docs/api_guide.md`
* **Segurança**: `docs/security_production.md`

---

## 📄 Licença

Este projeto é licenciado sob os termos da licença MIT - veja o arquivo [LICENSE](LICENSE) para detalhes.

---

**SynapScale Backend** - Desenvolvido com ❤️ pela equipe SynapScale.
