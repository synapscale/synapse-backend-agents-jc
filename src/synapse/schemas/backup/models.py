from pydantic import BaseModel, Field
from typing import Optional
import datetime, uuid


class AgentConfigurations(BaseModel):
    config_id: uuid.UUID = Field(...)
    agent_id: uuid.UUID = Field(...)
    version_num: int = Field(...)
    params: dict = Field(...)
    created_by: uuid.UUID = Field(...)
    created_at: datetime.datetime = Field(...)


class Agents(BaseModel):
    id: uuid.UUID = Field(...)
    name: str = Field(...)
    description: Optional[str] = Field(None)
    is_active: bool = Field(...)
    user_id: uuid.UUID = Field(...)
    created_at: datetime.datetime = Field(...)
    updated_at: datetime.datetime = Field(...)
    workspace_id: Optional[uuid.UUID] = Field(None)
    tenant_id: uuid.UUID = Field(...)
    status: Optional[str] = Field(None)
    priority: Optional[int] = Field(None)
    version: Optional[str] = Field(None)
    environment: Optional[str] = Field(None)
    current_config: Optional[uuid.UUID] = Field(None)


class AlembicVersion(BaseModel):
    version_num: str = Field(...)


class Features(BaseModel):
    id: uuid.UUID = Field(...)
    key: str = Field(...)
    name: str = Field(...)
    description: Optional[str] = Field(None)
    category: Optional[str] = Field(None)
    is_active: Optional[bool] = Field(None)
    created_at: Optional[datetime.datetime] = Field(None)
    updated_at: Optional[datetime.datetime] = Field(None)


class KnowledgeBases(BaseModel):
    kb_id: uuid.UUID = Field(...)
    title: str = Field(...)
    content: dict = Field(...)
    tenant_id: Optional[uuid.UUID] = Field(None)
    updated_at: datetime.datetime = Field(...)


class Plans(BaseModel):
    id: uuid.UUID = Field(...)
    name: str = Field(...)
    slug: str = Field(...)
    description: Optional[str] = Field(None)
    price_monthly: float = Field(...)
    price_yearly: float = Field(...)
    max_workspaces: int = Field(...)
    max_members_per_workspace: int = Field(...)
    max_projects_per_workspace: int = Field(...)
    max_storage_mb: int = Field(...)
    max_executions_per_month: int = Field(...)
    allow_collaborative_workspaces: bool = Field(...)
    allow_custom_domains: bool = Field(...)
    allow_api_access: bool = Field(...)
    allow_advanced_analytics: bool = Field(...)
    allow_priority_support: bool = Field(...)
    is_active: bool = Field(...)
    is_public: bool = Field(...)
    created_at: datetime.datetime = Field(...)
    updated_at: datetime.datetime = Field(...)
    status: Optional[str] = Field(None)
    version: Optional[str] = Field(None)
    sort_order: Optional[int] = Field(None)


class Tools(BaseModel):
    tool_id: uuid.UUID = Field(...)
    name: str = Field(...)
    category: Optional[str] = Field(None)
    base_config: dict = Field(...)
    tenant_id: Optional[uuid.UUID] = Field(None)
    created_at: datetime.datetime = Field(...)
    updated_at: datetime.datetime = Field(...)


class AgentErrorLogs(BaseModel):
    error_id: uuid.UUID = Field(...)
    agent_id: uuid.UUID = Field(...)
    occurred_at: datetime.datetime = Field(...)
    error_code: Optional[str] = Field(None)
    payload: Optional[dict] = Field(None)


class AgentHierarchy(BaseModel):
    ancestor: uuid.UUID = Field(...)
    descendant: uuid.UUID = Field(...)
    depth: int = Field(...)


class AgentKbs(BaseModel):
    agent_id: uuid.UUID = Field(...)
    kb_id: uuid.UUID = Field(...)
    config: dict = Field(...)


class AgentTools(BaseModel):
    agent_id: uuid.UUID = Field(...)
    tool_id: uuid.UUID = Field(...)
    config: dict = Field(...)


class AgentTriggers(BaseModel):
    trigger_id: uuid.UUID = Field(...)
    agent_id: uuid.UUID = Field(...)
    trigger_type: str = Field(...)
    cron_expr: Optional[str] = Field(None)
    event_name: Optional[str] = Field(None)
    active: bool = Field(...)
    last_run_at: Optional[datetime.datetime] = Field(None)


class AgentUsageMetrics(BaseModel):
    metric_id: uuid.UUID = Field(...)
    agent_id: uuid.UUID = Field(...)
    period_start: datetime.datetime = Field(...)
    period_end: datetime.datetime = Field(...)
    calls_count: int = Field(...)
    tokens_used: int = Field(...)
    cost_est: float = Field(...)
    created_at: datetime.datetime = Field(...)


class PlanFeatures(BaseModel):
    id: uuid.UUID = Field(...)
    plan_id: uuid.UUID = Field(...)
    feature_id: uuid.UUID = Field(...)
    is_enabled: Optional[bool] = Field(None)
    config: Optional[dict] = Field(None)
    created_at: Optional[datetime.datetime] = Field(None)
    updated_at: Optional[datetime.datetime] = Field(None)


class Tenants(BaseModel):
    id: uuid.UUID = Field(...)
    name: str = Field(...)
    slug: str = Field(...)
    domain: Optional[str] = Field(None)
    status: str = Field(...)
    created_at: Optional[datetime.datetime] = Field(None)
    updated_at: Optional[datetime.datetime] = Field(None)
    plan_id: uuid.UUID = Field(...)
    theme: Optional[str] = Field(None)
    default_language: Optional[str] = Field(None)
    timezone: Optional[str] = Field(None)
    mfa_required: Optional[bool] = Field(None)
    session_timeout: Optional[int] = Field(None)
    ip_whitelist: Optional[dict] = Field(None)
    max_storage_mb: Optional[int] = Field(None)
    max_workspaces: Optional[int] = Field(None)
    max_api_calls_per_day: Optional[int] = Field(None)
    max_members_per_workspace: Optional[int] = Field(None)
    enabled_features: Optional[str] = Field(None)


class AgentQuotas(BaseModel):
    quota_id: uuid.UUID = Field(...)
    agent_id: uuid.UUID = Field(...)
    tenant_id: uuid.UUID = Field(...)
    max_calls: int = Field(...)
    max_tokens: int = Field(...)
    period: str = Field(...)
    created_at: datetime.datetime = Field(...)


class AnalyticsMetrics(BaseModel):
    id: uuid.UUID = Field(...)
    metric_name: str = Field(...)
    metric_value: float = Field(...)
    dimensions: dict = Field(...)
    timestamp: datetime.datetime = Field(...)
    created_at: datetime.datetime = Field(...)
    tenant_id: Optional[uuid.UUID] = Field(None)
    updated_at: Optional[datetime.datetime] = Field(None)


class BusinessMetrics(BaseModel):
    id: int = Field(...)
    date: datetime.datetime = Field(...)
    period_type: str = Field(...)
    total_users: int = Field(...)
    new_users: int = Field(...)
    active_users: int = Field(...)
    churned_users: int = Field(...)
    total_sessions: int = Field(...)
    avg_session_duration: float = Field(...)
    total_page_views: int = Field(...)
    bounce_rate: float = Field(...)
    workflows_created: int = Field(...)
    workflows_executed: int = Field(...)
    components_published: int = Field(...)
    components_downloaded: int = Field(...)
    workspaces_created: int = Field(...)
    teams_formed: int = Field(...)
    collaborative_sessions: int = Field(...)
    total_revenue: float = Field(...)
    recurring_revenue: float = Field(...)
    marketplace_revenue: float = Field(...)
    avg_revenue_per_user: float = Field(...)
    error_rate: float = Field(...)
    avg_response_time: float = Field(...)
    uptime_percentage: float = Field(...)
    customer_satisfaction: float = Field(...)
    created_at: datetime.datetime = Field(...)
    updated_at: datetime.datetime = Field(...)
    tenant_id: Optional[uuid.UUID] = Field(None)


class ContactLists(BaseModel):
    id: uuid.UUID = Field(...)
    tenant_id: uuid.UUID = Field(...)
    name: str = Field(...)
    description: Optional[str] = Field(None)
    type: Optional[str] = Field(None)
    filters: Optional[dict] = Field(None)
    created_at: Optional[datetime.datetime] = Field(None)
    updated_at: Optional[datetime.datetime] = Field(None)


class ContactSources(BaseModel):
    id: uuid.UUID = Field(...)
    tenant_id: uuid.UUID = Field(...)
    name: str = Field(...)
    description: Optional[str] = Field(None)
    integration_type: Optional[str] = Field(None)
    config: Optional[dict] = Field(None)
    is_active: Optional[bool] = Field(None)
    created_at: Optional[datetime.datetime] = Field(None)
    updated_at: Optional[datetime.datetime] = Field(None)


class ContactTags(BaseModel):
    id: uuid.UUID = Field(...)
    tenant_id: uuid.UUID = Field(...)
    name: str = Field(...)
    color: Optional[str] = Field(None)
    description: Optional[str] = Field(None)
    created_at: Optional[datetime.datetime] = Field(None)
    updated_at: Optional[datetime.datetime] = Field(None)


class Llms(BaseModel):
    id: uuid.UUID = Field(...)
    name: str = Field(...)
    provider: str = Field(...)
    model_version: Optional[str] = Field(None)
    cost_per_token_input: float = Field(...)
    cost_per_token_output: float = Field(...)
    max_tokens_supported: Optional[int] = Field(None)
    supports_function_calling: Optional[bool] = Field(None)
    supports_vision: Optional[bool] = Field(None)
    supports_streaming: Optional[bool] = Field(None)
    context_window: Optional[int] = Field(None)
    is_active: Optional[bool] = Field(None)
    llm_metadata: Optional[dict] = Field(None)
    created_at: datetime.datetime = Field(...)
    updated_at: datetime.datetime = Field(...)
    tenant_id: Optional[uuid.UUID] = Field(None)
    status: Optional[str] = Field(None)
    health_status: Optional[str] = Field(None)
    response_time_avg_ms: Optional[int] = Field(None)
    availability_percentage: Optional[float] = Field(None)


class NodeCategories(BaseModel):
    id: uuid.UUID = Field(...)
    name: str = Field(...)
    description: Optional[str] = Field(None)
    icon: Optional[str] = Field(None)
    color: Optional[str] = Field(None)
    parent_id: Optional[uuid.UUID] = Field(None)
    sort_order: Optional[int] = Field(None)
    is_active: Optional[bool] = Field(None)
    created_at: Optional[datetime.datetime] = Field(None)
    tenant_id: Optional[uuid.UUID] = Field(None)
    updated_at: Optional[datetime.datetime] = Field(None)


class NodeTemplates(BaseModel):
    id: uuid.UUID = Field(...)
    name: str = Field(...)
    description: Optional[str] = Field(None)
    category: Optional[str] = Field(None)
    code_template: str = Field(...)
    input_schema: dict = Field(...)
    output_schema: dict = Field(...)
    parameters_schema: Optional[dict] = Field(None)
    icon: Optional[str] = Field(None)
    color: Optional[str] = Field(None)
    documentation: Optional[str] = Field(None)
    examples: Optional[dict] = Field(None)
    is_system: Optional[bool] = Field(None)
    is_active: Optional[bool] = Field(None)
    created_at: Optional[datetime.datetime] = Field(None)
    tenant_id: Optional[uuid.UUID] = Field(None)
    updated_at: Optional[datetime.datetime] = Field(None)


class PaymentProviders(BaseModel):
    id: uuid.UUID = Field(...)
    name: str = Field(...)
    display_name: str = Field(...)
    is_active: Optional[bool] = Field(None)
    config: Optional[dict] = Field(None)
    webhook_secret: Optional[str] = Field(None)
    api_version: Optional[str] = Field(None)
    created_at: Optional[datetime.datetime] = Field(None)
    updated_at: Optional[datetime.datetime] = Field(None)
    tenant_id: Optional[uuid.UUID] = Field(None)


class PlanEntitlements(BaseModel):
    id: uuid.UUID = Field(...)
    plan_id: uuid.UUID = Field(...)
    feature_id: uuid.UUID = Field(...)
    limit_value: Optional[int] = Field(None)
    is_unlimited: Optional[bool] = Field(None)
    metadata: Optional[dict] = Field(None)
    created_at: Optional[datetime.datetime] = Field(None)
    tenant_id: Optional[uuid.UUID] = Field(None)
    updated_at: Optional[datetime.datetime] = Field(None)


class RbacPermissions(BaseModel):
    id: uuid.UUID = Field(...)
    key: str = Field(...)
    description: Optional[str] = Field(None)
    category: Optional[str] = Field(None)
    resource: Optional[str] = Field(None)
    action: Optional[str] = Field(None)
    created_at: Optional[datetime.datetime] = Field(None)
    updated_at: Optional[datetime.datetime] = Field(None)
    tenant_id: Optional[uuid.UUID] = Field(None)


class RbacRoles(BaseModel):
    id: uuid.UUID = Field(...)
    name: str = Field(...)
    description: Optional[str] = Field(None)
    is_system: Optional[bool] = Field(None)
    metadata: Optional[dict] = Field(None)
    created_at: Optional[datetime.datetime] = Field(None)
    updated_at: Optional[datetime.datetime] = Field(None)
    tenant_id: Optional[uuid.UUID] = Field(None)


class SystemPerformanceMetrics(BaseModel):
    id: int = Field(...)
    metric_name: str = Field(...)
    metric_type: str = Field(...)
    service: str = Field(...)
    environment: str = Field(...)
    value: float = Field(...)
    unit: Optional[str] = Field(None)
    tags: Optional[dict] = Field(None)
    timestamp: datetime.datetime = Field(...)
    tenant_id: Optional[uuid.UUID] = Field(None)
    created_at: Optional[datetime.datetime] = Field(None)
    updated_at: Optional[datetime.datetime] = Field(None)


class TenantFeatures(BaseModel):
    id: uuid.UUID = Field(...)
    tenant_id: uuid.UUID = Field(...)
    feature_id: uuid.UUID = Field(...)
    is_enabled: Optional[bool] = Field(None)
    usage_count: Optional[int] = Field(None)
    limit_value: Optional[int] = Field(None)
    config: Optional[dict] = Field(None)
    expires_at: Optional[datetime.datetime] = Field(None)
    created_at: Optional[datetime.datetime] = Field(None)
    updated_at: Optional[datetime.datetime] = Field(None)


class Users(BaseModel):
    id: uuid.UUID = Field(...)
    email: str = Field(...)
    username: str = Field(...)
    hashed_password: str = Field(...)
    full_name: str = Field(...)
    is_active: Optional[bool] = Field(None)
    is_verified: Optional[bool] = Field(None)
    is_superuser: Optional[bool] = Field(None)
    profile_image_url: Optional[str] = Field(None)
    bio: Optional[str] = Field(None)
    created_at: Optional[datetime.datetime] = Field(None)
    updated_at: Optional[datetime.datetime] = Field(None)
    status: Optional[str] = Field(None)
    metadata: Optional[dict] = Field(None)
    last_login_at: Optional[datetime.datetime] = Field(None)
    login_count: Optional[int] = Field(None)
    failed_login_attempts: Optional[int] = Field(None)
    account_locked_until: Optional[datetime.datetime] = Field(None)
    tenant_id: Optional[uuid.UUID] = Field(None)


class WorkflowExecutionMetrics(BaseModel):
    id: int = Field(...)
    workflow_execution_id: uuid.UUID = Field(...)
    node_execution_id: Optional[int] = Field(None)
    metric_type: str = Field(...)
    metric_name: str = Field(...)
    value_numeric: Optional[int] = Field(None)
    value_float: Optional[str] = Field(None)
    value_text: Optional[str] = Field(None)
    value_json: Optional[dict] = Field(None)
    context: Optional[str] = Field(None)
    tags: Optional[dict] = Field(None)
    measured_at: Optional[datetime.datetime] = Field(None)
    created_at: Optional[datetime.datetime] = Field(None)
    tenant_id: Optional[uuid.UUID] = Field(None)
    updated_at: Optional[datetime.datetime] = Field(None)


class AgentAcl(BaseModel):
    agent_id: uuid.UUID = Field(...)
    user_id: uuid.UUID = Field(...)
    can_read: bool = Field(...)
    can_write: bool = Field(...)


class AgentModels(BaseModel):
    agent_id: uuid.UUID = Field(...)
    llm_id: uuid.UUID = Field(...)
    override: dict = Field(...)


class AnalyticsAlerts(BaseModel):
    id: uuid.UUID = Field(...)
    name: str = Field(...)
    description: Optional[str] = Field(None)
    condition: dict = Field(...)
    notification_config: dict = Field(...)
    is_active: bool = Field(...)
    owner_id: uuid.UUID = Field(...)
    last_triggered_at: Optional[datetime.datetime] = Field(None)
    created_at: datetime.datetime = Field(...)
    updated_at: datetime.datetime = Field(...)
    tenant_id: Optional[uuid.UUID] = Field(None)


class AnalyticsDashboards(BaseModel):
    id: uuid.UUID = Field(...)
    name: str = Field(...)
    description: Optional[str] = Field(None)
    icon: Optional[str] = Field(None)
    color: Optional[str] = Field(None)
    user_id: uuid.UUID = Field(...)
    layout: dict = Field(...)
    widgets: dict = Field(...)
    filters: Optional[dict] = Field(None)
    auto_refresh: bool = Field(...)
    refresh_interval: Optional[int] = Field(None)
    is_public: bool = Field(...)
    shared_with: Optional[dict] = Field(None)
    is_default: bool = Field(...)
    status: str = Field(...)
    created_at: datetime.datetime = Field(...)
    updated_at: datetime.datetime = Field(...)
    last_viewed_at: Optional[datetime.datetime] = Field(None)
    workspace_id: Optional[uuid.UUID] = Field(None)
    tenant_id: Optional[uuid.UUID] = Field(None)


class AnalyticsExports(BaseModel):
    id: uuid.UUID = Field(...)
    name: str = Field(...)
    export_type: str = Field(...)
    query: dict = Field(...)
    file_path: Optional[str] = Field(None)
    status: str = Field(...)
    owner_id: uuid.UUID = Field(...)
    created_at: datetime.datetime = Field(...)
    completed_at: Optional[datetime.datetime] = Field(None)
    tenant_id: Optional[uuid.UUID] = Field(None)
    updated_at: Optional[datetime.datetime] = Field(None)


class AnalyticsReports(BaseModel):
    id: uuid.UUID = Field(...)
    name: str = Field(...)
    description: Optional[str] = Field(None)
    query: dict = Field(...)
    schedule: Optional[str] = Field(None)
    owner_id: uuid.UUID = Field(...)
    is_active: bool = Field(...)
    created_at: datetime.datetime = Field(...)
    updated_at: datetime.datetime = Field(...)
    tenant_id: Optional[uuid.UUID] = Field(None)


class AuditLog(BaseModel):
    audit_id: uuid.UUID = Field(...)
    table_name: str = Field(...)
    record_id: uuid.UUID = Field(...)
    changed_by: Optional[uuid.UUID] = Field(None)
    changed_at: datetime.datetime = Field(...)
    operation: str = Field(...)
    diffs: Optional[dict] = Field(None)


class Campaigns(BaseModel):
    id: uuid.UUID = Field(...)
    tenant_id: uuid.UUID = Field(...)
    name: str = Field(...)
    description: Optional[str] = Field(None)
    type: str = Field(...)
    status: Optional[str] = Field(None)
    subject: Optional[str] = Field(None)
    content: Optional[str] = Field(None)
    template_id: Optional[uuid.UUID] = Field(None)
    scheduled_at: Optional[datetime.datetime] = Field(None)
    sent_at: Optional[datetime.datetime] = Field(None)
    stats: Optional[dict] = Field(None)
    settings: Optional[dict] = Field(None)
    created_by: uuid.UUID = Field(...)
    created_at: Optional[datetime.datetime] = Field(None)
    updated_at: Optional[datetime.datetime] = Field(None)


class Contacts(BaseModel):
    id: uuid.UUID = Field(...)
    tenant_id: uuid.UUID = Field(...)
    email: str = Field(...)
    first_name: Optional[str] = Field(None)
    last_name: Optional[str] = Field(None)
    phone: Optional[str] = Field(None)
    company: Optional[str] = Field(None)
    job_title: Optional[str] = Field(None)
    status: Optional[str] = Field(None)
    lead_score: Optional[int] = Field(None)
    source_id: Optional[uuid.UUID] = Field(None)
    custom_fields: Optional[dict] = Field(None)
    tags: Optional[str] = Field(None)
    created_at: Optional[datetime.datetime] = Field(None)
    updated_at: Optional[datetime.datetime] = Field(None)


class Coupons(BaseModel):
    id: uuid.UUID = Field(...)
    code: str = Field(...)
    name: Optional[str] = Field(None)
    description: Optional[str] = Field(None)
    type: str = Field(...)
    value: float = Field(...)
    currency: Optional[str] = Field(None)
    max_uses: Optional[int] = Field(None)
    used_count: Optional[int] = Field(None)
    min_amount: Optional[float] = Field(None)
    max_discount: Optional[float] = Field(None)
    valid_from: Optional[datetime.datetime] = Field(None)
    valid_until: Optional[datetime.datetime] = Field(None)
    is_active: Optional[bool] = Field(None)
    is_stackable: Optional[bool] = Field(None)
    applicable_plans: Optional[dict] = Field(None)
    restrictions: Optional[dict] = Field(None)
    metadata: Optional[dict] = Field(None)
    created_by: Optional[uuid.UUID] = Field(None)
    created_at: Optional[datetime.datetime] = Field(None)
    updated_at: Optional[datetime.datetime] = Field(None)
    tenant_id: Optional[uuid.UUID] = Field(None)


class EmailVerificationTokens(BaseModel):
    id: uuid.UUID = Field(...)
    token: str = Field(...)
    user_id: uuid.UUID = Field(...)
    expires_at: datetime.datetime = Field(...)
    is_used: Optional[bool] = Field(None)
    created_at: Optional[datetime.datetime] = Field(None)
    updated_at: Optional[datetime.datetime] = Field(None)


class Files(BaseModel):
    id: uuid.UUID = Field(...)
    filename: str = Field(...)
    original_name: str = Field(...)
    file_path: str = Field(...)
    file_size: int = Field(...)
    mime_type: str = Field(...)
    category: str = Field(...)
    is_public: bool = Field(...)
    user_id: uuid.UUID = Field(...)
    created_at: datetime.datetime = Field(...)
    updated_at: datetime.datetime = Field(...)
    tags: Optional[dict] = Field(None)
    description: Optional[str] = Field(None)
    tenant_id: Optional[uuid.UUID] = Field(None)
    status: Optional[str] = Field(None)
    scan_status: Optional[str] = Field(None)
    access_count: Optional[int] = Field(None)
    last_accessed_at: Optional[datetime.datetime] = Field(None)


class MarketplaceComponents(BaseModel):
    id: uuid.UUID = Field(...)
    name: str = Field(...)
    description: Optional[str] = Field(None)
    category: str = Field(...)
    component_type: str = Field(...)
    tags: Optional[str] = Field(None)
    price: float = Field(...)
    is_free: bool = Field(...)
    author_id: uuid.UUID = Field(...)
    version: str = Field(...)
    content: Optional[str] = Field(None)
    component_metadata: Optional[str] = Field(None)
    downloads_count: int = Field(...)
    rating_average: float = Field(...)
    rating_count: int = Field(...)
    is_featured: bool = Field(...)
    is_approved: bool = Field(...)
    status: str = Field(...)
    created_at: datetime.datetime = Field(...)
    updated_at: datetime.datetime = Field(...)
    title: str = Field(...)
    short_description: Optional[str] = Field(None)
    subcategory: Optional[str] = Field(None)
    organization: Optional[str] = Field(None)
    configuration_schema: Optional[dict] = Field(None)
    dependencies: Optional[dict] = Field(None)
    compatibility: Optional[dict] = Field(None)
    documentation: Optional[str] = Field(None)
    readme: Optional[str] = Field(None)
    changelog: Optional[str] = Field(None)
    examples: Optional[dict] = Field(None)
    icon_url: Optional[str] = Field(None)
    screenshots: Optional[dict] = Field(None)
    demo_url: Optional[str] = Field(None)
    video_url: Optional[str] = Field(None)
    currency: Optional[str] = Field(None)
    license_type: Optional[str] = Field(None)
    install_count: int = Field(...)
    view_count: int = Field(...)
    like_count: int = Field(...)
    is_verified: bool = Field(...)
    moderation_notes: Optional[str] = Field(None)
    keywords: Optional[dict] = Field(None)
    search_vector: Optional[str] = Field(None)
    popularity_score: float = Field(...)
    published_at: Optional[datetime.datetime] = Field(None)
    last_download_at: Optional[datetime.datetime] = Field(None)
    tenant_id: Optional[uuid.UUID] = Field(None)


class PasswordResetTokens(BaseModel):
    id: uuid.UUID = Field(...)
    token: str = Field(...)
    user_id: uuid.UUID = Field(...)
    expires_at: datetime.datetime = Field(...)
    is_used: Optional[bool] = Field(None)
    created_at: Optional[datetime.datetime] = Field(None)
    updated_at: Optional[datetime.datetime] = Field(None)


class PaymentCustomers(BaseModel):
    id: uuid.UUID = Field(...)
    tenant_id: uuid.UUID = Field(...)
    provider_id: uuid.UUID = Field(...)
    external_customer_id: str = Field(...)
    customer_data: Optional[dict] = Field(None)
    is_active: Optional[bool] = Field(None)
    created_at: Optional[datetime.datetime] = Field(None)
    updated_at: Optional[datetime.datetime] = Field(None)


class PlanProviderMappings(BaseModel):
    id: uuid.UUID = Field(...)
    plan_id: uuid.UUID = Field(...)
    provider_id: uuid.UUID = Field(...)
    external_plan_id: str = Field(...)
    external_price_id: Optional[str] = Field(None)
    is_active: Optional[bool] = Field(None)
    config: Optional[dict] = Field(None)
    created_at: Optional[datetime.datetime] = Field(None)
    updated_at: Optional[datetime.datetime] = Field(None)
    tenant_id: Optional[uuid.UUID] = Field(None)


class ProjectCollaborators(BaseModel):
    id: uuid.UUID = Field(...)
    project_id: uuid.UUID = Field(...)
    user_id: uuid.UUID = Field(...)
    can_edit: bool = Field(...)
    can_comment: bool = Field(...)
    can_share: bool = Field(...)
    can_delete: bool = Field(...)
    is_online: bool = Field(...)
    current_cursor_position: Optional[dict] = Field(None)
    last_edit_at: Optional[datetime.datetime] = Field(None)
    added_at: datetime.datetime = Field(...)
    last_seen_at: datetime.datetime = Field(...)
    tenant_id: Optional[uuid.UUID] = Field(None)
    created_at: Optional[datetime.datetime] = Field(None)
    updated_at: Optional[datetime.datetime] = Field(None)


class ProjectComments(BaseModel):
    id: uuid.UUID = Field(...)
    project_id: uuid.UUID = Field(...)
    user_id: uuid.UUID = Field(...)
    parent_id: Optional[uuid.UUID] = Field(None)
    content: str = Field(...)
    content_type: str = Field(...)
    node_id: Optional[str] = Field(None)
    position_x: Optional[float] = Field(None)
    position_y: Optional[float] = Field(None)
    is_resolved: bool = Field(...)
    is_edited: bool = Field(...)
    created_at: datetime.datetime = Field(...)
    updated_at: datetime.datetime = Field(...)
    resolved_at: Optional[datetime.datetime] = Field(None)
    tenant_id: Optional[uuid.UUID] = Field(None)


class RbacRolePermissions(BaseModel):
    id: uuid.UUID = Field(...)
    role_id: uuid.UUID = Field(...)
    permission_id: uuid.UUID = Field(...)
    granted: Optional[bool] = Field(None)
    conditions: Optional[dict] = Field(None)
    created_at: Optional[datetime.datetime] = Field(None)
    tenant_id: Optional[uuid.UUID] = Field(None)
    updated_at: Optional[datetime.datetime] = Field(None)


class RefreshTokens(BaseModel):
    id: uuid.UUID = Field(...)
    token: str = Field(...)
    user_id: uuid.UUID = Field(...)
    expires_at: datetime.datetime = Field(...)
    is_revoked: Optional[bool] = Field(None)
    created_at: Optional[datetime.datetime] = Field(None)
    updated_at: Optional[datetime.datetime] = Field(None)


class Tags(BaseModel):
    id: uuid.UUID = Field(...)
    target_type: str = Field(...)
    target_id: uuid.UUID = Field(...)
    tag_name: str = Field(...)
    tag_value: Optional[str] = Field(None)
    tag_category: Optional[str] = Field(None)
    is_system_tag: Optional[bool] = Field(None)
    created_by_user_id: Optional[uuid.UUID] = Field(None)
    auto_generated: Optional[bool] = Field(None)
    confidence_score: Optional[float] = Field(None)
    tag_metadata: Optional[dict] = Field(None)
    created_at: datetime.datetime = Field(...)
    tenant_id: Optional[uuid.UUID] = Field(None)
    updated_at: Optional[datetime.datetime] = Field(None)


class TemplateCollections(BaseModel):
    id: int = Field(...)
    collection_id: Optional[str] = Field(None)
    name: str = Field(...)
    description: Optional[str] = Field(None)
    creator_id: uuid.UUID = Field(...)
    is_public: Optional[bool] = Field(None)
    is_featured: Optional[bool] = Field(None)
    template_ids: dict = Field(...)
    tags: Optional[dict] = Field(None)
    thumbnail_url: Optional[str] = Field(None)
    view_count: Optional[int] = Field(None)
    follow_count: Optional[int] = Field(None)
    created_at: Optional[datetime.datetime] = Field(None)
    updated_at: Optional[datetime.datetime] = Field(None)
    tenant_id: Optional[uuid.UUID] = Field(None)


class UserBehaviorMetrics(BaseModel):
    id: uuid.UUID = Field(...)
    user_id: uuid.UUID = Field(...)
    date: datetime.datetime = Field(...)
    period_type: str = Field(...)
    session_count: int = Field(...)
    total_session_duration: int = Field(...)
    avg_session_duration: float = Field(...)
    page_views: int = Field(...)
    unique_pages_visited: int = Field(...)
    workflows_created: int = Field(...)
    workflows_executed: int = Field(...)
    components_used: int = Field(...)
    collaborations_initiated: int = Field(...)
    marketplace_purchases: int = Field(...)
    revenue_generated: float = Field(...)
    components_published: int = Field(...)
    error_count: int = Field(...)
    support_tickets: int = Field(...)
    feature_requests: int = Field(...)
    engagement_score: float = Field(...)
    satisfaction_score: float = Field(...)
    value_score: float = Field(...)
    created_at: datetime.datetime = Field(...)
    updated_at: datetime.datetime = Field(...)
    tenant_id: Optional[uuid.UUID] = Field(None)


class UserInsights(BaseModel):
    id: uuid.UUID = Field(...)
    user_id: uuid.UUID = Field(...)
    insight_type: str = Field(...)
    category: str = Field(...)
    priority: str = Field(...)
    title: str = Field(...)
    description: str = Field(...)
    recommendation: Optional[str] = Field(None)
    supporting_data: Optional[dict] = Field(None)
    confidence_score: float = Field(...)
    suggested_action: Optional[str] = Field(None)
    action_url: Optional[str] = Field(None)
    action_data: Optional[dict] = Field(None)
    is_read: bool = Field(...)
    is_dismissed: bool = Field(...)
    is_acted_upon: bool = Field(...)
    user_feedback: Optional[str] = Field(None)
    expires_at: Optional[datetime.datetime] = Field(None)
    is_evergreen: bool = Field(...)
    created_at: datetime.datetime = Field(...)
    read_at: Optional[datetime.datetime] = Field(None)
    acted_at: Optional[datetime.datetime] = Field(None)
    tenant_id: Optional[uuid.UUID] = Field(None)
    updated_at: Optional[datetime.datetime] = Field(None)


class UserSubscriptions(BaseModel):
    id: uuid.UUID = Field(...)
    user_id: uuid.UUID = Field(...)
    plan_id: uuid.UUID = Field(...)
    started_at: datetime.datetime = Field(...)
    expires_at: Optional[datetime.datetime] = Field(None)
    cancelled_at: Optional[datetime.datetime] = Field(None)
    payment_method: Optional[str] = Field(None)
    payment_provider: Optional[str] = Field(None)
    external_subscription_id: Optional[str] = Field(None)
    billing_cycle: Optional[str] = Field(None)
    current_period_start: Optional[datetime.datetime] = Field(None)
    current_period_end: Optional[datetime.datetime] = Field(None)
    current_workspaces: int = Field(...)
    current_storage_mb: float = Field(...)
    current_executions_this_month: int = Field(...)
    subscription_metadata: Optional[dict] = Field(None)
    created_at: datetime.datetime = Field(...)
    updated_at: datetime.datetime = Field(...)
    tenant_id: Optional[uuid.UUID] = Field(None)
    status: Optional[str] = Field(None)


class UserTenantRoles(BaseModel):
    id: uuid.UUID = Field(...)
    user_id: uuid.UUID = Field(...)
    tenant_id: uuid.UUID = Field(...)
    role_id: uuid.UUID = Field(...)
    granted_by: Optional[uuid.UUID] = Field(None)
    granted_at: Optional[datetime.datetime] = Field(None)
    expires_at: Optional[datetime.datetime] = Field(None)
    is_active: Optional[bool] = Field(None)
    conditions: Optional[dict] = Field(None)
    created_at: Optional[datetime.datetime] = Field(None)
    updated_at: Optional[datetime.datetime] = Field(None)


class UserVariables(BaseModel):
    id: uuid.UUID = Field(...)
    key: str = Field(...)
    value: str = Field(...)
    is_secret: bool = Field(...)
    user_id: uuid.UUID = Field(...)
    created_at: datetime.datetime = Field(...)
    updated_at: datetime.datetime = Field(...)
    category: Optional[str] = Field(None)
    description: Optional[str] = Field(None)
    is_encrypted: bool = Field(...)
    is_active: bool = Field(...)
    tenant_id: Optional[uuid.UUID] = Field(None)


class WebhookLogs(BaseModel):
    id: uuid.UUID = Field(...)
    provider_id: uuid.UUID = Field(...)
    event_type: str = Field(...)
    event_id: Optional[str] = Field(None)
    payload: dict = Field(...)
    headers: Optional[dict] = Field(None)
    status: Optional[str] = Field(None)
    processed_at: Optional[datetime.datetime] = Field(None)
    error_message: Optional[str] = Field(None)
    retry_count: Optional[int] = Field(None)
    created_at: Optional[datetime.datetime] = Field(None)
    updated_at: Optional[datetime.datetime] = Field(None)
    tenant_id: Optional[uuid.UUID] = Field(None)


class Workspaces(BaseModel):
    id: uuid.UUID = Field(...)
    name: str = Field(...)
    slug: str = Field(...)
    description: Optional[str] = Field(None)
    avatar_url: Optional[str] = Field(None)
    color: Optional[str] = Field(None)
    owner_id: uuid.UUID = Field(...)
    is_public: bool = Field(...)
    is_template: bool = Field(...)
    allow_guest_access: bool = Field(...)
    require_approval: bool = Field(...)
    max_members: Optional[int] = Field(None)
    max_projects: Optional[int] = Field(None)
    max_storage_mb: Optional[int] = Field(None)
    enable_real_time_editing: bool = Field(...)
    enable_comments: bool = Field(...)
    enable_chat: bool = Field(...)
    enable_video_calls: bool = Field(...)
    member_count: int = Field(...)
    project_count: int = Field(...)
    activity_count: int = Field(...)
    storage_used_mb: float = Field(...)
    status: str = Field(...)
    created_at: datetime.datetime = Field(...)
    updated_at: datetime.datetime = Field(...)
    last_activity_at: datetime.datetime = Field(...)
    tenant_id: uuid.UUID = Field(...)
    email_notifications: Optional[bool] = Field(None)
    push_notifications: Optional[bool] = Field(None)
    api_calls_today: Optional[int] = Field(None)
    api_calls_this_month: Optional[int] = Field(None)
    last_api_reset_daily: Optional[datetime.datetime] = Field(None)
    last_api_reset_monthly: Optional[datetime.datetime] = Field(None)
    feature_usage_count: Optional[dict] = Field(None)
    type: str = Field(...)


class CampaignContacts(BaseModel):
    id: uuid.UUID = Field(...)
    campaign_id: uuid.UUID = Field(...)
    contact_id: uuid.UUID = Field(...)
    status: Optional[str] = Field(None)
    sent_at: Optional[datetime.datetime] = Field(None)
    opened_at: Optional[datetime.datetime] = Field(None)
    clicked_at: Optional[datetime.datetime] = Field(None)
    bounced_at: Optional[datetime.datetime] = Field(None)
    unsubscribed_at: Optional[datetime.datetime] = Field(None)
    error_message: Optional[str] = Field(None)
    created_at: Optional[datetime.datetime] = Field(None)
    updated_at: Optional[datetime.datetime] = Field(None)
    tenant_id: Optional[uuid.UUID] = Field(None)


class ComponentDownloads(BaseModel):
    id: uuid.UUID = Field(...)
    component_id: uuid.UUID = Field(...)
    user_id: uuid.UUID = Field(...)
    version: str = Field(...)
    download_type: str = Field(...)
    ip_address: Optional[str] = Field(None)
    user_agent: Optional[str] = Field(None)
    referrer: Optional[str] = Field(None)
    status: str = Field(...)
    file_size: Optional[int] = Field(None)
    created_at: datetime.datetime = Field(...)
    completed_at: Optional[datetime.datetime] = Field(None)
    tenant_id: Optional[uuid.UUID] = Field(None)
    updated_at: Optional[datetime.datetime] = Field(None)


class ComponentPurchases(BaseModel):
    id: uuid.UUID = Field(...)
    component_id: uuid.UUID = Field(...)
    user_id: uuid.UUID = Field(...)
    amount: float = Field(...)
    currency: str = Field(...)
    payment_method: Optional[str] = Field(None)
    transaction_id: str = Field(...)
    payment_provider: Optional[str] = Field(None)
    provider_transaction_id: Optional[str] = Field(None)
    status: str = Field(...)
    license_key: Optional[str] = Field(None)
    license_expires_at: Optional[datetime.datetime] = Field(None)
    created_at: datetime.datetime = Field(...)
    completed_at: Optional[datetime.datetime] = Field(None)
    refunded_at: Optional[datetime.datetime] = Field(None)
    tenant_id: Optional[uuid.UUID] = Field(None)
    updated_at: Optional[datetime.datetime] = Field(None)


class ComponentRatings(BaseModel):
    id: uuid.UUID = Field(...)
    component_id: uuid.UUID = Field(...)
    user_id: uuid.UUID = Field(...)
    rating: int = Field(...)
    title: Optional[str] = Field(None)
    review: Optional[str] = Field(None)
    ease_of_use: Optional[int] = Field(None)
    documentation_quality: Optional[int] = Field(None)
    performance: Optional[int] = Field(None)
    reliability: Optional[int] = Field(None)
    support_quality: Optional[int] = Field(None)
    version_used: Optional[str] = Field(None)
    use_case: Optional[str] = Field(None)
    experience_level: Optional[str] = Field(None)
    helpful_count: int = Field(...)
    reported_count: int = Field(...)
    is_verified_purchase: bool = Field(...)
    is_featured: bool = Field(...)
    status: str = Field(...)
    created_at: datetime.datetime = Field(...)
    updated_at: datetime.datetime = Field(...)
    tenant_id: Optional[uuid.UUID] = Field(None)


class ComponentVersions(BaseModel):
    id: uuid.UUID = Field(...)
    component_id: uuid.UUID = Field(...)
    version: str = Field(...)
    is_latest: bool = Field(...)
    is_stable: bool = Field(...)
    changelog: Optional[str] = Field(None)
    breaking_changes: Optional[str] = Field(None)
    migration_guide: Optional[str] = Field(None)
    component_data: dict = Field(...)
    file_size: Optional[int] = Field(None)
    min_platform_version: Optional[str] = Field(None)
    max_platform_version: Optional[str] = Field(None)
    dependencies: Optional[dict] = Field(None)
    download_count: int = Field(...)
    status: str = Field(...)
    created_at: datetime.datetime = Field(...)
    deprecated_at: Optional[datetime.datetime] = Field(None)
    tenant_id: Optional[uuid.UUID] = Field(None)
    updated_at: Optional[datetime.datetime] = Field(None)


class ContactEvents(BaseModel):
    id: uuid.UUID = Field(...)
    contact_id: uuid.UUID = Field(...)
    event_type: str = Field(...)
    event_data: Optional[dict] = Field(None)
    occurred_at: Optional[datetime.datetime] = Field(None)
    created_at: Optional[datetime.datetime] = Field(None)
    tenant_id: Optional[uuid.UUID] = Field(None)
    updated_at: Optional[datetime.datetime] = Field(None)


class ContactInteractions(BaseModel):
    id: uuid.UUID = Field(...)
    contact_id: uuid.UUID = Field(...)
    user_id: Optional[uuid.UUID] = Field(None)
    type: str = Field(...)
    channel: Optional[str] = Field(None)
    subject: Optional[str] = Field(None)
    content: Optional[str] = Field(None)
    direction: Optional[str] = Field(None)
    status: Optional[str] = Field(None)
    scheduled_at: Optional[datetime.datetime] = Field(None)
    completed_at: Optional[datetime.datetime] = Field(None)
    metadata: Optional[dict] = Field(None)
    created_at: Optional[datetime.datetime] = Field(None)
    updated_at: Optional[datetime.datetime] = Field(None)
    tenant_id: Optional[uuid.UUID] = Field(None)


class ContactListMemberships(BaseModel):
    id: uuid.UUID = Field(...)
    list_id: uuid.UUID = Field(...)
    contact_id: uuid.UUID = Field(...)
    added_by: Optional[uuid.UUID] = Field(None)
    added_at: Optional[datetime.datetime] = Field(None)
    status: Optional[str] = Field(None)
    tenant_id: Optional[uuid.UUID] = Field(None)
    created_at: Optional[datetime.datetime] = Field(None)
    updated_at: Optional[datetime.datetime] = Field(None)


class ContactNotes(BaseModel):
    id: uuid.UUID = Field(...)
    contact_id: uuid.UUID = Field(...)
    user_id: uuid.UUID = Field(...)
    content: str = Field(...)
    type: Optional[str] = Field(None)
    is_private: Optional[bool] = Field(None)
    created_at: Optional[datetime.datetime] = Field(None)
    updated_at: Optional[datetime.datetime] = Field(None)
    tenant_id: Optional[uuid.UUID] = Field(None)


class ConversionJourneys(BaseModel):
    id: uuid.UUID = Field(...)
    contact_id: uuid.UUID = Field(...)
    tenant_id: uuid.UUID = Field(...)
    journey_name: Optional[str] = Field(None)
    current_stage: Optional[str] = Field(None)
    stages_completed: Optional[dict] = Field(None)
    conversion_probability: Optional[float] = Field(None)
    last_interaction_at: Optional[datetime.datetime] = Field(None)
    converted_at: Optional[datetime.datetime] = Field(None)
    conversion_value: Optional[float] = Field(None)
    metadata: Optional[dict] = Field(None)
    created_at: Optional[datetime.datetime] = Field(None)
    updated_at: Optional[datetime.datetime] = Field(None)


class CustomReports(BaseModel):
    id: uuid.UUID = Field(...)
    user_id: uuid.UUID = Field(...)
    workspace_id: Optional[uuid.UUID] = Field(None)
    name: str = Field(...)
    description: Optional[str] = Field(None)
    category: Optional[str] = Field(None)
    query_config: dict = Field(...)
    visualization_config: Optional[dict] = Field(None)
    filters: Optional[dict] = Field(None)
    is_scheduled: bool = Field(...)
    schedule_config: Optional[dict] = Field(None)
    last_run_at: Optional[datetime.datetime] = Field(None)
    next_run_at: Optional[datetime.datetime] = Field(None)
    is_public: bool = Field(...)
    shared_with: Optional[dict] = Field(None)
    cached_data: Optional[dict] = Field(None)
    cache_expires_at: Optional[datetime.datetime] = Field(None)
    status: str = Field(...)
    created_at: datetime.datetime = Field(...)
    updated_at: datetime.datetime = Field(...)
    tenant_id: Optional[uuid.UUID] = Field(None)


class LlmsConversations(BaseModel):
    id: uuid.UUID = Field(...)
    user_id: uuid.UUID = Field(...)
    agent_id: Optional[uuid.UUID] = Field(None)
    workspace_id: Optional[uuid.UUID] = Field(None)
    title: Optional[str] = Field(None)
    status: Optional[str] = Field(None)
    message_count: Optional[int] = Field(None)
    total_tokens_used: Optional[int] = Field(None)
    context: Optional[dict] = Field(None)
    settings: Optional[dict] = Field(None)
    last_message_at: Optional[datetime.datetime] = Field(None)
    created_at: datetime.datetime = Field(...)
    updated_at: datetime.datetime = Field(...)
    tenant_id: uuid.UUID = Field(...)


class Nodes(BaseModel):
    id: uuid.UUID = Field(...)
    name: str = Field(...)
    category: str = Field(...)
    description: Optional[str] = Field(None)
    version: str = Field(...)
    definition: dict = Field(...)
    is_public: bool = Field(...)
    created_at: Optional[datetime.datetime] = Field(None)
    updated_at: Optional[datetime.datetime] = Field(None)
    code_template: str = Field(...)
    input_schema: dict = Field(...)
    output_schema: dict = Field(...)
    parameters_schema: Optional[dict] = Field(None)
    icon: Optional[str] = Field(None)
    color: Optional[str] = Field(None)
    documentation: Optional[str] = Field(None)
    examples: Optional[dict] = Field(None)
    downloads_count: Optional[int] = Field(None)
    usage_count: Optional[int] = Field(None)
    rating_average: Optional[int] = Field(None)
    rating_count: Optional[int] = Field(None)
    user_id: uuid.UUID = Field(...)
    workspace_id: Optional[uuid.UUID] = Field(None)
    tenant_id: Optional[uuid.UUID] = Field(None)
    status: Optional[str] = Field(None)
    timeout_seconds: Optional[int] = Field(None)
    retry_count: Optional[int] = Field(None)


class PaymentMethods(BaseModel):
    id: uuid.UUID = Field(...)
    customer_id: uuid.UUID = Field(...)
    external_method_id: str = Field(...)
    type: str = Field(...)
    last4: Optional[str] = Field(None)
    brand: Optional[str] = Field(None)
    exp_month: Optional[int] = Field(None)
    exp_year: Optional[int] = Field(None)
    is_default: Optional[bool] = Field(None)
    is_active: Optional[bool] = Field(None)
    metadata: Optional[dict] = Field(None)
    created_at: Optional[datetime.datetime] = Field(None)
    updated_at: Optional[datetime.datetime] = Field(None)
    tenant_id: Optional[uuid.UUID] = Field(None)


class Workflows(BaseModel):
    id: uuid.UUID = Field(...)
    name: str = Field(...)
    description: Optional[str] = Field(None)
    definition: dict = Field(...)
    is_active: bool = Field(...)
    user_id: uuid.UUID = Field(...)
    workspace_id: Optional[uuid.UUID] = Field(None)
    is_public: Optional[bool] = Field(None)
    category: Optional[str] = Field(None)
    tags: Optional[dict] = Field(None)
    version: Optional[str] = Field(None)
    thumbnail_url: Optional[str] = Field(None)
    downloads_count: Optional[int] = Field(None)
    rating_average: Optional[int] = Field(None)
    rating_count: Optional[int] = Field(None)
    execution_count: Optional[int] = Field(None)
    last_executed_at: Optional[datetime.datetime] = Field(None)
    created_at: datetime.datetime = Field(...)
    updated_at: datetime.datetime = Field(...)
    tenant_id: uuid.UUID = Field(...)
    status: Optional[str] = Field(None)
    priority: Optional[int] = Field(None)
    timeout_seconds: Optional[int] = Field(None)
    retry_count: Optional[int] = Field(None)


class WorkspaceActivities(BaseModel):
    id: uuid.UUID = Field(...)
    workspace_id: uuid.UUID = Field(...)
    user_id: uuid.UUID = Field(...)
    action: str = Field(...)
    resource_type: str = Field(...)
    resource_id: Optional[str] = Field(None)
    description: str = Field(...)
    metadata: Optional[dict] = Field(None)
    ip_address: Optional[str] = Field(None)
    user_agent: Optional[str] = Field(None)
    created_at: datetime.datetime = Field(...)
    tenant_id: Optional[uuid.UUID] = Field(None)
    updated_at: Optional[datetime.datetime] = Field(None)
    meta_data: Optional[dict] = Field(None)


class WorkspaceFeatures(BaseModel):
    id: uuid.UUID = Field(...)
    workspace_id: uuid.UUID = Field(...)
    feature_id: uuid.UUID = Field(...)
    is_enabled: Optional[bool] = Field(None)
    config: Optional[dict] = Field(None)
    usage_count: Optional[int] = Field(None)
    limit_value: Optional[int] = Field(None)
    expires_at: Optional[datetime.datetime] = Field(None)
    created_at: Optional[datetime.datetime] = Field(None)
    updated_at: Optional[datetime.datetime] = Field(None)
    tenant_id: Optional[uuid.UUID] = Field(None)


class WorkspaceInvitations(BaseModel):
    id: uuid.UUID = Field(...)
    workspace_id: uuid.UUID = Field(...)
    inviter_id: uuid.UUID = Field(...)
    invited_user_id: Optional[uuid.UUID] = Field(None)
    email: str = Field(...)
    message: Optional[str] = Field(None)
    token: str = Field(...)
    status: str = Field(...)
    created_at: datetime.datetime = Field(...)
    expires_at: datetime.datetime = Field(...)
    responded_at: Optional[datetime.datetime] = Field(None)
    tenant_id: Optional[uuid.UUID] = Field(None)
    updated_at: Optional[datetime.datetime] = Field(None)


class WorkspaceMembers(BaseModel):
    id: int = Field(...)
    workspace_id: uuid.UUID = Field(...)
    user_id: uuid.UUID = Field(...)
    custom_permissions: Optional[dict] = Field(None)
    status: str = Field(...)
    is_favorite: bool = Field(...)
    notification_preferences: Optional[dict] = Field(None)
    last_seen_at: datetime.datetime = Field(...)
    joined_at: datetime.datetime = Field(...)
    left_at: Optional[datetime.datetime] = Field(None)
    created_at: Optional[datetime.datetime] = Field(None)
    updated_at: Optional[datetime.datetime] = Field(None)
    tenant_id: uuid.UUID = Field(...)
    role: str = Field(...)


class LlmsConversationsTurns(BaseModel):
    id: uuid.UUID = Field(...)
    conversation_id: uuid.UUID = Field(...)
    llm_id: uuid.UUID = Field(...)
    first_used_at: datetime.datetime = Field(...)
    last_used_at: datetime.datetime = Field(...)
    message_count: Optional[int] = Field(None)
    total_input_tokens: Optional[int] = Field(None)
    total_output_tokens: Optional[int] = Field(None)
    total_cost_usd: Optional[float] = Field(None)
    tenant_id: Optional[uuid.UUID] = Field(None)
    created_at: Optional[datetime.datetime] = Field(None)
    updated_at: Optional[datetime.datetime] = Field(None)


class LlmsMessages(BaseModel):
    id: uuid.UUID = Field(...)
    conversation_id: uuid.UUID = Field(...)
    role: str = Field(...)
    content: str = Field(...)
    attachments: Optional[dict] = Field(None)
    model_used: Optional[str] = Field(None)
    model_provider: Optional[str] = Field(None)
    tokens_used: Optional[int] = Field(None)
    processing_time_ms: Optional[int] = Field(None)
    temperature: Optional[float] = Field(None)
    max_tokens: Optional[int] = Field(None)
    status: Optional[str] = Field(None)
    error_message: Optional[str] = Field(None)
    created_at: datetime.datetime = Field(...)
    updated_at: Optional[datetime.datetime] = Field(None)
    tenant_id: Optional[uuid.UUID] = Field(None)


class NodeRatings(BaseModel):
    id: uuid.UUID = Field(...)
    node_id: uuid.UUID = Field(...)
    user_id: uuid.UUID = Field(...)
    rating: int = Field(...)
    created_at: Optional[datetime.datetime] = Field(None)
    updated_at: Optional[datetime.datetime] = Field(None)
    tenant_id: Optional[uuid.UUID] = Field(None)


class ReportExecutions(BaseModel):
    id: uuid.UUID = Field(...)
    report_id: uuid.UUID = Field(...)
    user_id: Optional[uuid.UUID] = Field(None)
    execution_type: str = Field(...)
    parameters: Optional[dict] = Field(None)
    status: str = Field(...)
    result_data: Optional[dict] = Field(None)
    error_message: Optional[str] = Field(None)
    execution_time_ms: Optional[int] = Field(None)
    rows_processed: Optional[int] = Field(None)
    data_size_bytes: Optional[int] = Field(None)
    started_at: datetime.datetime = Field(...)
    completed_at: Optional[datetime.datetime] = Field(None)
    tenant_id: Optional[uuid.UUID] = Field(None)
    created_at: Optional[datetime.datetime] = Field(None)
    updated_at: Optional[datetime.datetime] = Field(None)


class Subscriptions(BaseModel):
    id: uuid.UUID = Field(...)
    tenant_id: uuid.UUID = Field(...)
    plan_id: uuid.UUID = Field(...)
    provider_id: Optional[uuid.UUID] = Field(None)
    external_subscription_id: Optional[str] = Field(None)
    status: str = Field(...)
    current_period_start: Optional[datetime.datetime] = Field(None)
    current_period_end: Optional[datetime.datetime] = Field(None)
    trial_start: Optional[datetime.datetime] = Field(None)
    trial_end: Optional[datetime.datetime] = Field(None)
    cancel_at_period_end: Optional[bool] = Field(None)
    canceled_at: Optional[datetime.datetime] = Field(None)
    ended_at: Optional[datetime.datetime] = Field(None)
    payment_method_id: Optional[uuid.UUID] = Field(None)
    coupon_id: Optional[uuid.UUID] = Field(None)
    quantity: Optional[int] = Field(None)
    discount_amount: Optional[float] = Field(None)
    tax_percent: Optional[float] = Field(None)
    metadata: Optional[dict] = Field(None)
    created_at: Optional[datetime.datetime] = Field(None)
    updated_at: Optional[datetime.datetime] = Field(None)


class WorkflowExecutions(BaseModel):
    id: uuid.UUID = Field(...)
    execution_id: Optional[str] = Field(None)
    workflow_id: uuid.UUID = Field(...)
    user_id: uuid.UUID = Field(...)
    status: str = Field(...)
    priority: Optional[int] = Field(None)
    input_data: Optional[dict] = Field(None)
    output_data: Optional[dict] = Field(None)
    context_data: Optional[dict] = Field(None)
    variables: Optional[dict] = Field(None)
    total_nodes: Optional[int] = Field(None)
    completed_nodes: Optional[int] = Field(None)
    failed_nodes: Optional[int] = Field(None)
    progress_percentage: Optional[int] = Field(None)
    started_at: datetime.datetime = Field(...)
    completed_at: Optional[datetime.datetime] = Field(None)
    timeout_at: Optional[datetime.datetime] = Field(None)
    estimated_duration: Optional[int] = Field(None)
    actual_duration: Optional[int] = Field(None)
    execution_log: Optional[str] = Field(None)
    error_message: Optional[str] = Field(None)
    error_details: Optional[dict] = Field(None)
    debug_info: Optional[dict] = Field(None)
    retry_count: Optional[int] = Field(None)
    max_retries: Optional[int] = Field(None)
    auto_retry: Optional[bool] = Field(None)
    notify_on_completion: Optional[bool] = Field(None)
    notify_on_failure: Optional[bool] = Field(None)
    tags: Optional[dict] = Field(None)
    metadata: Optional[dict] = Field(None)
    created_at: Optional[datetime.datetime] = Field(None)
    updated_at: Optional[datetime.datetime] = Field(None)
    tenant_id: Optional[uuid.UUID] = Field(None)


class WorkflowNodes(BaseModel):
    id: uuid.UUID = Field(...)
    workflow_id: uuid.UUID = Field(...)
    node_id: uuid.UUID = Field(...)
    instance_name: Optional[str] = Field(None)
    position_x: int = Field(...)
    position_y: int = Field(...)
    configuration: Optional[dict] = Field(None)
    created_at: Optional[datetime.datetime] = Field(None)
    tenant_id: Optional[uuid.UUID] = Field(None)
    updated_at: Optional[datetime.datetime] = Field(None)


class WorkflowTemplates(BaseModel):
    id: uuid.UUID = Field(...)
    name: str = Field(...)
    description: Optional[str] = Field(None)
    category: str = Field(...)
    tags: Optional[dict] = Field(None)
    workflow_definition: dict = Field(...)
    preview_image: Optional[str] = Field(None)
    author_id: uuid.UUID = Field(...)
    version: str = Field(...)
    is_public: bool = Field(...)
    is_featured: bool = Field(...)
    downloads_count: int = Field(...)
    rating_average: float = Field(...)
    rating_count: int = Field(...)
    price: float = Field(...)
    is_free: bool = Field(...)
    license: str = Field(...)
    created_at: datetime.datetime = Field(...)
    updated_at: datetime.datetime = Field(...)
    title: str = Field(...)
    short_description: Optional[str] = Field(None)
    original_workflow_id: Optional[uuid.UUID] = Field(None)
    status: Optional[str] = Field(None)
    is_verified: Optional[bool] = Field(None)
    license_type: Optional[str] = Field(None)
    workflow_data: dict = Field(...)
    nodes_data: dict = Field(...)
    connections_data: Optional[dict] = Field(None)
    required_variables: Optional[dict] = Field(None)
    optional_variables: Optional[dict] = Field(None)
    default_config: Optional[dict] = Field(None)
    compatibility_version: Optional[str] = Field(None)
    estimated_duration: Optional[int] = Field(None)
    complexity_level: Optional[int] = Field(None)
    download_count: Optional[int] = Field(None)
    usage_count: Optional[int] = Field(None)
    view_count: Optional[int] = Field(None)
    keywords: Optional[dict] = Field(None)
    use_cases: Optional[dict] = Field(None)
    industries: Optional[dict] = Field(None)
    thumbnail_url: Optional[str] = Field(None)
    preview_images: Optional[dict] = Field(None)
    demo_video_url: Optional[str] = Field(None)
    documentation: Optional[str] = Field(None)
    setup_instructions: Optional[str] = Field(None)
    changelog: Optional[dict] = Field(None)
    support_email: Optional[str] = Field(None)
    repository_url: Optional[str] = Field(None)
    documentation_url: Optional[str] = Field(None)
    published_at: Optional[datetime.datetime] = Field(None)
    last_used_at: Optional[datetime.datetime] = Field(None)
    tenant_id: Optional[uuid.UUID] = Field(None)


class WorkspaceProjects(BaseModel):
    id: uuid.UUID = Field(...)
    workspace_id: uuid.UUID = Field(...)
    workflow_id: uuid.UUID = Field(...)
    name: str = Field(...)
    description: Optional[str] = Field(None)
    color: Optional[str] = Field(None)
    allow_concurrent_editing: bool = Field(...)
    auto_save_interval: Optional[int] = Field(None)
    version_control_enabled: bool = Field(...)
    status: str = Field(...)
    is_template: bool = Field(...)
    is_public: bool = Field(...)
    collaborator_count: int = Field(...)
    edit_count: int = Field(...)
    comment_count: int = Field(...)
    created_at: datetime.datetime = Field(...)
    updated_at: datetime.datetime = Field(...)
    last_edited_at: datetime.datetime = Field(...)
    tenant_id: uuid.UUID = Field(...)


class AnalyticsEvents(BaseModel):
    id: uuid.UUID = Field(...)
    event_id: str = Field(...)
    event_type: str = Field(...)
    category: str = Field(...)
    action: str = Field(...)
    label: Optional[str] = Field(None)
    user_id: Optional[uuid.UUID] = Field(None)
    session_id: Optional[str] = Field(None)
    anonymous_id: Optional[str] = Field(None)
    ip_address: Optional[str] = Field(None)
    user_agent: Optional[str] = Field(None)
    referrer: Optional[str] = Field(None)
    page_url: Optional[str] = Field(None)
    properties: dict = Field(...)
    value: Optional[float] = Field(None)
    workspace_id: Optional[uuid.UUID] = Field(None)
    project_id: uuid.UUID = Field(...)
    workflow_id: Optional[uuid.UUID] = Field(None)
    country: Optional[str] = Field(None)
    region: Optional[str] = Field(None)
    city: Optional[str] = Field(None)
    timezone: Optional[str] = Field(None)
    device_type: Optional[str] = Field(None)
    os: Optional[str] = Field(None)
    browser: Optional[str] = Field(None)
    screen_resolution: Optional[str] = Field(None)
    timestamp: datetime.datetime = Field(...)
    tenant_id: Optional[uuid.UUID] = Field(None)
    created_at: Optional[datetime.datetime] = Field(None)
    updated_at: Optional[datetime.datetime] = Field(None)


class Invoices(BaseModel):
    id: uuid.UUID = Field(...)
    tenant_id: uuid.UUID = Field(...)
    subscription_id: Optional[uuid.UUID] = Field(None)
    invoice_number: str = Field(...)
    status: str = Field(...)
    currency: str = Field(...)
    subtotal: float = Field(...)
    tax_amount: float = Field(...)
    discount_amount: float = Field(...)
    total_amount: float = Field(...)
    due_date: Optional[str] = Field(None)
    paid_at: Optional[datetime.datetime] = Field(None)
    items: Optional[dict] = Field(None)
    metadata: Optional[dict] = Field(None)
    created_at: Optional[datetime.datetime] = Field(None)
    updated_at: Optional[datetime.datetime] = Field(None)


class LlmsUsageLogs(BaseModel):
    id: uuid.UUID = Field(...)
    message_id: uuid.UUID = Field(...)
    user_id: uuid.UUID = Field(...)
    conversation_id: uuid.UUID = Field(...)
    llm_id: uuid.UUID = Field(...)
    workspace_id: Optional[uuid.UUID] = Field(None)
    input_tokens: int = Field(...)
    output_tokens: int = Field(...)
    total_tokens: int = Field(...)
    cost_usd: float = Field(...)
    latency_ms: Optional[int] = Field(None)
    api_status_code: Optional[int] = Field(None)
    api_request_payload: Optional[dict] = Field(None)
    api_response_metadata: Optional[dict] = Field(None)
    user_api_key_used: Optional[bool] = Field(None)
    model_settings: Optional[dict] = Field(None)
    error_message: Optional[str] = Field(None)
    status: Optional[str] = Field(None)
    created_at: datetime.datetime = Field(...)
    tenant_id: Optional[uuid.UUID] = Field(None)
    updated_at: Optional[datetime.datetime] = Field(None)


class MessageFeedbacks(BaseModel):
    id: uuid.UUID = Field(...)
    message_id: uuid.UUID = Field(...)
    user_id: uuid.UUID = Field(...)
    rating_type: str = Field(...)
    rating_value: Optional[int] = Field(None)
    feedback_text: Optional[str] = Field(None)
    feedback_category: Optional[str] = Field(None)
    improvement_suggestions: Optional[str] = Field(None)
    is_public: Optional[bool] = Field(None)
    feedback_metadata: Optional[dict] = Field(None)
    created_at: datetime.datetime = Field(...)
    updated_at: datetime.datetime = Field(...)
    tenant_id: Optional[uuid.UUID] = Field(None)


class NodeExecutions(BaseModel):
    id: int = Field(...)
    execution_id: Optional[str] = Field(None)
    workflow_execution_id: uuid.UUID = Field(...)
    node_id: uuid.UUID = Field(...)
    node_key: str = Field(...)
    node_type: str = Field(...)
    node_name: Optional[str] = Field(None)
    execution_order: int = Field(...)
    input_data: Optional[dict] = Field(None)
    output_data: Optional[dict] = Field(None)
    config_data: Optional[dict] = Field(None)
    started_at: Optional[datetime.datetime] = Field(None)
    completed_at: Optional[datetime.datetime] = Field(None)
    timeout_at: Optional[datetime.datetime] = Field(None)
    duration_ms: Optional[int] = Field(None)
    execution_log: Optional[str] = Field(None)
    error_message: Optional[str] = Field(None)
    error_details: Optional[dict] = Field(None)
    debug_info: Optional[dict] = Field(None)
    retry_count: Optional[int] = Field(None)
    max_retries: Optional[int] = Field(None)
    retry_delay: Optional[int] = Field(None)
    dependencies: Optional[dict] = Field(None)
    dependents: Optional[dict] = Field(None)
    metadata: Optional[dict] = Field(None)
    created_at: Optional[datetime.datetime] = Field(None)
    updated_at: Optional[datetime.datetime] = Field(None)
    tenant_id: Optional[uuid.UUID] = Field(None)


class ProjectVersions(BaseModel):
    id: uuid.UUID = Field(...)
    project_id: uuid.UUID = Field(...)
    user_id: uuid.UUID = Field(...)
    version_number: int = Field(...)
    version_name: Optional[str] = Field(None)
    description: Optional[str] = Field(None)
    workflow_data: dict = Field(...)
    changes_summary: Optional[dict] = Field(None)
    file_size: Optional[int] = Field(None)
    checksum: Optional[str] = Field(None)
    is_major: bool = Field(...)
    is_auto_save: bool = Field(...)
    created_at: datetime.datetime = Field(...)
    tenant_id: Optional[uuid.UUID] = Field(None)
    updated_at: Optional[datetime.datetime] = Field(None)


class TemplateDownloads(BaseModel):
    id: int = Field(...)
    template_id: uuid.UUID = Field(...)
    user_id: uuid.UUID = Field(...)
    download_type: Optional[str] = Field(None)
    ip_address: Optional[str] = Field(None)
    user_agent: Optional[str] = Field(None)
    template_version: Optional[str] = Field(None)
    downloaded_at: Optional[datetime.datetime] = Field(None)
    tenant_id: Optional[uuid.UUID] = Field(None)
    created_at: Optional[datetime.datetime] = Field(None)
    updated_at: Optional[datetime.datetime] = Field(None)


class TemplateFavorites(BaseModel):
    id: int = Field(...)
    template_id: uuid.UUID = Field(...)
    user_id: uuid.UUID = Field(...)
    notes: Optional[str] = Field(None)
    created_at: Optional[datetime.datetime] = Field(None)
    tenant_id: Optional[uuid.UUID] = Field(None)
    updated_at: Optional[datetime.datetime] = Field(None)


class TemplateReviews(BaseModel):
    id: int = Field(...)
    template_id: uuid.UUID = Field(...)
    user_id: uuid.UUID = Field(...)
    rating: int = Field(...)
    title: Optional[str] = Field(None)
    comment: Optional[str] = Field(None)
    ease_of_use: Optional[int] = Field(None)
    documentation_quality: Optional[int] = Field(None)
    performance: Optional[int] = Field(None)
    value_for_money: Optional[int] = Field(None)
    is_verified_purchase: Optional[bool] = Field(None)
    is_helpful_count: Optional[int] = Field(None)
    is_reported: Optional[bool] = Field(None)
    version_reviewed: Optional[str] = Field(None)
    created_at: Optional[datetime.datetime] = Field(None)
    updated_at: Optional[datetime.datetime] = Field(None)
    tenant_id: Optional[uuid.UUID] = Field(None)


class TemplateUsage(BaseModel):
    id: int = Field(...)
    template_id: uuid.UUID = Field(...)
    user_id: uuid.UUID = Field(...)
    workflow_id: Optional[uuid.UUID] = Field(None)
    usage_type: str = Field(...)
    success: Optional[bool] = Field(None)
    template_version: Optional[str] = Field(None)
    modifications_made: Optional[dict] = Field(None)
    execution_time: Optional[int] = Field(None)
    ip_address: Optional[str] = Field(None)
    user_agent: Optional[str] = Field(None)
    used_at: Optional[datetime.datetime] = Field(None)
    tenant_id: Optional[uuid.UUID] = Field(None)
    created_at: Optional[datetime.datetime] = Field(None)
    updated_at: Optional[datetime.datetime] = Field(None)


class WorkflowConnections(BaseModel):
    id: uuid.UUID = Field(...)
    workflow_id: uuid.UUID = Field(...)
    source_node_id: uuid.UUID = Field(...)
    target_node_id: uuid.UUID = Field(...)
    source_port: Optional[str] = Field(None)
    target_port: Optional[str] = Field(None)
    created_at: Optional[datetime.datetime] = Field(None)
    tenant_id: Optional[uuid.UUID] = Field(None)
    updated_at: Optional[datetime.datetime] = Field(None)


class WorkflowExecutionQueue(BaseModel):
    id: int = Field(...)
    queue_id: Optional[str] = Field(None)
    workflow_execution_id: uuid.UUID = Field(...)
    user_id: uuid.UUID = Field(...)
    priority: Optional[int] = Field(None)
    scheduled_at: Optional[datetime.datetime] = Field(None)
    started_at: Optional[datetime.datetime] = Field(None)
    completed_at: Optional[datetime.datetime] = Field(None)
    status: Optional[str] = Field(None)
    worker_id: Optional[str] = Field(None)
    max_execution_time: Optional[int] = Field(None)
    retry_count: Optional[int] = Field(None)
    max_retries: Optional[int] = Field(None)
    meta_data: Optional[dict] = Field(None)
    created_at: Optional[datetime.datetime] = Field(None)
    updated_at: Optional[datetime.datetime] = Field(None)
    tenant_id: Optional[uuid.UUID] = Field(None)


class BillingEvents(BaseModel):
    id: uuid.UUID = Field(...)
    user_id: uuid.UUID = Field(...)
    workspace_id: Optional[uuid.UUID] = Field(None)
    event_type: str = Field(...)
    amount_usd: float = Field(...)
    description: Optional[str] = Field(None)
    related_usage_log_id: Optional[uuid.UUID] = Field(None)
    related_message_id: Optional[uuid.UUID] = Field(None)
    invoice_id: Optional[str] = Field(None)
    payment_provider: Optional[str] = Field(None)
    payment_transaction_id: Optional[str] = Field(None)
    billing_metadata: Optional[dict] = Field(None)
    status: Optional[str] = Field(None)
    processed_at: Optional[datetime.datetime] = Field(None)
    created_at: datetime.datetime = Field(...)
    tenant_id: Optional[uuid.UUID] = Field(None)
    updated_at: Optional[datetime.datetime] = Field(None)
