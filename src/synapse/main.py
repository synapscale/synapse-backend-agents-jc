"""
Aplica√ß√£o principal do SynapScale Backend
Otimizada por Jos√© - O melhor Full Stack do mundo
Implementa as melhores pr√°ticas de seguran√ßa, performance e configura√ß√£o
"""
import asyncio
import logging
import time
from contextlib import asynccontextmanager
from fastapi import FastAPI, Request, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.trustedhost import TrustedHostMiddleware
from fastapi.responses import JSONResponse
import uvicorn

# Importa√ß√µes dos m√≥dulos internos
from src.synapse.config import settings
from src.synapse.database import engine, Base
from src.synapse.api.v1.router import api_router

# Configurar logging estruturado
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Avisos de configura√ß√£o com melhor formata√ß√£o
def check_configuration():
    """Verifica configura√ß√µes cr√≠ticas da aplica√ß√£o"""
    warnings = []
    
    if not hasattr(settings, 'SMTP_HOST') or not settings.SMTP_HOST:
        warnings.append("Configura√ß√£o SMTP necess√°ria para notifica√ß√µes por email")
    
    if not hasattr(settings, 'SECRET_KEY') or not settings.SECRET_KEY:
        warnings.append("SECRET_KEY deve ser configurada para seguran√ßa")
    
    if not hasattr(settings, 'DATABASE_URL') or not settings.DATABASE_URL:
        warnings.append("DATABASE_URL deve ser configurada")
    
    # Verificar configura√ß√£o de LLM
    llm_providers = ['OPENAI_API_KEY', 'ANTHROPIC_API_KEY', 'GOOGLE_API_KEY']
    if not any(hasattr(settings, provider) and getattr(settings, provider) for provider in llm_providers):
        warnings.append("Pelo menos um provedor LLM deve ser configurado")
    
    for warning in warnings:
        logger.warning(f"‚ö†Ô∏è  Configura√ß√£o: {warning}")
    
    if not warnings:
        logger.info("‚úÖ Todas as configura√ß√µes cr√≠ticas est√£o definidas")


@asynccontextmanager
async def lifespan(app: FastAPI):
    """Gerencia o ciclo de vida da aplica√ß√£o com tratamento robusto de erros"""
    # Startup
    logger.info("üöÄ Iniciando SynapScale Backend API...")
    
    # Verificar configura√ß√µes
    check_configuration()
    
    # Criar tabelas do banco de dados
    try:
        Base.metadata.create_all(bind=engine)
        logger.info("‚úÖ Tabelas do banco de dados criadas/verificadas com sucesso")
    except Exception as e:
        logger.error(f"‚ùå Erro ao criar tabelas do banco: {e}")
        raise
    
    # Verificar conectividade do banco
    try:
        from src.synapse.database import get_db
        db = next(get_db())
        db.execute("SELECT 1")
        db.close()
        logger.info("‚úÖ Conectividade com banco de dados verificada")
    except Exception as e:
        logger.error(f"‚ùå Erro de conectividade com banco: {e}")
        raise
    
    # Inicializar WebSocket Manager
    try:
        from src.synapse.core.websockets.manager import ConnectionManager
        websocket_manager = ConnectionManager()
        logger.info("‚úÖ WebSocket Manager inicializado")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è  WebSocket Manager n√£o dispon√≠vel: {e}")
        websocket_manager = None
    
    # Inicializar Engine de Execu√ß√£o
    try:
        from src.synapse.api.v1.endpoints.executions import initialize_execution_service
        await initialize_execution_service(websocket_manager)
        logger.info("üöÄ Engine de Execu√ß√£o de Workflows inicializada com sucesso")
    except Exception as e:
        logger.error(f"‚ùå Erro ao inicializar Engine de Execu√ß√£o: {e}")
        # N√£o falha o startup, mas registra o erro
    
    logger.info("üéâ SynapScale Backend iniciado com sucesso!")
    
    yield
    
    # Shutdown
    logger.info("üîÑ Finalizando SynapScale Backend...")
    
    # Finalizar Engine de Execu√ß√£o
    try:
        from src.synapse.api.v1.endpoints.executions import shutdown_execution_service
        await shutdown_execution_service()
        logger.info("‚úÖ Engine de Execu√ß√£o finalizada com sucesso")
    except Exception as e:
        logger.error(f"‚ùå Erro ao finalizar Engine de Execu√ß√£o: {e}")
    
    logger.info("‚úÖ SynapScale Backend finalizado com sucesso")


# Criar aplica√ß√£o FastAPI com configura√ß√£o otimizada
app = FastAPI(
    title="SynapScale Backend API",
    description="""
    üöÄ **SynapScale Backend API** - Plataforma de Automa√ß√£o com IA
    
    API robusta e escal√°vel para gerenciamento de workflows, agentes AI e automa√ß√µes.
    
    ## Funcionalidades Principais
    
    * **üîê Autentica√ß√£o**: Sistema completo de autentica√ß√£o e autoriza√ß√£o
    * **‚ö° Workflows**: Cria√ß√£o e execu√ß√£o de workflows de automa√ß√£o
    * **ü§ñ Agentes AI**: Integra√ß√£o com m√∫ltiplos provedores de IA
    * **üîó Nodes**: Componentes reutiliz√°veis para workflows
    * **üí¨ Conversas**: Hist√≥rico e gerenciamento de conversas
    * **üìÅ Arquivos**: Upload e gerenciamento de arquivos
    
    ## Seguran√ßa
    
    * Autentica√ß√£o JWT robusta
    * Valida√ß√£o de dados com Pydantic
    * Rate limiting implementado
    * CORS configurado adequadamente
    """,
    version="1.0.0",
    docs_url="/docs",
    redoc_url="/redoc",
    lifespan=lifespan,
    contact={
        "name": "SynapScale Team",
        "email": "support@synapscale.com",
    },
    license_info={
        "name": "MIT",
    },
)

# Middleware de seguran√ßa - Trusted Host
app.add_middleware(
    TrustedHostMiddleware, 
    allowed_hosts=["*"] if settings.DEBUG else ["synapscale.com", "*.synapscale.com", "localhost", "127.0.0.1"]
)

# Configurar CORS com seguran√ßa aprimorada
allowed_origins = ["*"] if settings.DEBUG else [
    "https://synapscale.com",
    "https://app.synapscale.com",
    "http://localhost:3000",
    "http://localhost:3001",
]

app.add_middleware(
    CORSMiddleware,
    allow_origins=allowed_origins,
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE", "PATCH", "OPTIONS"],
    allow_headers=["*"],
    expose_headers=["*"],
)

# Middleware de timing para performance monitoring
@app.middleware("http")
async def add_process_time_header(request: Request, call_next):
    """Adiciona header com tempo de processamento da requisi√ß√£o"""
    start_time = time.time()
    response = await call_next(request)
    process_time = time.time() - start_time
    response.headers["X-Process-Time"] = str(process_time)
    return response

# Middleware de logging para auditoria
@app.middleware("http")
async def log_requests(request: Request, call_next):
    """Log estruturado de todas as requisi√ß√µes"""
    start_time = time.time()
    
    # Log da requisi√ß√£o
    logger.info(
        f"üì• {request.method} {request.url.path} - "
        f"Client: {request.client.host if request.client else 'unknown'}"
    )
    
    response = await call_next(request)
    
    # Log da resposta
    process_time = time.time() - start_time
    logger.info(
        f"üì§ {request.method} {request.url.path} - "
        f"Status: {response.status_code} - "
        f"Time: {process_time:.3f}s"
    )
    
    return response

# Handler global de exce√ß√µes
@app.exception_handler(Exception)
async def global_exception_handler(request: Request, exc: Exception):
    """Handler global para exce√ß√µes n√£o tratadas"""
    logger.error(f"‚ùå Erro n√£o tratado: {str(exc)}", exc_info=True)
    
    return JSONResponse(
        status_code=500,
        content={
            "error": "Internal server error",
            "message": "Ocorreu um erro interno. Tente novamente mais tarde.",
            "request_id": id(request)
        }
    )

# Handler para HTTPException
@app.exception_handler(HTTPException)
async def http_exception_handler(request: Request, exc: HTTPException):
    """Handler para HTTPExceptions com logging"""
    logger.warning(f"‚ö†Ô∏è  HTTP {exc.status_code}: {exc.detail}")
    
    return JSONResponse(
        status_code=exc.status_code,
        content={
            "error": exc.detail,
            "status_code": exc.status_code
        }
    )

# Incluir routers da API
app.include_router(api_router, prefix="/api/v1")

# Endpoint de health check aprimorado
@app.get("/health", tags=["health"])
async def health_check():
    """
    Endpoint para verifica√ß√£o de sa√∫de da API
    Inclui verifica√ß√µes de componentes cr√≠ticos
    """
    health_status = {
        "status": "healthy",
        "service": "synapscale-backend",
        "version": "1.0.0",
        "timestamp": time.time(),
        "components": {
            "database": "healthy",
            "api": "healthy"
        }
    }
    
    # Verificar banco de dados
    try:
        from src.synapse.database import get_db
        db = next(get_db())
        db.execute("SELECT 1")
        db.close()
        health_status["components"]["database"] = "healthy"
    except Exception as e:
        logger.error(f"‚ùå Health check - Banco de dados: {e}")
        health_status["components"]["database"] = "unhealthy"
        health_status["status"] = "degraded"
    
    return health_status

# Endpoint raiz aprimorado
@app.get("/", tags=["root"])
async def root():
    """
    Endpoint raiz da API com informa√ß√µes √∫teis
    """
    return {
        "message": "üöÄ SynapScale Backend API",
        "version": "1.0.0",
        "status": "running",
        "documentation": {
            "swagger": "/docs",
            "redoc": "/redoc"
        },
        "endpoints": {
            "health": "/health",
            "api": "/api/v1"
        },
        "features": [
            "Autentica√ß√£o JWT",
            "Workflows de Automa√ß√£o",
            "Agentes AI",
            "Gerenciamento de Arquivos",
            "Hist√≥rico de Conversas"
        ]
    }

# Endpoint de informa√ß√µes da API
@app.get("/info", tags=["info"])
async def api_info():
    """
    Informa√ß√µes detalhadas sobre a API
    """
    return {
        "name": "SynapScale Backend API",
        "version": "1.0.0",
        "description": "Plataforma de Automa√ß√£o com IA",
        "author": "Jos√© - O melhor Full Stack do mundo",
        "endpoints_count": len([route for route in app.routes]),
        "features": {
            "authentication": "JWT com refresh tokens",
            "workflows": "Execu√ß√£o de workflows complexos",
            "ai_integration": "M√∫ltiplos provedores de IA",
            "file_management": "Upload e processamento de arquivos",
            "real_time": "WebSockets para atualiza√ß√µes em tempo real"
        },
        "security": {
            "cors": "Configurado",
            "trusted_hosts": "Implementado",
            "rate_limiting": "Planejado",
            "input_validation": "Pydantic schemas"
        }
    }


if __name__ == "__main__":
    # Configura√ß√£o otimizada para desenvolvimento
    uvicorn.run(
        "src.synapse.main:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
        reload_dirs=["src"],
        log_level="info",
        access_log=True
    )

