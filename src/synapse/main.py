"""
Aplica√ß√£o principal do SynapScale Backend
Otimizada por Jos√© - um desenvolvedor Full Stack
Implementa as melhores pr√°ticas de seguran√ßa, performance e configura√ß√£o
Conex√£o direta com PostgreSQL via SQLAlchemy
"""
import logging
import time
from contextlib import asynccontextmanager
from fastapi import FastAPI, Request, HTTPException, Depends
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.trustedhost import TrustedHostMiddleware
from fastapi.responses import JSONResponse
import uvicorn
from sqlalchemy.orm import Session
import os

from src.synapse.config import settings
from src.synapse.database import init_db, get_db, health_check
from src.synapse.api.v1.router import api_router

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def check_configuration():
    """Verifica configura√ß√µes cr√≠ticas da aplica√ß√£o"""
    warnings = []
    if not hasattr(settings, 'SMTP_HOST') or not settings.SMTP_HOST:
        warnings.append('Configura√ß√£o SMTP necess√°ria para notifica√ß√µes por email')
    if not hasattr(settings, 'SECRET_KEY') or not settings.SECRET_KEY:
        warnings.append('SECRET_KEY deve ser configurada para seguran√ßa')
    if not hasattr(settings, 'DATABASE_URL') or not settings.DATABASE_URL:
        warnings.append('DATABASE_URL deve ser configurada')
    llm_providers = ['OPENAI_API_KEY', 'ANTHROPIC_API_KEY', 'GOOGLE_API_KEY']
    if not any((hasattr(settings, provider) and getattr(settings, provider) for provider in llm_providers)):
        warnings.append('Pelo menos um provedor LLM deve ser configurado')
    for warning in warnings:
        logger.warning(f'‚ö†Ô∏è  Configura√ß√£o: {warning}')
    if not warnings:
        logger.info('‚úÖ Todas as configura√ß√µes cr√≠ticas est√£o definidas')

@asynccontextmanager
async def lifespan(app: FastAPI):
    """Gerencia o ciclo de vida da aplica√ß√£o com tratamento robusto de erros"""
    logger.info('üöÄ Iniciando SynapScale Backend API...')
    check_configuration()
    try:
        init_db()
        logger.info('‚úÖ Conectado ao banco de dados PostgreSQL via SQLAlchemy')
    except Exception as e:
        logger.error(f'‚ùå Erro ao conectar ao banco de dados: {e}')
        raise
    try:
        if health_check():
            logger.info('‚úÖ Conectividade com banco de dados verificada')
        else:
            logger.error('‚ùå Falha na verifica√ß√£o de conectividade com o banco')
            raise Exception("Falha na verifica√ß√£o de conectividade com o banco")
    except Exception as e:
        logger.error(f'‚ùå Erro de conectividade com banco: {e}')
        raise
    try:
        from src.synapse.core.websockets.manager import ConnectionManager
        websocket_manager = ConnectionManager()
        logger.info('‚úÖ WebSocket Manager inicializado')
    except Exception as e:
        logger.warning(f'‚ö†Ô∏è  WebSocket Manager n√£o dispon√≠vel: {e}')
        websocket_manager = None
    try:
        from src.synapse.api.v1.endpoints.executions import initialize_execution_service
        await initialize_execution_service(websocket_manager)
        logger.info('üöÄ Engine de Execu√ß√£o de Workflows inicializada com sucesso')
    except Exception as e:
        logger.error(f'‚ùå Erro ao inicializar Engine de Execu√ß√£o: {e}')
    logger.info('üéâ SynapScale Backend iniciado com sucesso!')
    yield
    logger.info('üîÑ Finalizando SynapScale Backend...')
    try:
        from src.synapse.api.v1.endpoints.executions import shutdown_execution_service
        await shutdown_execution_service()
        logger.info('‚úÖ Engine de Execu√ß√£o finalizada com sucesso')
    except Exception as e:
        logger.error(f'‚ùå Erro ao finalizar Engine de Execu√ß√£o: {e}')
    logger.info('‚úÖ SynapScale Backend finalizado com sucesso')

app = FastAPI(
    title='SynapScale Backend API', 
    description='\n    üöÄ **SynapScale Backend API** - Plataforma de Automa√ß√£o com IA\n    \n    API robusta e escal√°vel para gerenciamento de workflows, agentes AI e automa√ß√µes.\n    \n    ## Funcionalidades Principais\n    \n    * **üîê Autentica√ß√£o**: Sistema completo de autentica√ß√£o e autoriza√ß√£o\n    * **‚ö° Workflows**: Cria√ß√£o e execu√ß√£o de workflows de automa√ß√£o\n    * **ü§ñ Agentes AI**: Integra√ß√£o com m√∫ltiplos provedores de IA\n    * **üîó Nodes**: Componentes reutiliz√°veis para workflows\n    * **üí¨ Conversas**: Hist√≥rico e gerenciamento de conversas\n    * **üìÅ Arquivos**: Upload e gerenciamento de arquivos\n    \n    ## Seguran√ßa\n    \n    * Autentica√ß√£o JWT robusta\n    * Valida√ß√£o de dados com Pydantic\n    * Rate limiting implementado\n    * CORS configurado adequadamente\n    ', 
    version='1.0.0', 
    docs_url='/docs', 
    redoc_url='/redoc', 
    lifespan=lifespan, 
    contact={'name': 'SynapScale Team', 'email': 'support@synapscale.com'}, 
    license_info={'name': 'MIT'}
)

# Configura√ß√£o CORS otimizada para desenvolvimento e produ√ß√£o
allowed_origins = [
    'http://localhost:3000',  # Frontend Next.js desenvolvimento
    'http://localhost:3001',  # Frontend alternativo
    'http://127.0.0.1:3000',  # Localhost alternativo
    'https://synapscale.com',  # Produ√ß√£o
    'https://app.synapscale.com',  # App produ√ß√£o
    'https://*.synapscale.com',  # Subdom√≠nios
] if not settings.DEBUG else ['*']

app.add_middleware(
    CORSMiddleware,
    allow_origins=allowed_origins,
    allow_credentials=True,
    allow_methods=['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS', 'HEAD'],
    allow_headers=[
        'Accept',
        'Accept-Language',
        'Content-Language',
        'Content-Type',
        'Authorization',
        'X-Requested-With',
        'X-CSRF-Token',
        'X-API-Key',
    ],
    expose_headers=[
        'X-Process-Time',
        'X-Request-ID',
        'X-Rate-Limit-Remaining',
        'X-Rate-Limit-Reset',
    ],
    max_age=86400,  # 24 horas para preflight cache
)

@app.middleware('http')
async def add_security_headers(request: Request, call_next):
    """Adiciona headers de seguran√ßa"""
    response = await call_next(request)
    
    # Headers de seguran√ßa
    response.headers['X-Content-Type-Options'] = 'nosniff'
    response.headers['X-Frame-Options'] = 'DENY'
    response.headers['X-XSS-Protection'] = '1; mode=block'
    response.headers['Referrer-Policy'] = 'strict-origin-when-cross-origin'
    response.headers['Permissions-Policy'] = 'geolocation=(), microphone=(), camera=()'
    
    # Content Security Policy para desenvolvimento
    if settings.DEBUG:
        response.headers['Content-Security-Policy'] = "default-src 'self' 'unsafe-inline' 'unsafe-eval' *"
    
    return response

@app.middleware('http')
async def add_process_time_header(request: Request, call_next):
    """Adiciona header com tempo de processamento da requisi√ß√£o"""
    start_time = time.time()
    response = await call_next(request)
    process_time = time.time() - start_time
    response.headers['X-Process-Time'] = str(process_time)
    return response

@app.middleware('http')
async def log_requests(request: Request, call_next):
    """Log estruturado de todas as requisi√ß√µes"""
    start_time = time.time()
    logger.info(f"üì• {request.method} {request.url.path} - Client: {(request.client.host if request.client else 'unknown')}")
    response = await call_next(request)
    process_time = time.time() - start_time
    logger.info(f'üì§ {request.method} {request.url.path} - Status: {response.status_code} - Time: {process_time:.3f}s')
    return response

@app.exception_handler(Exception)
async def global_exception_handler(request: Request, exc: Exception):
    """Handler global para exce√ß√µes n√£o tratadas"""
    logger.error(f'‚ùå Erro n√£o tratado: {str(exc)}', exc_info=True)
    return JSONResponse(status_code=500, content={'error': 'Internal server error', 'message': 'Ocorreu um erro interno. Tente novamente mais tarde.', 'request_id': id(request)})

@app.exception_handler(HTTPException)
async def http_exception_handler(request: Request, exc: HTTPException):
    """Handler para HTTPExceptions com logging"""
    logger.warning(f'‚ö†Ô∏è  HTTP {exc.status_code}: {exc.detail}')
    return JSONResponse(status_code=exc.status_code, content={'error': exc.detail, 'status_code': exc.status_code})

app.include_router(api_router, prefix='/api/v1')

@app.get('/health', tags=['health'])
async def health_check_endpoint(db: Session = Depends(get_db)):
    """
    Endpoint para verifica√ß√£o de sa√∫de da API
    Inclui verifica√ß√µes de componentes cr√≠ticos
    """
    DATABASE_SCHEMA = os.getenv("DATABASE_SCHEMA", "synapscale_db")
    
    health_status = {
        'status': 'healthy',
        'service': 'synapscale-backend',
        'version': '1.0.0',
        'timestamp': time.time(),
        'uptime': time.time(),
        'components': {
            'database': 'healthy',
            'api': 'healthy',
            'cors': 'configured',
            'auth': 'available'
        },
        'environment': 'development' if settings.DEBUG else 'production'
    }
    
    try:
        # Verificar conex√£o com o banco
        from sqlalchemy import text
        result = db.execute(text(f"SELECT COUNT(*) FROM {DATABASE_SCHEMA}.users"))
        count = result.scalar()
        health_status['components']['database'] = 'healthy'
        health_status['components']['database_count'] = count
    except Exception as e:
        logger.error(f'‚ùå Health check - Banco de dados: {e}')
        health_status['components']['database'] = 'unhealthy'
        health_status['status'] = 'degraded'
    
    # Verificar se endpoints cr√≠ticos est√£o dispon√≠veis
    try:
        health_status['components']['endpoints'] = {
            'auth': '/api/v1/auth',
            'variables': '/api/v1/variables',
            'workflows': '/api/v1/workflows',
            'chat': '/api/v1/chat'
        }
    except Exception as e:
        logger.error(f'‚ùå Health check - Endpoints: {e}')
        health_status['components']['endpoints'] = 'error'
    
    return health_status

@app.get('/', tags=['root'])
async def root():
    """
    Endpoint raiz da API com informa√ß√µes √∫teis
    """
    return {
        'message': 'üöÄ SynapScale Backend API', 
        'version': '1.0.0', 
        'status': 'running', 
        'documentation': {'swagger': '/docs', 'redoc': '/redoc'}, 
        'endpoints': {'health': '/health', 'api': '/api/v1'}, 
        'features': [
            'Autentica√ß√£o JWT', 
            'Workflows de Automa√ß√£o', 
            'Agentes AI', 
            'Gerenciamento de Arquivos', 
            'Hist√≥rico de Conversas'
        ]
    }

@app.get('/info', tags=['info'])
async def api_info():
    """
    Informa√ß√µes detalhadas sobre a API
    """
    return {
        'name': 'SynapScale Backend API', 
        'version': '1.0.0', 
        'description': 'Plataforma de Automa√ß√£o com IA', 
        'author': 'Jos√© - um desenvolvedor Full Stack', 
        'endpoints_count': len([route for route in app.routes]), 
        'features': {
            'authentication': 'JWT com refresh tokens', 
            'workflows': 'Execu√ß√£o de workflows complexos', 
            'ai_integration': 'M√∫ltiplos provedores de IA', 
            'file_management': 'Upload e processamento de arquivos', 
            'real_time': 'WebSockets para atualiza√ß√µes em tempo real'
        }, 
        'security': {
            'cors': 'Configurado', 
            'trusted_hosts': 'Implementado', 
            'rate_limiting': 'Planejado', 
            'input_validation': 'Pydantic schemas'
        }, 
        'database': 'PostgreSQL com SQLAlchemy'
    }

if __name__ == '__main__':
    uvicorn.run('src.synapse.main:app', host='0.0.0.0', port=8000, reload=True, reload_dirs=['src'], log_level='info', access_log=True)

