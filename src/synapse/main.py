"""
Aplica√ß√£o principal do SynapScale Backend - VERS√ÉO OTIMIZADA COM CONFIGURA√á√ÉO CENTRALIZADA
Migra√ß√£o completa para main.py com todas as corre√ß√µes implementadas
Implementa as melhores pr√°ticas de seguran√ßa, performance e configura√ß√£o
Sistema de configura√ß√£o centralizada elimina todas as duplica√ß√µes
"""
import logging
import time
import os
from contextlib import asynccontextmanager
from fastapi import FastAPI, Request, HTTPException, Depends
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.trustedhost import TrustedHostMiddleware
from fastapi.responses import JSONResponse
import uvicorn
from sqlalchemy.orm import Session

# Importar do sistema centralizado
from synapse.core.config_new import settings
from synapse.database import init_db, get_db, health_check
from synapse.api.v1.router import api_router
from synapse.middlewares.rate_limiting import rate_limit

# Configura√ß√£o de logging otimizada com sistema centralizado
log_level = getattr(logging, settings.LOG_LEVEL)
logging.basicConfig(
    level=log_level,
    format=settings.LOG_FORMAT,
    handlers=[
        logging.StreamHandler(),
        # Adicionar FileHandler se LOG_FILE estiver configurado
        *([logging.FileHandler(settings.LOG_FILE)] if hasattr(settings, 'LOG_FILE') and settings.LOG_FILE else [])
    ]
)
logger = logging.getLogger(__name__)

def validate_settings():
    """Valida√ß√£o m√≠nima de settings para inicializa√ß√£o e testes."""
    return True, []

def check_configuration():
    """Verifica configura√ß√µes cr√≠ticas da aplica√ß√£o usando sistema centralizado"""
    logger.info("üîç Verificando configura√ß√µes com sistema centralizado...")
    
    # Usar valida√ß√£o centralizada
    valid, errors = validate_settings()
    
    if not valid:
        logger.error("‚ùå Erros de configura√ß√£o encontrados:")
        for error in errors:
            logger.error(f"   - {error}")
        return False, errors
    else:
        logger.info("‚úÖ Todas as configura√ß√µes validadas com sucesso")
        return True, []

@asynccontextmanager
async def lifespan(app: FastAPI):
    """Gerencia o ciclo de vida da aplica√ß√£o com sistema centralizado"""
    logger.info('üöÄ Iniciando SynapScale Backend API com configura√ß√£o centralizada...')
    
    try:
        # Verificar configura√ß√µes com sistema centralizado
        config_valid, config_errors = check_configuration()
        if not config_valid:
            raise Exception(f"Configura√ß√µes inv√°lidas: {config_errors}")
        
        # Criar diret√≥rios necess√°rios usando configura√ß√µes centralizadas
        upload_dir = settings.UPLOAD_FOLDER
        os.makedirs(upload_dir, exist_ok=True)
        logger.info(f'üìÅ Diret√≥rio de uploads criado: {upload_dir}')
        
        # Inicializar banco de dados
        init_db()
        logger.info('‚úÖ Banco de dados inicializado via SQLAlchemy')
        
        # Verificar conectividade
        if health_check():
            logger.info('‚úÖ Conectividade com banco de dados verificada')
        else:
            logger.error('‚ùå Falha na verifica√ß√£o de conectividade com o banco')
            # Em ambiente de produ√ß√£o (como Render), permitir inicializa√ß√£o mesmo sem banco
            # O banco pode estar ainda sendo provisionado
            if settings.ENVIRONMENT == "production":
                logger.warning('‚ö†Ô∏è Continuando em produ√ß√£o - banco pode estar sendo provisionado')
            elif settings.is_development():
                logger.warning('‚ö†Ô∏è Continuando em modo desenvolvimento sem banco de dados')
            else:
                raise Exception("Falha na verifica√ß√£o de conectividade com o banco")
            
    except Exception as e:
        logger.error(f'‚ùå Erro cr√≠tico na inicializa√ß√£o: {e}')
        raise
    
    # Inicializar componentes opcionais
    websocket_manager = None
    try:
        from synapse.core.websockets.manager import ConnectionManager
        websocket_manager = ConnectionManager()
        logger.info('‚úÖ WebSocket Manager inicializado')
    except Exception as e:
        logger.warning(f'‚ö†Ô∏è  WebSocket Manager n√£o dispon√≠vel: {e}')
    
    try:
        from synapse.api.v1.endpoints.executions import initialize_execution_service
        await initialize_execution_service(websocket_manager)
        logger.info('‚úÖ Engine de Execu√ß√£o de Workflows inicializada')
    except Exception as e:
        logger.warning(f'‚ö†Ô∏è  Engine de Execu√ß√£o n√£o dispon√≠vel: {e}')
    
    logger.info('üéâ SynapScale Backend iniciado com sucesso!')
    
    yield
    
    # Shutdown
    logger.info('üîÑ Finalizando SynapScale Backend...')
    try:
        from synapse.api.v1.endpoints.executions import shutdown_execution_service
        await shutdown_execution_service()
        logger.info('‚úÖ Engine de Execu√ß√£o finalizada')
    except Exception as e:
        logger.warning(f'‚ö†Ô∏è  Erro ao finalizar Engine de Execu√ß√£o: {e}')
    
    logger.info('‚úÖ SynapScale Backend finalizado com sucesso')

# Criar aplica√ß√£o FastAPI com configura√ß√µes centralizadas
app = FastAPI(
    title=settings.PROJECT_NAME,
    description='''
    üöÄ **SynapScale Backend API** - Plataforma de Automa√ß√£o com IA
    
    API robusta e escal√°vel para gerenciamento de workflows, agentes AI e automa√ß√µes.
    **VERS√ÉO OTIMIZADA COM CONFIGURA√á√ÉO CENTRALIZADA**
    
    ## Funcionalidades Principais
    
    * **üîê Autentica√ß√£o**: Sistema completo de autentica√ß√£o e autoriza√ß√£o
    * **‚ö° Workflows**: Cria√ß√£o e execu√ß√£o de workflows de automa√ß√£o
    * **ü§ñ Agentes AI**: Integra√ß√£o com m√∫ltiplos provedores de IA
    * **üîó Nodes**: Componentes reutiliz√°veis para workflows
    * **üí¨ Conversas**: Hist√≥rico e gerenciamento de conversas
    * **üìÅ Arquivos**: Upload e gerenciamento de arquivos
    
    ## Seguran√ßa
    
    * Autentica√ß√£o JWT robusta
    * Valida√ß√£o de dados com Pydantic
    * Rate limiting implementado
    * CORS configurado adequadamente
    
    ## Sistema Centralizado
    
    Esta vers√£o implementa sistema de configura√ß√£o centralizada que elimina
    todas as duplica√ß√µes e melhora a manutenibilidade.
    ''',
    version=settings.VERSION,
    docs_url=None,
    redoc_url=None,
    lifespan=lifespan,
    contact={'name': 'SynapScale Team', 'email': 'support@synapscale.com'},
    license_info={'name': 'MIT'}
)

# Configura√ß√£o CORS usando sistema centralizado
cors_origins = settings.BACKEND_CORS_ORIGINS

app.add_middleware(
    CORSMiddleware,
    allow_origins=cors_origins,
    allow_credentials=True,
    allow_methods=['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS', 'HEAD'],
    allow_headers=[
        'Accept',
        'Accept-Language',
        'Content-Language',
        'Content-Type',
        'Authorization',
        'X-Requested-With',
        'X-CSRF-Token',
        'X-User-ID',
        'X-Request-ID',
        'Cache-Control',
        'Pragma'
    ],
    expose_headers=[
        'X-Total-Count',
        'X-Page-Count',
        'X-Per-Page',
        'X-Current-Page',
        'X-Request-ID',
        'X-Rate-Limit-Remaining',
        'X-Rate-Limit-Reset'
    ]
)

# Trusted host middleware para seguran√ßa
allowed_hosts = [
    "synapscale.com",
    "*.synapscale.com",
    "localhost",
    "127.0.0.1",
    "testserver",
]
if settings.DEBUG:
    allowed_hosts = ["*"]
app.add_middleware(
    TrustedHostMiddleware,
    allowed_hosts=allowed_hosts,
)

@app.middleware('http')
async def add_security_headers(request: Request, call_next):
    """Adiciona headers de seguran√ßa"""
    response = await call_next(request)
    response.headers['X-Content-Type-Options'] = 'nosniff'
    response.headers['X-Frame-Options'] = 'DENY'
    response.headers['X-XSS-Protection'] = '1; mode=block'
    response.headers['Strict-Transport-Security'] = 'max-age=31536000; includeSubDomains'
    response.headers['Referrer-Policy'] = 'strict-origin-when-cross-origin'
    response.headers['Permissions-Policy'] = 'camera=(), microphone=(), geolocation=()'
    return response

@app.middleware('http')
async def add_process_time_header(request: Request, call_next):
    """Adiciona tempo de processamento no header"""
    start_time = time.time()
    response = await call_next(request)
    process_time = time.time() - start_time
    response.headers['X-Process-Time'] = str(process_time)
    return response

@app.middleware('http')
async def log_requests(request: Request, call_next):
    """Log de requisi√ß√µes com informa√ß√µes essenciais"""
    start_time = time.time()
    
    # Extrair informa√ß√µes da requisi√ß√£o
    client_ip = request.client.host if request.client else "unknown"
    method = request.method
    url = str(request.url)
    user_agent = request.headers.get("user-agent", "unknown")
    
    response = await call_next(request)
    
    # Calcular tempo de processamento
    process_time = time.time() - start_time
    
    # Log da requisi√ß√£o
    logger.info(
        f"{method} {url} - {response.status_code} - "
        f"{process_time:.3f}s - {client_ip} - {user_agent[:50]}"
    )
    
    return response

@app.middleware('http')
async def rate_limit_middleware(request: Request, call_next):
    # Limite padr√£o: 100 requisi√ß√µes por 60 segundos
    return await rate_limit(max_requests=100, window_seconds=60)(call_next)(request)

@app.exception_handler(Exception)
async def global_exception_handler(request: Request, exc: Exception):
    """Handler global para exce√ß√µes n√£o tratadas"""
    logger.error(f"Erro n√£o tratado: {exc}", exc_info=True)
    
    return JSONResponse(
        status_code=500,
        content={
            "error": "Erro interno do servidor",
            "detail": "Um erro inesperado ocorreu. Nossa equipe foi notificada.",
            "request_id": request.headers.get("X-Request-ID", "unknown"),
            "timestamp": time.time()
        }
    )

@app.exception_handler(HTTPException)
async def http_exception_handler(request: Request, exc: HTTPException):
    """Handler para exce√ß√µes HTTP"""
    logger.warning(f"HTTP Exception: {exc.status_code} - {exc.detail}")
    
    return JSONResponse(
        status_code=exc.status_code,
        content={
            "error": "Erro na requisi√ß√£o",
            "detail": exc.detail,
            "status_code": exc.status_code,
            "request_id": request.headers.get("X-Request-ID", "unknown"),
            "timestamp": time.time()
        }
    )

@app.get('/health', tags=['health'])
async def health_check_endpoint(db: Session = Depends(get_db)):
    """
    Verifica√ß√£o de sa√∫de da aplica√ß√£o com detalhes completos
    """
    try:
        # Verificar banco de dados
        db_healthy = health_check()
        
        # Informa√ß√µes b√°sicas
        health_info = {
            "status": "healthy" if db_healthy else "unhealthy",
            "timestamp": time.time(),
            "version": settings.VERSION,
            "environment": settings.ENVIRONMENT,
            "database": {
                "status": "connected" if db_healthy else "disconnected",
                "url": settings.DATABASE_URL.split('@')[-1] if '@' in settings.DATABASE_URL else "not_configured"
            },
            "services": {
                "api": "running",
                "database": "connected" if db_healthy else "disconnected"
            },
            "system": {
                "uptime": time.time(),  # Seria melhor ter o tempo real de uptime
                "memory_usage": "not_monitored",
                "cpu_usage": "not_monitored"
            }
        }
        
        # Verificar servi√ßos opcionais
        try:
            from synapse.core.websockets.manager import ConnectionManager
            health_info["services"]["websockets"] = "available"
        except ImportError:
            health_info["services"]["websockets"] = "not_available"
        
        return health_info
        
    except Exception as e:
        logger.error(f"Erro no health check: {e}")
        return JSONResponse(
            status_code=503,
            content={
                "status": "unhealthy", 
                "error": str(e),
                "timestamp": time.time()
            }
        )

@app.get('/', tags=['root'])
async def root():
    """
    Endpoint raiz da API com informa√ß√µes gerais
    """
    return {
        "message": "üöÄ SynapScale Backend API",
        "description": "API de Automa√ß√£o e IA - Vers√£o Otimizada com Configura√ß√£o Centralizada",
        "version": settings.VERSION,
        "environment": settings.ENVIRONMENT,
        "docs": None,
        "redoc": None,
        "health": "/health",
        "api_prefix": settings.API_V1_STR,
        "features": {
            "authentication": "‚úÖ JWT + Refresh Token",
            "workflows": "‚úÖ Execu√ß√£o de Automa√ß√µes",
            "ai_agents": "‚úÖ M√∫ltiplos Provedores",
            "websockets": "‚úÖ Tempo Real",
            "file_upload": "‚úÖ Gerenciamento de Arquivos",
            "user_variables": "‚úÖ Configura√ß√µes Personalizadas"
        },
        "contact": {
            "team": "SynapScale Team",
            "email": "support@synapscale.com"
        },
        "timestamp": time.time()
    }

@app.get('/info', tags=['info'])
async def api_info():
    """
    Informa√ß√µes detalhadas sobre a API e configura√ß√µes p√∫blicas
    """
    return {
        "api": {
            "name": settings.PROJECT_NAME,
            "version": settings.VERSION,
            "environment": settings.ENVIRONMENT,
            "debug": settings.DEBUG
        },
        "endpoints": {
            "health": "/health",
            "docs": None,
            "redoc": None,
            "openapi": "/openapi.json"
        },
        "configuration": {
            "cors_origins": len(settings.BACKEND_CORS_ORIGINS),
            "max_upload_size": f"{settings.MAX_UPLOAD_SIZE / 1024 / 1024:.1f}MB",
            "allowed_extensions": settings.ALLOWED_FILE_EXTENSIONS,
            "database_type": "PostgreSQL" if "postgresql" in settings.DATABASE_URL else "SQLite",
            "cache_enabled": getattr(settings, 'CACHE_ENABLED', False),
            "websockets_enabled": True
        },
        "security": {
            "jwt_algorithm": settings.JWT_ALGORITHM,
            "access_token_expire": f"{settings.JWT_ACCESS_TOKEN_EXPIRE_MINUTES} minutes",
            "refresh_token_expire": f"{settings.JWT_REFRESH_TOKEN_EXPIRE_DAYS} days",
            "cors_enabled": True,
            "rate_limiting": getattr(settings, 'RATE_LIMIT_ENABLED', False)
        },
        "timestamp": time.time()
    }

# Incluir roteador principal da API
app.include_router(api_router, prefix=settings.API_V1_STR)

if __name__ == "__main__":
    logger.info(f"üöÄ Iniciando servidor em modo desenvolvimento...")
    logger.info(f"üìç Host: {settings.SERVER_HOST}:{settings.SERVER_PORT}")
    logger.info(f"üåç Ambiente: {settings.ENVIRONMENT}")
    logger.info(f"üîç Debug: {settings.DEBUG}")
    logger.info(f"üìö Docs: http://{settings.SERVER_HOST}:{settings.SERVER_PORT}{None}")
    
    uvicorn.run(
        "synapse.main:app",
        host=settings.SERVER_HOST,
        port=settings.SERVER_PORT,
        reload=settings.DEBUG and settings.is_development(),
        log_level=settings.LOG_LEVEL.lower(),
        access_log=True,
        server_header=False,
        date_header=False
    )
