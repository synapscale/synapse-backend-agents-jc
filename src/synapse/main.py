"""Aplica√ß√£o principal do backend SynapScale.

Este m√≥dulo configura e inicializa a aplica√ß√£o FastAPI, incluindo
middlewares, rotas, documenta√ß√£o e ciclo de vida.
"""

import logging
import os
from contextlib import asynccontextmanager
from typing import Callable
from fastapi.staticfiles import StaticFiles
from fastapi import FastAPI, Request, Response
from fastapi.middleware.cors import CORSMiddleware
from fastapi.openapi.docs import get_redoc_html, get_swagger_ui_html
from fastapi.openapi.utils import get_openapi
from fastapi.responses import HTMLResponse

from .api.v1 import router as v1_router
from .config import settings
from .db import init_db
from .logging import setup_logging
from .middlewares import setup_rate_limiting

# Configurar logging
setup_logging()

# Logger
logger = logging.getLogger(__name__)


@asynccontextmanager
async def lifespan(app: FastAPI):
    """Gerencia o ciclo de vida da aplica√ß√£o.

    Args:
        app: Aplica√ß√£o FastAPI
    """
    # Startup
    logger.info("üöÄ Iniciando servi√ßo de uploads...")

    # Inicializar banco de dados
    await init_db()

    # Criar diret√≥rios necess√°rios
    os.makedirs(settings.STORAGE_BASE_PATH, exist_ok=True)
    for category in settings.ALLOWED_EXTENSIONS:
        os.makedirs(os.path.join(settings.STORAGE_BASE_PATH, category), exist_ok=True)

    logger.info("‚úÖ Servi√ßo de uploads inicializado com sucesso")

    yield

    # Shutdown
    logger.info("üëã Encerrando servi√ßo de uploads...")


# Criar aplica√ß√£o
app = FastAPI(
    title="SynapScale Backend API",
    description="""
API completa para integra√ß√£o com m√∫ltiplos provedores de LLM, gerenciamento de arquivos e processamento de dados.

## üìö Recursos Principais

* **Integra√ß√£o Multi-LLM**: Acesso unificado a diversos provedores de LLM (OpenAI, Claude, Gemini, etc.)
* **Gerenciamento de Arquivos**: Upload, download e manipula√ß√£o de arquivos
* **Processamento de Dados**: An√°lise e transforma√ß√£o de dados

## üîê Autentica√ß√£o

A API utiliza autentica√ß√£o via Bearer Token (JWT). Inclua o token no header `Authorization` de todas as requisi√ß√µes:

```
Authorization: Bearer seu_token_jwt
```

Para obter um token, utilize o endpoint de autentica√ß√£o.

## üöÄ Provedores LLM Suportados

| Provedor | Modelos Dispon√≠veis | Capacidades |
| --- | --- | --- |
| OpenAI | GPT-4o, GPT-4-turbo, GPT-3.5-turbo | Text, Vision, Function Calling |
| Claude | Claude 3 Opus, Sonnet, Haiku | Text, Vision, Reasoning |
| Gemini | Gemini 1.5 Pro, Flash | Text, Vision, Code |
| Llama | Llama 3 70B, 8B, Llama 2 70B | Text Generation |
| Grok | Grok-1 | Text, Function Calling |
| DeepSeek | DeepSeek Chat, Coder | Text, Code Generation |
| Tess | M√∫ltiplos via orquestra√ß√£o | Text, Reasoning |

## üìã Par√¢metros Comuns

* `prompt`: Texto de entrada para o modelo (obrigat√≥rio)
* `provider`: Provedor LLM a ser usado (opcional, padr√£o: openai)
* `model`: Modelo espec√≠fico do provedor (opcional)
* `temperature`: Controle de aleatoriedade (0.0-1.0, padr√£o: 0.7)
* `max_tokens`: Limite de tokens na resposta (padr√£o: 1000)

Consulte a documenta√ß√£o detalhada para mais informa√ß√µes sobre par√¢metros espec√≠ficos por provedor.
    """,
    version="1.0.0",
    docs_url=None,  # Desabilitar Swagger UI padr√£o
    redoc_url=None,  # Desabilitar ReDoc padr√£o
    lifespan=lifespan,
)

# Configurar CORS
origins = settings.BACKEND_CORS_ORIGINS
if origins:
    app.add_middleware(
        CORSMiddleware,
        allow_origins=origins,
        allow_credentials=True,
        allow_methods=["*"],
        allow_headers=["*"],
    )
    logger.info(f"CORS configurado com origens: {origins}")

# Configurar rate limiting
setup_rate_limiting(app)

# Montar arquivos est√°ticos
app.mount("/static", StaticFiles(directory="src/synapse/static"), name="static")


# Middleware para logging de requisi√ß√µes
@app.middleware("http")
async def log_requests(request: Request, call_next: Callable) -> Response:
    """Middleware para logging de requisi√ß√µes.

    Args:
        request: Requisi√ß√£o HTTP
        call_next: Pr√≥xima fun√ß√£o na cadeia de middlewares

    Returns:
        Resposta HTTP
    """
    path = request.url.path
    method = request.method

    # N√£o logar requisi√ß√µes de health check
    if path == "/health" or path == "/":
        return await call_next(request)

    logger.info(f"{method} {path}")

    # Processar requisi√ß√£o
    response = await call_next(request)

    logger.info(f"{method} {path} - {response.status_code}")
    return response


# Rotas de documenta√ß√£o personalizada
@app.get("/docs", include_in_schema=False)
async def custom_swagger_ui_html():
    """Endpoint para Swagger UI personalizado com CSS customizado.

    Returns:
        HTML do Swagger UI
    """
    swagger_ui_html = get_swagger_ui_html(
        openapi_url=app.openapi_url,
        title="SynapScale API - Documenta√ß√£o Interativa",
        oauth2_redirect_url=app.swagger_ui_oauth2_redirect_url,
        swagger_js_url="https://cdn.jsdelivr.net/npm/swagger-ui-dist@5/swagger-ui-bundle.js",
        swagger_css_url="https://cdn.jsdelivr.net/npm/swagger-ui-dist@5/swagger-ui.css",
    )
    
    # Converter para string para manipula√ß√£o
    content = swagger_ui_html.body.decode("utf-8")
    
    # Adicionar link para CSS customizado
    head_end = "</head>"
    custom_css = f'<link rel="stylesheet" type="text/css" href="/static/custom-swagger-ui.css">\n{head_end}'
    content = content.replace(head_end, custom_css)
    
    # Adicionar script para melhorar a experi√™ncia de usu√°rio
    body_end = "</body>"
    custom_script = """
    <script>
    // Aguardar carregamento completo do Swagger UI
    window.onload = function() {
        // Dar tempo para o Swagger UI renderizar completamente
        setTimeout(function() {
            // Corrigir cores dos exemplos de c√≥digo
            fixCodeExampleColors();
            
            // Melhorar visibilidade dos par√¢metros
            enhanceParameters();
            
            // Corrigir cores espec√≠ficas em elementos de autentica√ß√£o
            fixAuthColors();
            
            // Corrigir cores em par√¢metros comuns
            fixCommonParamsColors();
            
            // Observar mudan√ßas no DOM para aplicar melhorias em elementos din√¢micos
            observeDOMChanges();
        }, 1000);
    };
    
    // Corrigir cores dos exemplos de c√≥digo
    function fixCodeExampleColors() {
        // Selecionar todos os blocos de c√≥digo
        const codeBlocks = document.querySelectorAll('.microlight');
        
        codeBlocks.forEach(block => {
            // Garantir que o fundo seja escuro
            block.style.backgroundColor = '#1E1E1E';
            
            // Garantir que o texto seja vis√≠vel
            const allElements = block.querySelectorAll('*');
            allElements.forEach(el => {
                // Substituir qualquer cor roxa/rosa por preto
                const computedStyle = window.getComputedStyle(el);
                const color = computedStyle.color;
                
                // Verificar se a cor √© roxa/rosa (aproximadamente)
                if (color.includes('rgb(144, 18, 254)') || 
                    color.includes('#9012fe') || 
                    color.includes('#9012FE') ||
                    color.includes('rgb(128, 0, 128)') ||
                    color.includes('#800080') ||
                    color.includes('rgb(153, 0, 153)') ||
                    color.includes('#990099') ||
                    color.includes('rgb(102, 0, 204)') ||
                    color.includes('#6600cc') ||
                    color.includes('purple') ||
                    color.includes('magenta') ||
                    color.includes('violet')) {
                    el.style.color = '#000000';
                }
            });
            
            // Garantir que todos os spans dentro do bloco de c√≥digo tenham cor preta
            const textElements = block.querySelectorAll('span');
            textElements.forEach(span => {
                span.style.color = '#000000';
            });
        });
        
        // Selecionar especificamente exemplos de c√≥digo Python
        const pythonExamples = document.querySelectorAll('pre');
        pythonExamples.forEach(example => {
            const spans = example.querySelectorAll('span');
            spans.forEach(span => {
                span.style.color = '#000000';
            });
        });
    }
    
    // Melhorar visibilidade dos par√¢metros
    function enhanceParameters() {
        // Destacar par√¢metros obrigat√≥rios
        const requiredLabels = document.querySelectorAll('.parameter__name .required');
        requiredLabels.forEach(label => {
            label.style.color = '#FF0000';
            label.style.fontWeight = 'bold';
        });
        
        // Melhorar descri√ß√µes de par√¢metros
        const paramDescriptions = document.querySelectorAll('.parameter__description');
        paramDescriptions.forEach(desc => {
            desc.style.color = '#000000';
            desc.style.fontSize = '14px';
        });
        
        // Melhorar nomes de par√¢metros
        const paramNames = document.querySelectorAll('.parameter__name');
        paramNames.forEach(name => {
            name.style.color = '#000000';
            name.style.fontWeight = 'bold';
        });
        
        // Melhorar tipos de par√¢metros
        const paramTypes = document.querySelectorAll('.parameter__type');
        paramTypes.forEach(type => {
            type.style.color = '#666666';
        });
        
        // Melhorar exemplos de par√¢metros
        const paramExamples = document.querySelectorAll('.parameter__example');
        paramExamples.forEach(example => {
            example.style.color = '#000000';
            example.style.backgroundColor = '#f5f5f5';
            example.style.padding = '2px 5px';
            example.style.borderRadius = '3px';
            example.style.fontFamily = 'monospace';
        });
    }
    
    // Corrigir cores em elementos de autentica√ß√£o
    function fixAuthColors() {
        // Selecionar todos os elementos relacionados √† autentica√ß√£o
        const authElements = document.querySelectorAll('.auth-wrapper *');
        authElements.forEach(el => {
            // Verificar se √© um elemento de texto
            if (el.childNodes.length === 1 && el.childNodes[0].nodeType === 3) {
                el.style.color = '#000000';
            }
        });
        
        // Corrigir especificamente o texto "Authorization"
        const authTexts = document.querySelectorAll('*');
        authTexts.forEach(el => {
            if (el.textContent === 'Authorization' || 
                el.textContent.includes('Authorization:') || 
                el.textContent.includes('Bearer')) {
                el.style.color = '#000000';
            }
        });
    }
    
    // Corrigir cores em par√¢metros comuns
    function fixCommonParamsColors() {
        // Selecionar todos os elementos que podem conter par√¢metros comuns
        const paramElements = document.querySelectorAll('code, .parameter__name, .parameter__type, .parameter__in');
        paramElements.forEach(el => {
            el.style.color = '#000000';
        });
        
        // Corrigir especificamente os nomes dos par√¢metros comuns
        const commonParams = ['prompt', 'provider', 'model', 'temperature', 'max_tokens'];
        commonParams.forEach(param => {
            const paramElements = document.querySelectorAll('*');
            paramElements.forEach(el => {
                if (el.textContent === param) {
                    el.style.color = '#000000';
                }
            });
        });
    }
    
    // Observar mudan√ßas no DOM para aplicar melhorias em elementos din√¢micos
    function observeDOMChanges() {
        // Criar um observador de muta√ß√µes
        const observer = new MutationObserver(function(mutations) {
            mutations.forEach(function(mutation) {
                // Verificar se foram adicionados novos n√≥s
                if (mutation.addedNodes.length) {
                    // Corrigir cores dos exemplos de c√≥digo
                    fixCodeExampleColors();
                    
                    // Melhorar visibilidade dos par√¢metros
                    enhanceParameters();
                    
                    // Corrigir cores em elementos de autentica√ß√£o
                    fixAuthColors();
                    
                    // Corrigir cores em par√¢metros comuns
                    fixCommonParamsColors();
                }
            });
        });
        
        // Configurar o observador
        const config = { childList: true, subtree: true };
        
        // Iniciar a observa√ß√£o
        observer.observe(document.body, config);
    }
    
    // Aplicar estilos globais para garantir que n√£o haja texto roxo/rosa
    function applyGlobalStyles() {
        // Criar um elemento de estilo
        const style = document.createElement('style');
        style.type = 'text/css';
        style.innerHTML = `
            /* Garantir que n√£o haja texto roxo/rosa em nenhum lugar */
            .microlight span, 
            pre span, 
            code span, 
            .parameter__name, 
            .parameter__type, 
            .parameter__in, 
            .parameter__name code, 
            .info code, 
            .info .parameter__name, 
            .info .parameter__type, 
            .info .parameter__in {
                color: #000000 !important;
            }
            
            /* Garantir que elementos de autentica√ß√£o n√£o tenham cor roxa/rosa */
            .auth-wrapper *, 
            .auth-container * {
                color: #000000 !important;
            }
            
            /* Garantir que exemplos de c√≥digo n√£o tenham cor roxa/rosa */
            .example pre *, 
            .example code *, 
            .example .microlight * {
                color: #000000 !important;
            }
            
            /* Melhorar contraste no Request Body */
            .swagger-ui .model-example .example {
                background-color: #000000 !important;
            }
            
            .swagger-ui .model-example .example pre,
            .swagger-ui .model-example .example pre span {
                color: #FFFFFF !important;
            }
        `;
        
        // Adicionar o elemento de estilo ao head
        document.head.appendChild(style);
    }
    
    // Aplicar estilos globais
    applyGlobalStyles();
    </script>
    """
    content = content.replace(body_end, custom_script + body_end)
    
    return HTMLResponse(content=content)


@app.get("/redoc", include_in_schema=False)
async def redoc_html():
    """Endpoint para ReDoc.

    Returns:
        HTML do ReDoc
    """
    return get_redoc_html(
        openapi_url=app.openapi_url,
        title="SynapScale API - Documenta√ß√£o",
        redoc_js_url="https://cdn.jsdelivr.net/npm/redoc@next/bundles/redoc.standalone.js",
    )


# Customizar OpenAPI
def custom_openapi():
    """Customizar esquema OpenAPI.

    Returns:
        Esquema OpenAPI customizado
    """
    if app.openapi_schema:
        return app.openapi_schema

    openapi_schema = get_openapi(
        title=app.title,
        version=app.version,
        description=app.description,
        routes=app.routes,
    )

    # Adicionar componentes de seguran√ßa sem sobrescrever os schemas existentes
    if "components" not in openapi_schema:
        openapi_schema["components"] = {}
    
    # Preservar schemas existentes
    if "schemas" not in openapi_schema["components"]:
        openapi_schema["components"]["schemas"] = {}
    
    # Adicionar securitySchemes sem afetar outros componentes
    openapi_schema["components"]["securitySchemes"] = {
        "Bearer": {
            "type": "http",
            "scheme": "bearer",
            "bearerFormat": "JWT",
            "description": "Insira seu token JWT no formato: Bearer {token}",
        }
    }

    # Aplicar seguran√ßa globalmente
    openapi_schema["security"] = [{"Bearer": []}]

    # Adicionar exemplos e melhorar descri√ß√µes
    for path in openapi_schema["paths"]:
        for method in openapi_schema["paths"][path]:
            if method.lower() in ["get", "post", "put", "delete", "patch"]:
                # Garantir que todos os par√¢metros tenham descri√ß√µes claras
                if "parameters" in openapi_schema["paths"][path][method]:
                    for param in openapi_schema["paths"][path][method]["parameters"]:
                        if "description" not in param or not param["description"]:
                            param["description"] = f"Par√¢metro {param['name']}"
                
                # Garantir que todos os requestBody tenham exemplos e schemas corretos
                if "requestBody" in openapi_schema["paths"][path][method]:
                    if "content" in openapi_schema["paths"][path][method]["requestBody"]:
                        for content_type in openapi_schema["paths"][path][method]["requestBody"]["content"]:
                            # Verificar se h√° refer√™ncia a schema e corrigir se necess√°rio
                            if "schema" in openapi_schema["paths"][path][method]["requestBody"]["content"][content_type]:
                                schema = openapi_schema["paths"][path][method]["requestBody"]["content"][content_type]["schema"]
                                if "$ref" in schema:
                                    # Corrigir refer√™ncia se necess√°rio
                                    ref_path = schema["$ref"]
                                    if ref_path.startswith("#/components/schemas/"):
                                        # Refer√™ncia j√° est√° correta
                                        pass
                                    else:
                                        # Tentar corrigir refer√™ncia
                                        schema_name = ref_path.split("/")[-1]
                                        schema["$ref"] = f"#/components/schemas/{schema_name}"
                            
                            # Adicionar exemplo se n√£o existir
                            if "example" not in openapi_schema["paths"][path][method]["requestBody"]["content"][content_type]:
                                # Adicionar exemplo padr√£o baseado no schema
                                if "schema" in openapi_schema["paths"][path][method]["requestBody"]["content"][content_type]:
                                    schema = openapi_schema["paths"][path][method]["requestBody"]["content"][content_type]["schema"]
                                    if "$ref" in schema:
                                        # Refer√™ncia a um schema, n√£o podemos gerar exemplo automaticamente
                                        pass
                                    elif "properties" in schema:
                                        # Gerar exemplo baseado nas propriedades
                                        example = {}
                                        for prop, prop_schema in schema["properties"].items():
                                            if "example" in prop_schema:
                                                example[prop] = prop_schema["example"]
                                            elif "type" in prop_schema:
                                                if prop_schema["type"] == "string":
                                                    example[prop] = f"Exemplo de {prop}"
                                                elif prop_schema["type"] == "integer":
                                                    example[prop] = 42
                                                elif prop_schema["type"] == "number":
                                                    example[prop] = 3.14
                                                elif prop_schema["type"] == "boolean":
                                                    example[prop] = True
                                                elif prop_schema["type"] == "array":
                                                    example[prop] = []
                                                elif prop_schema["type"] == "object":
                                                    example[prop] = {}
                                        
                                        if example:
                                            openapi_schema["paths"][path][method]["requestBody"]["content"][content_type]["example"] = example
                
                # Garantir que os par√¢metros do requestBody sejam exibidos como par√¢metros na interface
                if "requestBody" in openapi_schema["paths"][path][method]:
                    if "content" in openapi_schema["paths"][path][method]["requestBody"]:
                        for content_type in openapi_schema["paths"][path][method]["requestBody"]["content"]:
                            if "schema" in openapi_schema["paths"][path][method]["requestBody"]["content"][content_type]:
                                schema = openapi_schema["paths"][path][method]["requestBody"]["content"][content_type]["schema"]
                                
                                # Se o schema for uma refer√™ncia, tentar resolver
                                if "$ref" in schema:
                                    ref_path = schema["$ref"]
                                    schema_name = ref_path.split("/")[-1]
                                    
                                    # Verificar se o schema existe em components
                                    if "schemas" in openapi_schema["components"] and schema_name in openapi_schema["components"]["schemas"]:
                                        # Usar o schema diretamente em vez de refer√™ncia para garantir que os par√¢metros apare√ßam
                                        resolved_schema = openapi_schema["components"]["schemas"][schema_name]
                                        
                                        # Substituir a refer√™ncia pelo schema resolvido
                                        openapi_schema["paths"][path][method]["requestBody"]["content"][content_type]["schema"] = resolved_schema

    app.openapi_schema = openapi_schema
    return app.openapi_schema


app.openapi = custom_openapi

# Incluir rotas da API v1
app.include_router(v1_router, prefix="/api/v1")


# Rota raiz
@app.get("/", include_in_schema=False)
async def root():
    """Rota raiz.

    Returns:
        Mensagem de boas-vindas
    """
    return {
        "message": "Bem-vindo √† API SynapScale",
        "version": settings.VERSION,
        "docs": "/docs",
        "redoc": "/redoc",
    }


# Rota de health check
@app.get("/health", include_in_schema=False)
async def health():
    """Rota de health check.

    Returns:
        Status da aplica√ß√£o
    """
    return {"status": "ok", "version": settings.VERSION}
