"""
Aplica√ß√£o principal otimizada do SynapScale Backend
Vers√£o de produ√ß√£o com todas as funcionalidades essenciais sincronizadas
Implementa todas as melhores pr√°ticas de FastAPI, seguran√ßa e performance
"""

import logging
import time
import os
import sys
from pathlib import Path as _PathHelper
from contextlib import asynccontextmanager
from fastapi import FastAPI, HTTPException, Request, Depends
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.trustedhost import TrustedHostMiddleware
from fastapi.responses import JSONResponse, HTMLResponse
from fastapi.staticfiles import StaticFiles
from fastapi.openapi.docs import get_swagger_ui_html, get_redoc_html
from fastapi.openapi.utils import get_openapi
from sqlalchemy.orm import Session
from sqlalchemy import text
import uvicorn

# --- Garantir que o pacote "synapse" seja encontrado ---
project_root = _PathHelper(__file__).resolve().parents[2]
src_path = project_root / "src"
if str(src_path) not in sys.path:
    sys.path.insert(0, str(src_path))

from synapse.core.config_new import settings
from synapse.database import init_db, get_db, health_check  # Usar database.py padr√£o
from synapse.api.v1.router import api_router
from synapse.middlewares.rate_limiting import rate_limit

# Configura√ß√£o de logging otimizada
log_level_name = settings.LOG_LEVEL or "INFO"
log_level = getattr(logging, log_level_name, logging.INFO)
logging.basicConfig(
    level=log_level,
    format=settings.LOG_FORMAT,
    handlers=[
        logging.StreamHandler(),
        *([logging.FileHandler(settings.LOG_FILE)] if hasattr(settings, 'LOG_FILE') and settings.LOG_FILE else [])
    ]
)
logger = logging.getLogger(__name__)

def validate_settings():
    """Valida√ß√£o m√≠nima de settings para inicializa√ß√£o."""
    return True, []

def check_configuration():
    """Verifica configura√ß√µes cr√≠ticas da aplica√ß√£o"""
    logger.info("üîç Verificando configura√ß√µes...")
    
    valid, errors = validate_settings()
    
    if not valid:
        logger.error("‚ùå Erros de configura√ß√£o encontrados:")
        for error in errors:
            logger.error(f"   - {error}")
        return False, errors
    else:
        logger.info("‚úÖ Todas as configura√ß√µes validadas com sucesso")
        return True, []

@asynccontextmanager
async def lifespan(app: FastAPI):
    """Gerencia o ciclo de vida da aplica√ß√£o"""
    logger.info('üöÄ Iniciando SynapScale Backend API (Otimizado)...')
    
    try:
        # Verificar configura√ß√µes
        config_valid, config_errors = check_configuration()
        if not config_valid:
            raise Exception(f"Configura√ß√µes inv√°lidas: {config_errors}")
        
        # Criar diret√≥rios necess√°rios
        upload_dir = settings.UPLOAD_FOLDER or "uploads"
        os.makedirs(upload_dir, exist_ok=True)
        logger.info(f'üìÅ Diret√≥rio de uploads criado: {upload_dir}')
        
        # Inicializar banco de dados
        init_db()
        logger.info('‚úÖ Banco de dados inicializado')
        
        # Verificar conectividade
        if health_check():
            logger.info('‚úÖ Conectividade com banco de dados verificada')
        else:
            logger.error('‚ùå Falha na verifica√ß√£o de conectividade com o banco')
            if settings.ENVIRONMENT == "production":
                logger.warning('‚ö†Ô∏è Continuando em produ√ß√£o - banco pode estar sendo provisionado')
            elif settings.is_development():
                logger.warning('‚ö†Ô∏è Continuando em modo desenvolvimento')
            else:
                raise Exception("Falha na verifica√ß√£o de conectividade com o banco")
        
        # Inicializar WebSocket Manager
        websocket_manager = None
        try:
            from synapse.core.websockets.manager import ConnectionManager
            websocket_manager = ConnectionManager()
            logger.info('‚úÖ WebSocket Manager inicializado')
        except Exception as e:
            logger.warning(f'‚ö†Ô∏è WebSocket Manager n√£o dispon√≠vel: {e}')
        
        # Engine de Execu√ß√£o
        execution_engine_enabled = os.getenv('EXECUTION_ENGINE_ENABLED', 'true').lower() == 'true'
        if execution_engine_enabled:
            try:
                from synapse.api.v1.endpoints.executions import initialize_execution_service
                await initialize_execution_service(websocket_manager)
                logger.info('‚úÖ Engine de Execu√ß√£o inicializada')
            except Exception as e:
                logger.warning(f'‚ö†Ô∏è Engine de Execu√ß√£o n√£o dispon√≠vel: {e}')
        
        logger.info('üéâ SynapScale Backend iniciado com sucesso!')
        
    except Exception as e:
        logger.error(f'‚ùå Erro cr√≠tico na inicializa√ß√£o: {e}')
        raise
    
    yield
    
    # Shutdown
    logger.info('üîÑ Finalizando SynapScale Backend...')
    execution_engine_enabled = os.getenv('EXECUTION_ENGINE_ENABLED', 'true').lower() == 'true'
    if execution_engine_enabled:
        try:
            from synapse.api.v1.endpoints.executions import shutdown_execution_service
            await shutdown_execution_service()
            logger.info('‚úÖ Engine de Execu√ß√£o finalizada')
        except Exception as e:
            logger.warning(f'‚ö†Ô∏è Erro ao finalizar Engine de Execu√ß√£o: {e}')
    
    logger.info('‚úÖ SynapScale Backend finalizado com sucesso')

# Defini√ß√£o de tags para documenta√ß√£o
openapi_tags = [
    {"name": "system", "description": "üè† Status do sistema e informa√ß√µes gerais"},
    {"name": "authentication", "description": "üîê Autentica√ß√£o e gerenciamento de sess√£o"},
    {"name": "workspaces", "description": "üè¢ Workspaces e colabora√ß√£o"},
    {"name": "workflows", "description": "‚öôÔ∏è Workflows e automa√ß√£o"},
    {"name": "ai", "description": "ü§ñ IA e agentes"},
    {"name": "marketplace", "description": "üõí Marketplace e componentes"},
    {"name": "analytics", "description": "üìä Analytics e relat√≥rios"},
    {"name": "data", "description": "üìÅ Gest√£o de dados e arquivos"},
    {"name": "advanced", "description": "üîå Recursos avan√ßados"}
]

# Criar aplica√ß√£o FastAPI
app = FastAPI(
    title=getattr(settings, 'PROJECT_NAME', None) or "SynapScale Backend API",
    description='''
    üöÄ **SynapScale Backend API** - Plataforma de Automa√ß√£o com IA
    
    API robusta e escal√°vel para gerenciamento de workflows, agentes AI e automa√ß√µes.
    **VERS√ÉO OTIMIZADA PARA PRODU√á√ÉO**
    
    ## Funcionalidades Principais
    
    * **üîê Autentica√ß√£o**: Sistema completo de autentica√ß√£o e autoriza√ß√£o
    * **‚ö° Workflows**: Cria√ß√£o e execu√ß√£o de workflows de automa√ß√£o
    * **ü§ñ Agentes AI**: Integra√ß√£o com m√∫ltiplos provedores de IA
    * **üîó Nodes**: Componentes reutiliz√°veis para workflows
    * **üí¨ Conversas**: Hist√≥rico e gerenciamento de conversas
    * **üìÅ Arquivos**: Upload e gerenciamento de arquivos
    
    ## Seguran√ßa
    
    * Autentica√ß√£o JWT robusta
    * Rate limiting configur√°vel
    * Headers de seguran√ßa
    * Valida√ß√£o de dados completa
    ''',
    version=getattr(settings, 'VERSION', None) or "2.0.0",
    openapi_tags=openapi_tags,
    docs_url=None,  # Desabilitar docs padr√£o para usar customizado
    redoc_url="/redoc",
    swagger_ui_parameters={
        "defaultModelsExpandDepth": -1,
        "docExpansion": "none",
        "displayRequestDuration": True,
        "tryItOutEnabled": True,
    },
    lifespan=lifespan,
)

# -------- CORS CONFIGURATION --------
cors_origins = settings.backend_cors_origins_list
app.add_middleware(
    CORSMiddleware,
    allow_origins=cors_origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
    expose_headers=[],
    max_age=600,
)

# Security middleware
if not settings.DEBUG:
    cors_origins_env = os.getenv("BACKEND_CORS_ORIGINS")
    trusted_hosts = ["*"]  # Simplificado para produ√ß√£o
    if cors_origins_env:
        try:
            if cors_origins_env.strip().startswith("["):
                import json as _json
                trusted_hosts = _json.loads(cors_origins_env)
            else:
                trusted_hosts = [h.strip() for h in cors_origins_env.split(",") if h.strip()]
            
            def clean_host(host):
                host = host.strip()
                if host.startswith("http://"):
                    host = host[len("http://"):]
                elif host.startswith("https://"):
                    host = host[len("https://"):]
                return host.rstrip("/")
            
            trusted_hosts = [clean_host(h) for h in trusted_hosts]
        except Exception as e:
            logger.error(f"Erro ao processar BACKEND_CORS_ORIGINS: {e}")
            trusted_hosts = ["*"]
    
    try:
        app.add_middleware(TrustedHostMiddleware, allowed_hosts=trusted_hosts)
    except Exception as e:
        logger.error(f"Erro ao adicionar TrustedHostMiddleware: {e}")
        app.add_middleware(TrustedHostMiddleware, allowed_hosts=["*"])

# Middlewares essenciais
@app.middleware('http')
async def add_security_headers(request: Request, call_next):
    response = await call_next(request)
    response.headers["X-Content-Type-Options"] = "nosniff"
    response.headers["X-Frame-Options"] = "DENY"
    response.headers["X-XSS-Protection"] = "1; mode=block"
    response.headers["Referrer-Policy"] = "strict-origin-when-cross-origin"
    return response

@app.middleware('http')
async def add_process_time_header(request: Request, call_next):
    start_time = time.time()
    response = await call_next(request)
    process_time = time.time() - start_time
    response.headers["X-Process-Time"] = str(process_time)
    return response

@app.middleware('http')
async def log_auth_requests(request: Request, call_next):
    """Log de requisi√ß√µes de autentica√ß√£o para debugging"""
    if request.url.path.startswith(f"{settings.API_V1_STR}/auth"):
        logger.info(f"üîê Auth request: {request.method} {request.url.path}")
    response = await call_next(request)
    return response

@app.middleware('http')
async def log_requests(request: Request, call_next):
    """Log b√°sico de requisi√ß√µes"""
    start_time = time.time()
    response = await call_next(request)
    process_time = time.time() - start_time
    
    # Log apenas para endpoints importantes ou erros
    if response.status_code >= 400 or request.url.path.startswith(f"{settings.API_V1_STR}"):
        logger.info(
            f"{request.method} {request.url.path} - "
            f"Status: {response.status_code} - "
            f"Time: {process_time:.3f}s"
        )
    
    return response

@app.middleware('http')
async def rate_limit_middleware(request: Request, call_next):
    return await rate_limit(max_requests=100, window_seconds=60)(call_next)(request)

# Exception handlers
@app.exception_handler(Exception)
async def global_exception_handler(request: Request, exc: Exception):
    logger.error(f"Unhandled error: {exc}", exc_info=True)
    return JSONResponse(
        status_code=500,
        content={"detail": "Internal server error", "type": "server_error"}
    )

@app.exception_handler(HTTPException)
async def http_exception_handler(request: Request, exc: HTTPException):
    return JSONResponse(
        status_code=exc.status_code,
        content={"detail": exc.detail, "type": "http_error"}
    )

# Include API routers
app.include_router(api_router, prefix=settings.API_V1_STR)

# Static files (apenas em debug)
if settings.DEBUG:
    static_dir = _PathHelper(__file__).resolve().parent / "static"
    static_dir.mkdir(exist_ok=True)
    app.mount("/static", StaticFiles(directory=str(static_dir)), name="static")

# Custom OpenAPI
def custom_openapi():
    if app.openapi_schema:
        return app.openapi_schema
    
    openapi_schema = get_openapi(
        title=app.title,
        version=app.version,
        description=app.description,
        routes=app.routes,
    )
    
    # Adicionar informa√ß√µes de seguran√ßa
    openapi_schema["components"]["securitySchemes"] = {
        "HTTPBearer": {
            "type": "http",
            "scheme": "bearer",
            "bearerFormat": "JWT",
        }
    }
    
    # Aplicar seguran√ßa globalmente (exceto para endpoints p√∫blicos)
    public_paths = ["/", "/health", "/health/detailed", "/docs", "/redoc", "/openapi.json"]
    for path in openapi_schema["paths"]:
        if path not in public_paths:
            for method in openapi_schema["paths"][path]:
                if method != "options":
                    openapi_schema["paths"][path][method]["security"] = [{"HTTPBearer": []}]
    
    app.openapi_schema = openapi_schema
    return app.openapi_schema

app.openapi = custom_openapi

# Endpoints customizados
@app.get("/docs", include_in_schema=False)
async def custom_swagger_ui_html():
    return get_swagger_ui_html(
        openapi_url=app.openapi_url,
        title=app.title + " - API Documentation",
        swagger_ui_parameters=app.swagger_ui_parameters,
    )

# Health checks
@app.get("/health", tags=["system"])
async def health_check(db: Session = Depends(get_db)):
    """Health check b√°sico"""
    try:
        # Teste b√°sico de conectividade usando SQLAlchemy text()
        db.execute(text("SELECT 1"))
        db_status = "healthy"
    except Exception as e:
        logger.error(f"Database health check failed: {e}")
        db_status = "unhealthy"
    
    return {
        "status": "healthy" if db_status == "healthy" else "degraded",
        "environment": settings.ENVIRONMENT,
        "version": settings.VERSION,
        "database": db_status,
        "timestamp": time.time()
    }

@app.get("/health/detailed", tags=["system"])
async def detailed_health_check(db: Session = Depends(get_db)):
    """Health check detalhado"""
    try:
        # Teste de conectividade
        db.execute(text("SELECT 1"))
        db_connected = True
        
        # Contar tabelas usando SQLAlchemy text() com par√¢metros seguros
        result = db.execute(
            text("SELECT COUNT(*) as count FROM information_schema.tables WHERE table_schema = :schema"),
            {"schema": settings.DATABASE_SCHEMA}
        )
        table_count = result.scalar() if result else 0
        
    except Exception as e:
        logger.error(f"Database detailed check failed: {e}")
        db_connected = False
        table_count = 0

    return {
        "status": "healthy",
        "environment": settings.ENVIRONMENT,
        "version": settings.VERSION,
        "database": {
            "connected": db_connected,
            "schema": settings.DATABASE_SCHEMA,
            "tables": table_count,
        },
        "llm_providers": {
            "openai": bool(getattr(settings, 'OPENAI_API_KEY', None)),
            "anthropic": bool(getattr(settings, 'ANTHROPIC_API_KEY', None)),
            "google": bool(getattr(settings, 'GOOGLE_API_KEY', None)),
            "groq": bool(getattr(settings, 'GROQ_API_KEY', None)),
        },
        "features": {
            "file_upload": True,
            "websocket": True,
            "analytics": True,
        },
        "timestamp": time.time()
    }

@app.get("/", tags=["system"])
async def root():
    """Endpoint raiz"""
    return {
        "message": f"üöÄ {settings.PROJECT_NAME}",
        "version": settings.VERSION,
        "environment": settings.ENVIRONMENT,
        "docs": "/docs",
        "health": "/health",
        "api": settings.API_V1_STR
    }

@app.get("/info", tags=["system"])
async def api_info():
    """Informa√ß√µes da API"""
    return {
        "name": settings.PROJECT_NAME,
        "version": settings.VERSION,
        "description": "Plataforma de Automa√ß√£o com IA",
        "environment": settings.ENVIRONMENT,
        "debug": settings.DEBUG,
        "features": {
            "authentication": True,
            "workflows": True,
            "ai_agents": True,
            "marketplace": True,
            "analytics": True,
            "websockets": True,
            "file_upload": True
        },
        "api_version": "v1",
        "openapi": "/openapi.json",
        "docs": "/docs",
        "health": "/health"
    }

if __name__ == "__main__":
    logger.info(f"üöÄ Iniciando servidor em modo desenvolvimento...")
    logger.info(f"üìç Host: {settings.HOST}:{settings.PORT}")
    logger.info(f"üåç Ambiente: {settings.ENVIRONMENT}")
    logger.info(f"üîç Debug: {settings.DEBUG}")
    logger.info(f"üìö Docs: http://{settings.HOST}:{settings.PORT}/docs")
    
    uvicorn.run(
        "synapse.main_optimized:app",
        host=settings.HOST or "0.0.0.0",
        port=settings.PORT or 8000,
        reload=settings.DEBUG,
        log_level=log_level_name.lower(),
        access_log=True,
        server_header=False,
        date_header=False
    )
