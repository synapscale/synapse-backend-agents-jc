"""add_workspace_members_activities_invitations

Revision ID: 7aa856f973a0
Revises: b780a865dc0f
Create Date: 2025-06-20 14:22:45.952564

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '7aa856f973a0'
down_revision: Union[str, None] = 'b780a865dc0f'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_synapscale_db_email_verification_tokens_token'), table_name='email_verification_tokens', schema='synapscale_db')
    op.drop_index(op.f('ix_synapscale_db_email_verification_tokens_user_id'), table_name='email_verification_tokens', schema='synapscale_db')
    op.drop_table('email_verification_tokens', schema='synapscale_db')
    op.drop_table('fact_pesquisas', schema='banco_de_dados_jc')
    op.drop_index(op.f('idx_subscription_status_history_change_date'), table_name='subscription_status_history', schema='joaocastanheira_bancodedados')
    op.drop_index(op.f('idx_subscription_status_history_status_id'), table_name='subscription_status_history', schema='joaocastanheira_bancodedados')
    op.drop_index(op.f('idx_subscription_status_history_sub_id'), table_name='subscription_status_history', schema='joaocastanheira_bancodedados')
    op.drop_table('subscription_status_history', schema='joaocastanheira_bancodedados')
    op.drop_index(op.f('ix_public_template_downloads_downloaded_at'), table_name='template_downloads', schema='synapscale_db')
    op.drop_index(op.f('ix_public_template_downloads_id'), table_name='template_downloads', schema='synapscale_db')
    op.drop_index(op.f('ix_public_template_downloads_template_id'), table_name='template_downloads', schema='synapscale_db')
    op.drop_index(op.f('ix_public_template_downloads_user_id'), table_name='template_downloads', schema='synapscale_db')
    op.drop_table('template_downloads', schema='synapscale_db')
    op.drop_index(op.f('idx_plat_soft_inv_hist_issue_date'), table_name='platform_software_invoice_history', schema='joaocastanheira_bancodedados')
    op.drop_index(op.f('idx_plat_soft_inv_hist_trans_id'), table_name='platform_software_invoice_history', schema='joaocastanheira_bancodedados')
    op.drop_table('platform_software_invoice_history', schema='joaocastanheira_bancodedados')
    op.drop_index(op.f('ix_public_component_downloads_component_id'), table_name='component_downloads', schema='synapscale_db')
    op.drop_index(op.f('ix_public_component_downloads_user_id'), table_name='component_downloads', schema='synapscale_db')
    op.drop_table('component_downloads', schema='synapscale_db')
    op.drop_table('fact_acessos_cademi', schema='banco_de_dados_jc')
    op.drop_table('vendas_na_kiwify', schema='banco_de_dados_jc')
    op.drop_index(op.f('ix_public_analytics_events_action'), table_name='analytics_events', schema='synapscale_db')
    op.drop_index(op.f('ix_public_analytics_events_anonymous_id'), table_name='analytics_events', schema='synapscale_db')
    op.drop_index(op.f('ix_public_analytics_events_category'), table_name='analytics_events', schema='synapscale_db')
    op.drop_index(op.f('ix_public_analytics_events_event_id'), table_name='analytics_events', schema='synapscale_db')
    op.drop_index(op.f('ix_public_analytics_events_label'), table_name='analytics_events', schema='synapscale_db')
    op.drop_index(op.f('ix_public_analytics_events_project_id'), table_name='analytics_events', schema='synapscale_db')
    op.drop_index(op.f('ix_public_analytics_events_workflow_id'), table_name='analytics_events', schema='synapscale_db')
    op.drop_index(op.f('ix_public_analytics_events_workspace_id'), table_name='analytics_events', schema='synapscale_db')
    op.drop_table('analytics_events', schema='synapscale_db')
    op.drop_index(op.f('ix_public_project_comments_parent_id'), table_name='project_comments', schema='synapscale_db')
    op.drop_index(op.f('ix_public_project_comments_project_id'), table_name='project_comments', schema='synapscale_db')
    op.drop_index(op.f('ix_public_project_comments_user_id'), table_name='project_comments', schema='synapscale_db')
    op.drop_table('project_comments', schema='synapscale_db')
    op.drop_index(op.f('ix_public_business_metrics_date'), table_name='business_metrics', schema='synapscale_db')
    op.drop_index(op.f('ix_public_business_metrics_id'), table_name='business_metrics', schema='synapscale_db')
    op.drop_table('business_metrics', schema='synapscale_db')
    # Drop dependent tables first to avoid foreign key constraint errors
    # platform_commission_participants will be dropped later after its dependencies
    op.drop_index(op.f('idx_ptfeeh_coupon_name'), table_name='platform_transaction_fee_history', schema='banco_de_dados')
    op.drop_index(op.f('idx_ptfeeh_fee_currency'), table_name='platform_transaction_fee_history', schema='banco_de_dados')
    op.drop_index(op.f('idx_ptfeeh_tax_currency'), table_name='platform_transaction_fee_history', schema='banco_de_dados')
    op.drop_table('platform_transaction_fee_history', schema='banco_de_dados')
    op.drop_index(op.f('idx_customer_logs_created_at'), table_name='customer_logs', schema='joaocastanheira_bancodedados')
    op.drop_index(op.f('idx_customer_logs_customer_id'), table_name='customer_logs', schema='joaocastanheira_bancodedados')
    op.drop_table('customer_logs', schema='joaocastanheira_bancodedados')
    op.drop_index(op.f('ix_public_workspace_activities_action'), table_name='workspace_activities', schema='synapscale_db')
    op.drop_index(op.f('ix_public_workspace_activities_user_id'), table_name='workspace_activities', schema='synapscale_db')
    op.drop_index(op.f('ix_public_workspace_activities_workspace_id'), table_name='workspace_activities', schema='synapscale_db')
    op.drop_table('workspace_activities', schema='synapscale_db')
    op.drop_index(op.f('ix_public_template_usage_id'), table_name='template_usage', schema='synapscale_db')
    op.drop_index(op.f('ix_public_template_usage_template_id'), table_name='template_usage', schema='synapscale_db')
    op.drop_index(op.f('ix_public_template_usage_used_at'), table_name='template_usage', schema='synapscale_db')
    op.drop_index(op.f('ix_public_template_usage_user_id'), table_name='template_usage', schema='synapscale_db')
    op.drop_index(op.f('ix_public_template_usage_workflow_id'), table_name='template_usage', schema='synapscale_db')
    op.drop_table('template_usage', schema='synapscale_db')
    op.drop_index(op.f('idx_transaction_status_history_change_date'), table_name='transaction_status_history', schema='joaocastanheira_bancodedados')
    op.drop_index(op.f('idx_transaction_status_history_status_id'), table_name='transaction_status_history', schema='joaocastanheira_bancodedados')
    op.drop_index(op.f('idx_transaction_status_history_trans_id'), table_name='transaction_status_history', schema='joaocastanheira_bancodedados')
    op.drop_table('transaction_status_history', schema='joaocastanheira_bancodedados')
    op.drop_index(op.f('ix_public_workflow_connections_workflow_id'), table_name='workflow_connections', schema='synapscale_db')
    op.drop_table('workflow_connections', schema='synapscale_db')
    op.drop_index(op.f('ix_public_user_insights_category'), table_name='user_insights', schema='synapscale_db')
    op.drop_index(op.f('ix_public_user_insights_insight_type'), table_name='user_insights', schema='synapscale_db')
    op.drop_index(op.f('ix_public_user_insights_user_id'), table_name='user_insights', schema='synapscale_db')
    op.drop_table('user_insights', schema='synapscale_db')
    op.drop_index(op.f('ix_public_workspace_members_id'), table_name='workspace_members', schema='synapscale_db')
    op.drop_index(op.f('ix_public_workspace_members_user_id'), table_name='workspace_members', schema='synapscale_db')
    op.drop_index(op.f('ix_public_workspace_members_workspace_id'), table_name='workspace_members', schema='synapscale_db')
    op.drop_table('workspace_members', schema='synapscale_db')
    op.drop_index(op.f('idx_psrh_platform_subscription'), table_name='platform_subscription__recurrency_history', schema='banco_de_dados')
    op.drop_index(op.f('idx_psrh_transaction'), table_name='platform_subscription__recurrency_history', schema='banco_de_dados')
    op.drop_table('platform_subscription__recurrency_history', schema='banco_de_dados')
    op.drop_index(op.f('idx_pts_platform_sale'), table_name='platform_transaction_status', schema='banco_de_dados')
    op.drop_index(op.f('idx_pts_platform_status'), table_name='platform_transaction_status', schema='banco_de_dados')
    op.drop_index(op.f('idx_pts_platform_subscription'), table_name='platform_transaction_status', schema='banco_de_dados')
    op.drop_table('platform_transaction_status', schema='banco_de_dados')
    op.drop_index(op.f('idx_addresses_city'), table_name='addresses', schema='joaocastanheira_bancodedados')
    op.drop_index(op.f('idx_addresses_country'), table_name='addresses', schema='joaocastanheira_bancodedados')
    op.drop_index(op.f('idx_addresses_state'), table_name='addresses', schema='joaocastanheira_bancodedados')
    op.drop_index(op.f('idx_addresses_zip_code'), table_name='addresses', schema='joaocastanheira_bancodedados')
    op.drop_table('addresses', schema='joaocastanheira_bancodedados')
    op.drop_table('mapa_produtos', schema='banco_de_dados_jc')
    op.drop_index(op.f('ix_public_component_purchases_component_id'), table_name='component_purchases', schema='synapscale_db')
    op.drop_index(op.f('ix_public_component_purchases_user_id'), table_name='component_purchases', schema='synapscale_db')
    op.drop_table('component_purchases', schema='synapscale_db')
    op.drop_table('conversations', schema='synapscale_db')
    op.drop_index(op.f('ix_public_workflow_executions_execution_id'), table_name='workflow_executions', schema='synapscale_db')
    op.drop_index(op.f('ix_public_workflow_executions_priority'), table_name='workflow_executions', schema='synapscale_db')
    op.drop_index(op.f('ix_public_workflow_executions_user_id'), table_name='workflow_executions', schema='synapscale_db')
    op.drop_table('workflow_executions', schema='synapscale_db')
    op.drop_index(op.f('ix_synapscale_db_node_ratings_node_id'), table_name='node_ratings', schema='synapscale_db')
    op.drop_index(op.f('ix_synapscale_db_node_ratings_user_id'), table_name='node_ratings', schema='synapscale_db')
    op.drop_table('node_ratings', schema='synapscale_db')
    op.drop_index(op.f('ix_public_report_executions_report_id'), table_name='report_executions', schema='synapscale_db')
    op.drop_index(op.f('ix_public_report_executions_user_id'), table_name='report_executions', schema='synapscale_db')
    op.drop_table('report_executions', schema='synapscale_db')
    op.drop_index(op.f('ix_public_project_versions_project_id'), table_name='project_versions', schema='synapscale_db')
    op.drop_index(op.f('ix_public_project_versions_user_id'), table_name='project_versions', schema='synapscale_db')
    op.drop_table('project_versions', schema='synapscale_db')
    op.drop_index(op.f('fact_vendas_cliente_idx'), table_name='fact_vendas', schema='banco_de_dados_jc')
    op.drop_index(op.f('fact_vendas_data_venda_idx'), table_name='fact_vendas', schema='banco_de_dados_jc')
    op.drop_index(op.f('fact_vendas_produto_idx'), table_name='fact_vendas', schema='banco_de_dados_jc')
    op.drop_table('fact_vendas', schema='banco_de_dados_jc')
    op.drop_index(op.f('idx_platform_sale_client_history__client'), table_name='platform_sale_client_history', schema='banco_de_dados')
    op.drop_table('platform_sale_client_history', schema='banco_de_dados')
    op.drop_index(op.f('ix_synapscale_db_users_email'), table_name='users', schema='synapscale_db')
    op.drop_index(op.f('ix_synapscale_db_users_username'), table_name='users', schema='synapscale_db')
    op.drop_table('users', schema='synapscale_db')
    op.drop_index(op.f('idx_ptplanh_plan_id'), table_name='platform_transaction_plan_history', schema='banco_de_dados')
    op.drop_index(op.f('idx_ptplanh_plan_name'), table_name='platform_transaction_plan_history', schema='banco_de_dados')
    op.drop_table('platform_transaction_plan_history', schema='banco_de_dados')
    op.drop_index(op.f('idx_pcpd_commission_participant'), table_name='platform_commission_participants_doc', schema='banco_de_dados')
    op.drop_table('platform_commission_participants_doc', schema='banco_de_dados')
    op.drop_index(op.f('ix_public_component_versions_component_id'), table_name='component_versions', schema='synapscale_db')
    op.drop_table('component_versions', schema='synapscale_db')
    op.drop_table('sufixos', schema='banco_de_dados_jc')
    op.drop_index(op.f('ix_public_workflows_workspace_id'), table_name='workflows', schema='synapscale_db')
    op.drop_table('workflows', schema='synapscale_db')
    op.drop_index(op.f('idx_products_name'), table_name='products', schema='joaocastanheira_bancodedados')
    op.drop_index(op.f('idx_products_platform_origin'), table_name='products', schema='joaocastanheira_bancodedados')
    op.drop_table('products', schema='joaocastanheira_bancodedados')
    op.drop_index(op.f('ix_public_marketplace_components_subcategory'), table_name='marketplace_components', schema='synapscale_db')
    op.drop_table('marketplace_components', schema='synapscale_db')
    op.drop_index(op.f('ix_public_workflow_templates_download_count'), table_name='workflow_templates', schema='synapscale_db')
    op.drop_index(op.f('ix_public_workflow_templates_is_verified'), table_name='workflow_templates', schema='synapscale_db')
    op.drop_index(op.f('ix_public_workflow_templates_license_type'), table_name='workflow_templates', schema='synapscale_db')
    op.drop_index(op.f('ix_public_workflow_templates_original_workflow_id'), table_name='workflow_templates', schema='synapscale_db')
    op.drop_index(op.f('ix_public_workflow_templates_published_at'), table_name='workflow_templates', schema='synapscale_db')
    op.drop_index(op.f('ix_public_workflow_templates_status'), table_name='workflow_templates', schema='synapscale_db')
    op.drop_table('workflow_templates', schema='synapscale_db')
    op.drop_index(op.f('idx_plans_platform_origin'), table_name='plans', schema='joaocastanheira_bancodedados')
    op.drop_index(op.f('idx_plans_product_id'), table_name='plans', schema='joaocastanheira_bancodedados')
    op.drop_table('plans', schema='joaocastanheira_bancodedados')
    op.drop_index(op.f('ix_public_user_behavior_metrics_date'), table_name='user_behavior_metrics', schema='synapscale_db')
    op.drop_index(op.f('ix_public_user_behavior_metrics_user_id'), table_name='user_behavior_metrics', schema='synapscale_db')
    op.drop_table('user_behavior_metrics', schema='synapscale_db')
    op.drop_index(op.f('idx_pti_platform_sale'), table_name='platform_transaction_invoice', schema='banco_de_dados')
    op.drop_index(op.f('idx_pti_platform_subscription'), table_name='platform_transaction_invoice', schema='banco_de_dados')
    op.drop_index(op.f('idx_pti_software_invoice'), table_name='platform_transaction_invoice', schema='banco_de_dados')
    op.drop_table('platform_transaction_invoice', schema='banco_de_dados')
    op.drop_index(op.f('idx_ptp_platform_sale'), table_name='platform_transaction_product', schema='banco_de_dados')
    op.drop_index(op.f('idx_ptp_platform_subscription'), table_name='platform_transaction_product', schema='banco_de_dados')
    op.drop_table('platform_transaction_product', schema='banco_de_dados')
    op.drop_table('analytics_metrics', schema='synapscale_db')
    op.drop_index(op.f('idx_participant_addresses_country_city'), table_name='participant_addresses', schema='joaocastanheira_bancodedados')
    op.drop_index(op.f('idx_participant_addresses_participant_id'), table_name='participant_addresses', schema='joaocastanheira_bancodedados')
    op.drop_index(op.f('idx_participant_addresses_state'), table_name='participant_addresses', schema='joaocastanheira_bancodedados')
    op.drop_index(op.f('idx_participant_addresses_zip_code'), table_name='participant_addresses', schema='joaocastanheira_bancodedados')
    op.drop_table('participant_addresses', schema='joaocastanheira_bancodedados')
    op.drop_index(op.f('idx_psub_subscriber'), table_name='platform_subscription', schema='banco_de_dados')
    op.drop_index(op.f('uq_psub_subscription_id'), table_name='platform_subscription', schema='banco_de_dados')
    op.drop_index(op.f('uq_psub_transaction'), table_name='platform_subscription', schema='banco_de_dados')
    op.drop_table('platform_subscription', schema='banco_de_dados')
    op.drop_table('platform_status', schema='banco_de_dados')
    op.drop_index(op.f('idx_commission_participants_email'), table_name='commission_participants', schema='joaocastanheira_bancodedados')
    op.drop_index(op.f('idx_commission_participants_platform_origin'), table_name='commission_participants', schema='joaocastanheira_bancodedados')
    op.drop_table('commission_participants', schema='joaocastanheira_bancodedados')
    op.drop_index(op.f('ix_synapscale_db_password_reset_tokens_token'), table_name='password_reset_tokens', schema='synapscale_db')
    op.drop_index(op.f('ix_synapscale_db_password_reset_tokens_user_id'), table_name='password_reset_tokens', schema='synapscale_db')
    op.drop_table('password_reset_tokens', schema='synapscale_db')
    op.drop_index(op.f('ix_public_nodes_user_id'), table_name='nodes', schema='synapscale_db')
    op.drop_index(op.f('ix_public_nodes_workspace_id'), table_name='nodes', schema='synapscale_db')
    op.drop_table('nodes', schema='synapscale_db')
    op.drop_index(op.f('idx_subscriptions_summary_accession_date'), table_name='subscriptions_summary', schema='joaocastanheira_bancodedados')
    op.drop_index(op.f('idx_subscriptions_summary_customer_id'), table_name='subscriptions_summary', schema='joaocastanheira_bancodedados')
    op.drop_index(op.f('idx_subscriptions_summary_end_accession_date'), table_name='subscriptions_summary', schema='joaocastanheira_bancodedados')
    op.drop_index(op.f('idx_subscriptions_summary_last_rec_num'), table_name='subscriptions_summary', schema='joaocastanheira_bancodedados')
    op.drop_index(op.f('idx_subscriptions_summary_last_rec_trans_num'), table_name='subscriptions_summary', schema='joaocastanheira_bancodedados')
    op.drop_index(op.f('idx_subscriptions_summary_offer_id'), table_name='subscriptions_summary', schema='joaocastanheira_bancodedados')
    op.drop_index(op.f('idx_subscriptions_summary_plan_id'), table_name='subscriptions_summary', schema='joaocastanheira_bancodedados')
    op.drop_index(op.f('idx_subscriptions_summary_platform_ids'), table_name='subscriptions_summary', schema='joaocastanheira_bancodedados')
    op.drop_index(op.f('idx_subscriptions_summary_platform_subscriber_id'), table_name='subscriptions_summary', schema='joaocastanheira_bancodedados')
    op.drop_index(op.f('idx_subscriptions_summary_product_id'), table_name='subscriptions_summary', schema='joaocastanheira_bancodedados')
    op.drop_index(op.f('idx_subscriptions_summary_status_id'), table_name='subscriptions_summary', schema='joaocastanheira_bancodedados')
    op.drop_index(op.f('idx_subscriptions_summary_subscriber_email'), table_name='subscriptions_summary', schema='joaocastanheira_bancodedados')
    op.drop_index(op.f('idx_subscriptions_summary_subscription_origin_id'), table_name='subscriptions_summary', schema='joaocastanheira_bancodedados')
    op.drop_table('subscriptions_summary', schema='joaocastanheira_bancodedados')
    op.drop_index(op.f('idx_ptplan_plan_history'), table_name='platform_transaction_plan', schema='banco_de_dados')
    op.drop_index(op.f('idx_ptplan_platform_sale'), table_name='platform_transaction_plan', schema='banco_de_dados')
    op.drop_index(op.f('idx_ptplan_platform_subscription'), table_name='platform_transaction_plan', schema='banco_de_dados')
    op.drop_table('platform_transaction_plan', schema='banco_de_dados')
    op.drop_index(op.f('ix_public_agents_workspace_id'), table_name='agents', schema='synapscale_db')
    op.drop_table('agents', schema='synapscale_db')
    op.drop_index(op.f('idx_map_produtos_codigos_produto'), table_name='map_produtos', schema='banco_de_dados_jc', postgresql_using='gin')
    op.drop_index(op.f('idx_map_produtos_plano_variacao'), table_name='map_produtos', schema='banco_de_dados_jc')
    op.drop_index(op.f('idx_map_produtos_plataforma'), table_name='map_produtos', schema='banco_de_dados_jc')
    op.drop_index(op.f('idx_map_produtos_produto_limpo'), table_name='map_produtos', schema='banco_de_dados_jc')
    op.drop_table('map_produtos', schema='banco_de_dados_jc')
    op.drop_index(op.f('ix_public_template_collections_collection_id'), table_name='template_collections', schema='synapscale_db')
    op.drop_index(op.f('ix_public_template_collections_creator_id'), table_name='template_collections', schema='synapscale_db')
    op.drop_index(op.f('ix_public_template_collections_id'), table_name='template_collections', schema='synapscale_db')
    op.drop_table('template_collections', schema='synapscale_db')
    op.drop_index(op.f('ix_public_template_favorites_id'), table_name='template_favorites', schema='synapscale_db')
    op.drop_index(op.f('ix_public_template_favorites_template_id'), table_name='template_favorites', schema='synapscale_db')
    op.drop_index(op.f('ix_public_template_favorites_user_id'), table_name='template_favorites', schema='synapscale_db')
    op.drop_table('template_favorites', schema='synapscale_db')
    op.drop_index(op.f('idx_platform_commission_currency_code'), table_name='platform_commission', schema='joaocastanheira_bancodedados')
    op.drop_index(op.f('idx_platform_commission_participant_id'), table_name='platform_commission', schema='joaocastanheira_bancodedados')
    op.drop_index(op.f('idx_platform_commission_source'), table_name='platform_commission', schema='joaocastanheira_bancodedados')
    op.drop_index(op.f('idx_platform_commission_transaction_id'), table_name='platform_commission', schema='joaocastanheira_bancodedados')
    op.drop_table('platform_commission', schema='joaocastanheira_bancodedados')
    op.drop_table('analytics_alerts', schema='synapscale_db')
    op.drop_table('api_field_mapping', schema='joaocastanheira_bancodedados')
    op.drop_index(op.f('idx_customers_address_id'), table_name='customers', schema='joaocastanheira_bancodedados')
    op.drop_index(op.f('idx_customers_email'), table_name='customers', schema='joaocastanheira_bancodedados')
    op.drop_index(op.f('idx_customers_email_lower'), table_name='customers', schema='joaocastanheira_bancodedados')
    op.drop_table('customers', schema='joaocastanheira_bancodedados')
    op.drop_index(op.f('ix_public_custom_reports_category'), table_name='custom_reports', schema='synapscale_db')
    op.drop_index(op.f('ix_public_custom_reports_user_id'), table_name='custom_reports', schema='synapscale_db')
    op.drop_index(op.f('ix_public_custom_reports_workspace_id'), table_name='custom_reports', schema='synapscale_db')
    op.drop_table('custom_reports', schema='synapscale_db')
    op.drop_index(op.f('contatos_activecampaign_contact_id_uindex'), table_name='contatos_activecampaign', schema='banco_de_dados_jc')
    op.drop_index(op.f('contatos_activecampaign_id_index'), table_name='contatos_activecampaign', schema='banco_de_dados_jc')
    op.drop_index(op.f('contatos_activecampaign_idx'), table_name='contatos_activecampaign', schema='banco_de_dados_jc')
    op.drop_table('contatos_activecampaign', schema='banco_de_dados_jc')
    op.drop_index(op.f('idx_transaction_items_offer_id'), table_name='transaction_items', schema='joaocastanheira_bancodedados')
    op.drop_index(op.f('idx_transaction_items_plan_id'), table_name='transaction_items', schema='joaocastanheira_bancodedados')
    op.drop_index(op.f('idx_transaction_items_product_id'), table_name='transaction_items', schema='joaocastanheira_bancodedados')
    op.drop_index(op.f('idx_transaction_items_transaction_id'), table_name='transaction_items', schema='joaocastanheira_bancodedados')
    op.drop_table('transaction_items', schema='joaocastanheira_bancodedados')
    op.drop_index(op.f('idx_user_subscriptions_status'), table_name='user_subscriptions', schema='synapscale_db')
    op.drop_index(op.f('idx_user_subscriptions_user_id'), table_name='user_subscriptions', schema='synapscale_db')
    op.drop_table('user_subscriptions', schema='synapscale_db')
    op.drop_table('node_categories', schema='synapscale_db')
    op.drop_index(op.f('idx_ptu_platform_sale'), table_name='platform_transaction_utm', schema='banco_de_dados')
    op.drop_index(op.f('idx_ptu_platform_subscription'), table_name='platform_transaction_utm', schema='banco_de_dados')
    op.drop_index(op.f('idx_ptu_platform_utm'), table_name='platform_transaction_utm', schema='banco_de_dados')
    op.drop_table('platform_transaction_utm', schema='banco_de_dados')
    op.drop_index(op.f('idx_transaction_fees_currency_code'), table_name='transaction_fees', schema='joaocastanheira_bancodedados')
    op.drop_index(op.f('idx_transaction_fees_transaction_id'), table_name='transaction_fees', schema='joaocastanheira_bancodedados')
    op.drop_index(op.f('idx_transaction_fees_type'), table_name='transaction_fees', schema='joaocastanheira_bancodedados')
    op.drop_table('transaction_fees', schema='joaocastanheira_bancodedados')
    op.drop_index(op.f('idx_platform_utm_history_campaign'), table_name='platform_utm_history', schema='joaocastanheira_bancodedados')
    op.drop_index(op.f('idx_platform_utm_history_source_medium'), table_name='platform_utm_history', schema='joaocastanheira_bancodedados')
    op.drop_index(op.f('idx_platform_utm_history_transaction_id'), table_name='platform_utm_history', schema='joaocastanheira_bancodedados')
    op.drop_table('platform_utm_history', schema='joaocastanheira_bancodedados')
    op.drop_index(op.f('idx_platform_sale_offer_history_code'), table_name='platform_sale_offer_history', schema='joaocastanheira_bancodedados')
    op.drop_index(op.f('idx_platform_sale_offer_history_offer_id'), table_name='platform_sale_offer_history', schema='joaocastanheira_bancodedados')
    op.drop_index(op.f('idx_platform_sale_offer_history_trans_id'), table_name='platform_sale_offer_history', schema='joaocastanheira_bancodedados')
    op.drop_table('platform_sale_offer_history', schema='joaocastanheira_bancodedados')
    op.drop_index(op.f('idx_data_transacao'), table_name='vendas_na_hotmart', schema='banco_de_dados_jc')
    op.drop_index(op.f('idx_id_produto'), table_name='vendas_na_hotmart', schema='banco_de_dados_jc')
    op.drop_index(op.f('idx_status_transacao'), table_name='vendas_na_hotmart', schema='banco_de_dados_jc')
    op.drop_table('vendas_na_hotmart', schema='banco_de_dados_jc')
    op.drop_index(op.f('idx_ptc_platform_commission'), table_name='platform_transaction_commission', schema='banco_de_dados')
    op.drop_index(op.f('idx_ptc_platform_sale'), table_name='platform_transaction_commission', schema='banco_de_dados')
    op.drop_index(op.f('idx_ptc_platform_subscription'), table_name='platform_transaction_commission', schema='banco_de_dados')
    op.drop_table('platform_transaction_commission', schema='banco_de_dados')
    op.drop_table('alembic_version')
    op.drop_index(op.f('idx_pc_participant'), table_name='platform_commission', schema='banco_de_dados')
    op.drop_index(op.f('idx_pc_platform_id'), table_name='platform_commission', schema='banco_de_dados')
    op.drop_table('platform_commission', schema='banco_de_dados')
    # Now safe to drop platform_commission_participants after its dependencies are gone
    op.drop_index(op.f('idx_pcp_client_address'), table_name='platform_commission_participants', schema='banco_de_dados')
    op.drop_index(op.f('idx_pcp_platform_id'), table_name='platform_commission_participants', schema='banco_de_dados')
    op.drop_table('platform_commission_participants', schema='banco_de_dados')
    op.drop_index(op.f('ix_public_workflow_nodes_node_id'), table_name='workflow_nodes', schema='synapscale_db')
    op.drop_index(op.f('ix_public_workflow_nodes_workflow_id'), table_name='workflow_nodes', schema='synapscale_db')
    op.drop_table('workflow_nodes', schema='synapscale_db')
    op.drop_index(op.f('ix_public_system_performance_metrics_id'), table_name='system_performance_metrics', schema='synapscale_db')
    op.drop_index(op.f('ix_public_system_performance_metrics_metric_name'), table_name='system_performance_metrics', schema='synapscale_db')
    op.drop_index(op.f('ix_public_system_performance_metrics_service'), table_name='system_performance_metrics', schema='synapscale_db')
    op.drop_index(op.f('ix_public_system_performance_metrics_timestamp'), table_name='system_performance_metrics', schema='synapscale_db')
    op.drop_table('system_performance_metrics', schema='synapscale_db')
    op.drop_index(op.f('ix_public_workspace_invitations_email'), table_name='workspace_invitations', schema='synapscale_db')
    op.drop_index(op.f('ix_public_workspace_invitations_invited_user_id'), table_name='workspace_invitations', schema='synapscale_db')
    op.drop_index(op.f('ix_public_workspace_invitations_inviter_id'), table_name='workspace_invitations', schema='synapscale_db')
    op.drop_index(op.f('ix_public_workspace_invitations_token'), table_name='workspace_invitations', schema='synapscale_db')
    op.drop_index(op.f('ix_public_workspace_invitations_workspace_id'), table_name='workspace_invitations', schema='synapscale_db')
    op.drop_table('workspace_invitations', schema='synapscale_db')
    op.drop_index(op.f('idx_pscpi_sale_client'), table_name='platform_sale_client_platform_id', schema='banco_de_dados')
    op.drop_index(op.f('uq_pscpi_platform_platform_id'), table_name='platform_sale_client_platform_id', schema='banco_de_dados')
    op.drop_table('platform_sale_client_platform_id', schema='banco_de_dados')
    op.drop_index(op.f('ix_synapscale_db_refresh_tokens_token'), table_name='refresh_tokens', schema='synapscale_db')
    op.drop_index(op.f('ix_synapscale_db_refresh_tokens_user_id'), table_name='refresh_tokens', schema='synapscale_db')
    op.drop_table('refresh_tokens', schema='synapscale_db')
    op.drop_index(op.f('comissoes_vendas_na_hotmart_id_transacao_uindex'), table_name='comissoes_vendas_na_hotmart', schema='banco_de_dados_jc')
    op.drop_table('comissoes_vendas_na_hotmart', schema='banco_de_dados_jc')
    op.drop_table('dim_produto', schema='banco_de_dados_jc')
    op.drop_table('node_templates', schema='synapscale_db')
    op.drop_index(op.f('ix_public_execution_queue_id'), table_name='execution_queue', schema='synapscale_db')
    op.drop_index(op.f('ix_public_execution_queue_priority'), table_name='execution_queue', schema='synapscale_db')
    op.drop_index(op.f('ix_public_execution_queue_queue_id'), table_name='execution_queue', schema='synapscale_db')
    op.drop_index(op.f('ix_public_execution_queue_scheduled_at'), table_name='execution_queue', schema='synapscale_db')
    op.drop_index(op.f('ix_public_execution_queue_status'), table_name='execution_queue', schema='synapscale_db')
    op.drop_index(op.f('ix_public_execution_queue_user_id'), table_name='execution_queue', schema='synapscale_db')
    op.drop_index(op.f('ix_public_execution_queue_worker_id'), table_name='execution_queue', schema='synapscale_db')
    op.drop_index(op.f('ix_public_execution_queue_workflow_execution_id'), table_name='execution_queue', schema='synapscale_db')
    op.drop_table('execution_queue', schema='synapscale_db')
    op.drop_index(op.f('ix_public_analytics_dashboards_user_id'), table_name='analytics_dashboards', schema='synapscale_db')
    op.drop_index(op.f('ix_public_analytics_dashboards_workspace_id'), table_name='analytics_dashboards', schema='synapscale_db')
    op.drop_table('analytics_dashboards', schema='synapscale_db')
    op.drop_index(op.f('idx_vendas_kiwify_email_produto_data'), table_name='vendas_kiwify', schema='banco_de_dados_jc')
    op.drop_index(op.f('idx_vendas_kiwify_produto_data'), table_name='vendas_kiwify', schema='banco_de_dados_jc')
    op.drop_table('vendas_kiwify', schema='banco_de_dados_jc')
    op.drop_index(op.f('idx_tmp_consolidado_produtos_codigo_produto'), table_name='tmp_consolidado_produtos', schema='banco_de_dados_jc')
    op.drop_index(op.f('idx_tmp_consolidado_produtos_origem'), table_name='tmp_consolidado_produtos', schema='banco_de_dados_jc')
    op.drop_index(op.f('idx_tmp_produtos_codigo'), table_name='tmp_consolidado_produtos', schema='banco_de_dados_jc')
    op.drop_index(op.f('idx_tmp_produtos_origem'), table_name='tmp_consolidado_produtos', schema='banco_de_dados_jc')
    op.drop_table('tmp_consolidado_produtos', schema='banco_de_dados_jc')
    op.drop_index(op.f('idx_psca_city'), table_name='platform_sale_client_address', schema='banco_de_dados')
    op.drop_index(op.f('idx_psca_zip_code'), table_name='platform_sale_client_address', schema='banco_de_dados')
    op.drop_table('platform_sale_client_address', schema='banco_de_dados')
    op.drop_index(op.f('idx_ptpay_payment_history'), table_name='platform_transaction_payment', schema='banco_de_dados')
    op.drop_index(op.f('idx_ptpay_platform_sale'), table_name='platform_transaction_payment', schema='banco_de_dados')
    op.drop_index(op.f('idx_ptpay_platform_subscription'), table_name='platform_transaction_payment', schema='banco_de_dados')
    op.drop_table('platform_transaction_payment', schema='banco_de_dados')
    op.drop_index(op.f('idx_transactions_created_at'), table_name='transactions', schema='joaocastanheira_bancodedados')
    op.drop_index(op.f('idx_transactions_currency_code'), table_name='transactions', schema='joaocastanheira_bancodedados')
    op.drop_index(op.f('idx_transactions_customer_id'), table_name='transactions', schema='joaocastanheira_bancodedados')
    op.drop_index(op.f('idx_transactions_order_date'), table_name='transactions', schema='joaocastanheira_bancodedados')
    op.drop_index(op.f('idx_transactions_payment_gateway'), table_name='transactions', schema='joaocastanheira_bancodedados')
    op.drop_index(op.f('idx_transactions_payment_method'), table_name='transactions', schema='joaocastanheira_bancodedados')
    op.drop_index(op.f('idx_transactions_platform_subscription_id'), table_name='transactions', schema='joaocastanheira_bancodedados')
    op.drop_index(op.f('idx_transactions_recurrence_number'), table_name='transactions', schema='joaocastanheira_bancodedados')
    op.drop_index(op.f('idx_transactions_status_id'), table_name='transactions', schema='joaocastanheira_bancodedados')
    op.drop_index(op.f('idx_transactions_subscription_id'), table_name='transactions', schema='joaocastanheira_bancodedados')
    op.drop_table('transactions', schema='joaocastanheira_bancodedados')
    op.drop_index(op.f('idx_putmh_external_code'), table_name='platform_utm_history', schema='banco_de_dados')
    op.drop_index(op.f('idx_putmh_gclid'), table_name='platform_utm_history', schema='banco_de_dados')
    op.drop_index(op.f('idx_putmh_utm_campaign'), table_name='platform_utm_history', schema='banco_de_dados')
    op.drop_index(op.f('idx_putmh_utm_source'), table_name='platform_utm_history', schema='banco_de_dados')
    op.drop_table('platform_utm_history', schema='banco_de_dados')
    op.drop_index(op.f('idx_psih_invoice_created_at'), table_name='platform_software_invoice_history', schema='banco_de_dados')
    op.drop_index(op.f('idx_psih_invoice_status'), table_name='platform_software_invoice_history', schema='banco_de_dados')
    op.drop_table('platform_software_invoice_history', schema='banco_de_dados')
    op.drop_index(op.f('idx_psoh_code'), table_name='platform_sale_offer_history', schema='banco_de_dados')
    op.drop_index(op.f('idx_psoh_id_offer'), table_name='platform_sale_offer_history', schema='banco_de_dados')
    op.drop_table('platform_sale_offer_history', schema='banco_de_dados')
    op.drop_index(op.f('idx_customer_external_ids_customer_id'), table_name='customer_external_ids', schema='joaocastanheira_bancodedados')
    op.drop_index(op.f('idx_customer_external_ids_external_id'), table_name='customer_external_ids', schema='joaocastanheira_bancodedados')
    op.drop_index(op.f('idx_customer_external_ids_platform'), table_name='customer_external_ids', schema='joaocastanheira_bancodedados')
    op.drop_index(op.f('idx_customer_external_ids_platform_external_id'), table_name='customer_external_ids', schema='joaocastanheira_bancodedados')
    op.drop_table('customer_external_ids', schema='joaocastanheira_bancodedados')
    op.drop_index(op.f('idx_subscriptions_cancel_date'), table_name='subscriptions', schema='joaocastanheira_bancodedados')
    op.drop_index(op.f('idx_subscriptions_customer_id'), table_name='subscriptions', schema='joaocastanheira_bancodedados')
    op.drop_index(op.f('idx_subscriptions_end_date'), table_name='subscriptions', schema='joaocastanheira_bancodedados')
    op.drop_index(op.f('idx_subscriptions_next_billing_date'), table_name='subscriptions', schema='joaocastanheira_bancodedados')
    op.drop_index(op.f('idx_subscriptions_payment_gateway'), table_name='subscriptions', schema='joaocastanheira_bancodedados')
    op.drop_index(op.f('idx_subscriptions_plan_id'), table_name='subscriptions', schema='joaocastanheira_bancodedados')
    op.drop_index(op.f('idx_subscriptions_start_date'), table_name='subscriptions', schema='joaocastanheira_bancodedados')
    op.drop_index(op.f('idx_subscriptions_status_id'), table_name='subscriptions', schema='joaocastanheira_bancodedados')
    op.drop_index(op.f('idx_subscriptions_subscriber_id'), table_name='subscriptions', schema='joaocastanheira_bancodedados')
    op.drop_table('subscriptions', schema='joaocastanheira_bancodedados')
    op.drop_index(op.f('idx_offers_plan_id'), table_name='offers', schema='joaocastanheira_bancodedados')
    op.drop_index(op.f('idx_offers_platform_origin'), table_name='offers', schema='joaocastanheira_bancodedados')
    op.drop_index(op.f('idx_offers_product_id'), table_name='offers', schema='joaocastanheira_bancodedados')
    op.drop_table('offers', schema='joaocastanheira_bancodedados')
    op.drop_index(op.f('idx_ps_client'), table_name='platform_sale', schema='banco_de_dados')
    op.drop_index(op.f('uq_ps_transaction'), table_name='platform_sale', schema='banco_de_dados')
    op.drop_table('platform_sale', schema='banco_de_dados')
    op.drop_index(op.f('ix_public_project_collaborators_project_id'), table_name='project_collaborators', schema='synapscale_db')
    op.drop_index(op.f('ix_public_project_collaborators_user_id'), table_name='project_collaborators', schema='synapscale_db')
    op.drop_table('project_collaborators', schema='synapscale_db')
    op.drop_index(op.f('idx_file_created_at'), table_name='files', schema='synapscale_db')
    op.drop_index(op.f('idx_file_filename'), table_name='files', schema='synapscale_db')
    op.drop_table('files', schema='synapscale_db')
    op.drop_index(op.f('idx_pto_platform_offer_history'), table_name='platform_transaction_offer', schema='banco_de_dados')
    op.drop_index(op.f('idx_pto_platform_sale'), table_name='platform_transaction_offer', schema='banco_de_dados')
    op.drop_index(op.f('idx_pto_platform_subscription'), table_name='platform_transaction_offer', schema='banco_de_dados')
    op.drop_table('platform_transaction_offer', schema='banco_de_dados')
    op.drop_index(op.f('idx_plat_trans_pay_hist_pay_date'), table_name='platform_transaction_payment_history', schema='joaocastanheira_bancodedados')
    op.drop_index(op.f('idx_plat_trans_pay_hist_pay_method'), table_name='platform_transaction_payment_history', schema='joaocastanheira_bancodedados')
    op.drop_index(op.f('idx_plat_trans_pay_hist_trans_id'), table_name='platform_transaction_payment_history', schema='joaocastanheira_bancodedados')
    op.drop_table('platform_transaction_payment_history', schema='joaocastanheira_bancodedados')
    op.drop_table('user_variables', schema='synapscale_db')
    op.drop_index(op.f('ix_public_template_reviews_id'), table_name='template_reviews', schema='synapscale_db')
    op.drop_index(op.f('ix_public_template_reviews_template_id'), table_name='template_reviews', schema='synapscale_db')
    op.drop_index(op.f('ix_public_template_reviews_user_id'), table_name='template_reviews', schema='synapscale_db')
    op.drop_table('template_reviews', schema='synapscale_db')
    op.drop_table('messages', schema='synapscale_db')
    op.drop_index(op.f('ix_public_execution_metrics_context'), table_name='execution_metrics', schema='synapscale_db')
    op.drop_index(op.f('ix_public_execution_metrics_id'), table_name='execution_metrics', schema='synapscale_db')
    op.drop_index(op.f('ix_public_execution_metrics_measured_at'), table_name='execution_metrics', schema='synapscale_db')
    op.drop_index(op.f('ix_public_execution_metrics_metric_name'), table_name='execution_metrics', schema='synapscale_db')
    op.drop_index(op.f('ix_public_execution_metrics_metric_type'), table_name='execution_metrics', schema='synapscale_db')
    op.drop_index(op.f('ix_public_execution_metrics_node_execution_id'), table_name='execution_metrics', schema='synapscale_db')
    op.drop_index(op.f('ix_public_execution_metrics_workflow_execution_id'), table_name='execution_metrics', schema='synapscale_db')
    op.drop_table('execution_metrics', schema='synapscale_db')
    op.drop_index(op.f('idx_vendas_hotmart_email_produto_data'), table_name='vendas_hotmart', schema='banco_de_dados_jc')
    op.drop_index(op.f('idx_vendas_hotmart_produto_data'), table_name='vendas_hotmart', schema='banco_de_dados_jc')
    op.drop_table('vendas_hotmart', schema='banco_de_dados_jc')
    op.drop_index(op.f('ix_public_node_executions_execution_id'), table_name='node_executions', schema='synapscale_db')
    op.drop_index(op.f('ix_public_node_executions_execution_order'), table_name='node_executions', schema='synapscale_db')
    op.drop_index(op.f('ix_public_node_executions_id'), table_name='node_executions', schema='synapscale_db')
    op.drop_index(op.f('ix_public_node_executions_node_id'), table_name='node_executions', schema='synapscale_db')
    op.drop_index(op.f('ix_public_node_executions_node_key'), table_name='node_executions', schema='synapscale_db')
    op.drop_index(op.f('ix_public_node_executions_node_type'), table_name='node_executions', schema='synapscale_db')
    op.drop_index(op.f('ix_public_node_executions_status'), table_name='node_executions', schema='synapscale_db')
    op.drop_index(op.f('ix_public_node_executions_workflow_execution_id'), table_name='node_executions', schema='synapscale_db')
    op.drop_table('node_executions', schema='synapscale_db')
    op.drop_table('analytics_reports', schema='synapscale_db')
    op.drop_index(op.f('idx_ptfee_platform_sale'), table_name='platform_transaction_fee', schema='banco_de_dados')
    op.drop_index(op.f('idx_ptfee_platform_subscription'), table_name='platform_transaction_fee', schema='banco_de_dados')
    op.drop_table('platform_transaction_fee', schema='banco_de_dados')
    op.drop_table('detalhes_precos_vendas_na_hotmart', schema='banco_de_dados_jc')
    op.drop_table('dim_cliente', schema='banco_de_dados_jc')
    op.drop_index(op.f('idx_plans_is_active'), table_name='plans', schema='synapscale_db')
    op.drop_index(op.f('idx_plans_type'), table_name='plans', schema='synapscale_db')
    op.drop_table('plans', schema='synapscale_db')
    op.drop_index(op.f('ix_public_workspace_projects_workflow_id'), table_name='workspace_projects', schema='synapscale_db')
    op.drop_index(op.f('ix_public_workspace_projects_workspace_id'), table_name='workspace_projects', schema='synapscale_db')
    op.drop_table('workspace_projects', schema='synapscale_db')
    op.drop_index(op.f('idx_workspaces_type'), table_name='workspaces', schema='synapscale_db')
    op.drop_index(op.f('ix_public_workspaces_slug'), table_name='workspaces', schema='synapscale_db')
    op.drop_table('workspaces', schema='synapscale_db')
    op.drop_index(op.f('idx_vendas_payt_email_data'), table_name='vendas_payt', schema='banco_de_dados_jc')
    op.drop_index(op.f('idx_vendas_payt_produto_data'), table_name='vendas_payt', schema='banco_de_dados_jc')
    op.drop_table('vendas_payt', schema='banco_de_dados_jc')
    op.drop_index(op.f('ix_public_component_ratings_component_id'), table_name='component_ratings', schema='synapscale_db')
    op.drop_index(op.f('ix_public_component_ratings_user_id'), table_name='component_ratings', schema='synapscale_db')
    op.drop_table('component_ratings', schema='synapscale_db')
    op.drop_table('analytics_exports', schema='synapscale_db')
    op.drop_table('transaction_statuses', schema='joaocastanheira_bancodedados')
    op.drop_index(op.f('idx_ptpph_card_flag'), table_name='platform_transaction_payment_history', schema='banco_de_dados')
    op.drop_index(op.f('idx_ptpph_currency'), table_name='platform_transaction_payment_history', schema='banco_de_dados')
    op.drop_index(op.f('idx_ptpph_payment_type'), table_name='platform_transaction_payment_history', schema='banco_de_dados')
    op.drop_table('platform_transaction_payment_history', schema='banco_de_dados')
    op.drop_index(op.f('idx_psc_client_address'), table_name='platform_sale_client', schema='banco_de_dados')
    op.drop_index(op.f('idx_psc_profile'), table_name='platform_sale_client', schema='banco_de_dados')
    op.drop_index(op.f('uq_psc_email'), table_name='platform_sale_client', schema='banco_de_dados')
    op.drop_table('platform_sale_client', schema='banco_de_dados')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('platform_sale_client',
    sa.Column('id', sa.BIGINT(), sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1), autoincrement=True, nullable=False, comment='Identificador único do registro (chave primária).'),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=False, comment='Endereço de e‑mail do cliente (valor mais recente conhecido).'),
    sa.Column('name', sa.VARCHAR(length=150), autoincrement=False, nullable=False, comment='Nome do cliente (valor mais recente conhecido).'),
    sa.Column('phone', sa.VARCHAR(length=20), autoincrement=False, nullable=True, comment='Número de telefone do cliente.'),
    sa.Column('document', sa.VARCHAR(length=20), autoincrement=False, nullable=True, comment='Documento de identificação (CPF ou CNPJ).'),
    sa.Column('profile_id', sa.BIGINT(), autoincrement=False, nullable=False, comment='ID na tabela profile que representa o dono da venda.'),
    sa.Column('client_address_id', sa.BIGINT(), autoincrement=False, nullable=False, comment='ID na tabela platform_sale_client_address com o endereço do cliente.'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False, comment='Data/hora em que o cliente foi registrado.'),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False, comment='Data/hora da última atualização dos dados do cliente.'),
    sa.ForeignKeyConstraint(['client_address_id'], ['banco_de_dados.platform_sale_client_address.id'], name='fk_psc_platform_sale_client_address', onupdate='CASCADE', ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id', name='platform_sale_client_pkey'),
    schema='banco_de_dados',
    comment='Dados principais de cada cliente que efetuou vendas na plataforma.',
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('uq_psc_email'), 'platform_sale_client', ['email'], unique=True, schema='banco_de_dados')
    op.create_index(op.f('idx_psc_profile'), 'platform_sale_client', ['profile_id'], unique=False, schema='banco_de_dados')
    op.create_index(op.f('idx_psc_client_address'), 'platform_sale_client', ['client_address_id'], unique=False, schema='banco_de_dados')
    op.create_table('platform_transaction_payment_history',
    sa.Column('id', sa.BIGINT(), sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1), autoincrement=True, nullable=False, comment='Identificador único do pagamento.'),
    sa.Column('type', sa.VARCHAR(length=50), autoincrement=False, nullable=False, comment='Método de pagamento utilizado (ex.: Pix, Cartão, Boleto).'),
    sa.Column('installments', sa.INTEGER(), autoincrement=False, nullable=True, comment='Número de parcelas, se aplicável para pagamentos parcelados no cartão.'),
    sa.Column('installment_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True, comment='Tipo de parcelamento, se houver.'),
    sa.Column('card_last_digits', sa.VARCHAR(length=4), autoincrement=False, nullable=True, comment='Últimos quatro dígitos do cartão utilizado no pagamento.'),
    sa.Column('card_change', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False, comment='Indica se houve troca de cartão durante o pagamento (FALSE = não, TRUE = sim).'),
    sa.Column('card_flag', sa.VARCHAR(length=20), autoincrement=False, nullable=True, comment='Bandeira do cartão de crédito (ex.: Visa, Mastercard, Elo).'),
    sa.Column('refusal_message', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='Mensagem de recusa do pagamento, se o mesmo foi negado.'),
    sa.Column('current_installment', sa.INTEGER(), autoincrement=False, nullable=True, comment='Número da parcela atual, no caso de pagamentos parcelados.'),
    sa.Column('base_value', sa.INTEGER(), autoincrement=False, nullable=False, comment='Valor base do produto ou serviço adquirido, em centavos.'),
    sa.Column('gross_value', sa.INTEGER(), autoincrement=False, nullable=False, comment='Valor bruto recebido antes de taxas e descontos, em centavos.'),
    sa.Column('net_value', sa.INTEGER(), autoincrement=False, nullable=False, comment='Valor líquido recebido após a aplicação de taxas e descontos, em centavos.'),
    sa.Column('currency', sa.INTEGER(), autoincrement=False, nullable=False, comment='Código da moeda utilizada na transação (ex.: USD=840, BRL=986, EUR=978).'),
    sa.Column('payment_gateway', sa.VARCHAR(length=50), autoincrement=False, nullable=True, comment='Nome do gateway de pagamento utilizado (ex.: Stripe, PayPal, PagSeguro).'),
    sa.Column('billet_expiration', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True, comment='Data de expiração do boleto bancário, se aplicável.'),
    sa.Column('billet_recovery', sa.VARCHAR(length=50), autoincrement=False, nullable=True, comment='Tipo de recuperação do boleto (ex.: reimpressão).'),
    sa.Column('billet_reprint_code', sa.VARCHAR(length=100), autoincrement=False, nullable=True, comment='Código de reimpressão do boleto, se disponível.'),
    sa.Column('chargeback_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True, comment='Data/hora do estorno do pagamento, caso ocorra um chargeback.'),
    sa.Column('pix_expiration_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True, comment='Data/hora de expiração do Pix gerado para pagamento.'),
    sa.Column('approved_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True, comment='Data/hora em que o pagamento foi aprovado.'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False, comment='Data/hora em que o registro foi inserido na tabela.'),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False, comment='Data/hora da última atualização do registro.'),
    sa.PrimaryKeyConstraint('id', name='platform_transaction_payment_history_pkey'),
    schema='banco_de_dados',
    comment='Histórico dos pagamentos realizados, contendo detalhes sobre o método de pagamento, parcelas, valores monetários e demais informações relevantes para auditoria.',
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('idx_ptpph_payment_type'), 'platform_transaction_payment_history', ['type'], unique=False, schema='banco_de_dados')
    op.create_index(op.f('idx_ptpph_currency'), 'platform_transaction_payment_history', ['currency'], unique=False, schema='banco_de_dados')
    op.create_index(op.f('idx_ptpph_card_flag'), 'platform_transaction_payment_history', ['card_flag'], unique=False, schema='banco_de_dados')
    op.create_table('transaction_statuses',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('joaocastanheira_bancodedados.transaction_statuses_id_seq'::regclass)"), autoincrement=True, nullable=False, comment='Identificador sequencial único do estado.'),
    sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=False, comment='Nome padronizado do estado (ex: "Aprovada", "Recusada", "Reembolsada", "Ativa", "Inadimplente", "Cancelada Assinante").'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True, comment='Timestamp da criação do registro.'),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True, comment='Timestamp da última atualização do registro.'),
    sa.PrimaryKeyConstraint('id', name='transaction_statuses_pkey'),
    sa.UniqueConstraint('status', name='transaction_statuses_status_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    schema='joaocastanheira_bancodedados',
    comment='Normaliza status de APIs (Hotmart: APPROVED->Aprovada, REFUNDED->Reembolsada; Kiwify: paid->Aprovada, refunded->Reembolsada).',
    postgresql_ignore_search_path=False
    )
    op.create_table('analytics_exports',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('export_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('query', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('file_path', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'pending'::character varying"), autoincrement=False, nullable=False),
    sa.Column('owner_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('completed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['owner_id'], ['synapscale_db.users.id'], name=op.f('analytics_exports_owner_id_fkey'), onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('analytics_exports_pkey')),
    schema='synapscale_db'
    )
    op.create_table('component_ratings',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('component_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('rating', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('review', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('ease_of_use', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('documentation_quality', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('performance', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('reliability', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('support_quality', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('version_used', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('use_case', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('experience_level', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('helpful_count', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('reported_count', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('is_verified_purchase', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('is_featured', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['component_id'], ['synapscale_db.marketplace_components.id'], name=op.f('component_ratings_component_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['synapscale_db.users.id'], name=op.f('component_ratings_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('component_ratings_pkey')),
    schema='synapscale_db'
    )
    op.create_index(op.f('ix_public_component_ratings_user_id'), 'component_ratings', ['user_id'], unique=False, schema='synapscale_db')
    op.create_index(op.f('ix_public_component_ratings_component_id'), 'component_ratings', ['component_id'], unique=False, schema='synapscale_db')
    op.create_table('vendas_payt',
    sa.Column('codigo', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('tags', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('cliente', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('tipo_venda', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('sku', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('produto', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('quantidade_produtos', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('codigo_checkout', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('nome_checkout', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('source_venda_manual', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('status_compra', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('status_pagamento', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('preco_produto', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('valor_venda', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('rede_afiliado', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('afiliado', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('custo_afiliado', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('taxa_callcenter', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('frete', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('saldo_venda', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('custo_coproducao', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('custo_fornecedor', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('voce_recebe', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('saldo_disponivel_em', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('parcelas', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('forma_pagamento', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('codigo_cupom', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('data', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('documento', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('cidade', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('complemento', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('bairro', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('estado', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('rua', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('numero', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('cep', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('telefone', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('codigo_rastreio', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('url_acompanhamento', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('codigo', name=op.f('vendas_payt_pkey')),
    schema='banco_de_dados_jc',
    comment='folder:origem|Tabela recebe transações Payt (compra, status, dados do cliente).'
    )
    op.create_index(op.f('idx_vendas_payt_produto_data'), 'vendas_payt', ['produto', sa.literal_column('data DESC')], unique=False, schema='banco_de_dados_jc')
    op.create_index(op.f('idx_vendas_payt_email_data'), 'vendas_payt', ['email', sa.literal_column('data DESC')], unique=False, schema='banco_de_dados_jc')
    op.create_table('workspaces',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('slug', sa.VARCHAR(length=120), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('avatar_url', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('color', sa.VARCHAR(length=7), autoincrement=False, nullable=True),
    sa.Column('owner_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('is_public', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('is_template', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('allow_guest_access', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('require_approval', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('max_members', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('max_projects', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('max_storage_mb', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('enable_real_time_editing', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('enable_comments', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('enable_chat', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('enable_video_calls', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('notification_settings', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('member_count', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('project_count', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('activity_count', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('storage_used_mb', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('last_activity_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('type', postgresql.ENUM('INDIVIDUAL', 'COLLABORATIVE', name='workspacetype'), server_default=sa.text("'INDIVIDUAL'::workspacetype"), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['owner_id'], ['synapscale_db.users.id'], name='workspaces_owner_id_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='workspaces_pkey'),
    schema='synapscale_db',
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_public_workspaces_slug'), 'workspaces', ['slug'], unique=True, schema='synapscale_db')
    op.create_index(op.f('idx_workspaces_type'), 'workspaces', ['type'], unique=False, schema='synapscale_db')
    op.create_table('workspace_projects',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('workspace_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('workflow_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('color', sa.VARCHAR(length=7), autoincrement=False, nullable=True),
    sa.Column('allow_concurrent_editing', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('auto_save_interval', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('version_control_enabled', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('is_template', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('is_public', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('collaborator_count', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('edit_count', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('comment_count', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('last_edited_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['workflow_id'], ['synapscale_db.workflows.id'], name='workspace_projects_workflow_id_fkey'),
    sa.ForeignKeyConstraint(['workspace_id'], ['synapscale_db.workspaces.id'], name='workspace_projects_workspace_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='workspace_projects_pkey'),
    schema='synapscale_db',
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_public_workspace_projects_workspace_id'), 'workspace_projects', ['workspace_id'], unique=False, schema='synapscale_db')
    op.create_index(op.f('ix_public_workspace_projects_workflow_id'), 'workspace_projects', ['workflow_id'], unique=False, schema='synapscale_db')
    op.create_table('plans',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('slug', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('type', postgresql.ENUM('free', 'basic', 'pro', 'enterprise', name='plantype'), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('price_monthly', sa.DOUBLE_PRECISION(precision=53), server_default=sa.text('0.0'), autoincrement=False, nullable=False),
    sa.Column('price_yearly', sa.DOUBLE_PRECISION(precision=53), server_default=sa.text('0.0'), autoincrement=False, nullable=False),
    sa.Column('max_workspaces', sa.INTEGER(), server_default=sa.text('1'), autoincrement=False, nullable=False),
    sa.Column('max_members_per_workspace', sa.INTEGER(), server_default=sa.text('1'), autoincrement=False, nullable=False),
    sa.Column('max_projects_per_workspace', sa.INTEGER(), server_default=sa.text('10'), autoincrement=False, nullable=False),
    sa.Column('max_storage_mb', sa.INTEGER(), server_default=sa.text('100'), autoincrement=False, nullable=False),
    sa.Column('max_executions_per_month', sa.INTEGER(), server_default=sa.text('100'), autoincrement=False, nullable=False),
    sa.Column('allow_collaborative_workspaces', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('allow_custom_domains', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('allow_api_access', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('allow_advanced_analytics', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('allow_priority_support', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('features', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('restrictions', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('is_public', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='plans_pkey'),
    sa.UniqueConstraint('slug', name='plans_slug_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    schema='synapscale_db',
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('idx_plans_type'), 'plans', ['type'], unique=False, schema='synapscale_db')
    op.create_index(op.f('idx_plans_is_active'), 'plans', ['is_active'], unique=False, schema='synapscale_db')
    op.create_table('dim_cliente',
    sa.Column('cliente_id', sa.INTEGER(), server_default=sa.text("nextval('banco_de_dados_jc.dim_cliente_cliente_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('nome', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('sobrenome', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('documento', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('telefone', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('endereco', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('bairro', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('cidade', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('estado', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('cep', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('pais', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('active_campaign', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('active_quantidade_emails_recebidos', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('active_quantidade_emails_abertos', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('active_quantidade_emails_clicados', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('active_ultimo_email_aberto', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('active_ultimo_email_clicado', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('lead_score', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('status_lead', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('data_criacao_lead', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('data_conversao_cliente', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('data_ultimo_cadastro', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('quantidade_recadastros', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('utm_source_captura', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('utm_medium_captura', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('utm_campaign_captura', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('utm_term_captura', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('utm_content_captura', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('tags', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('endereco_ip', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('latitude', sa.NUMERIC(precision=10, scale=6), autoincrement=False, nullable=True),
    sa.Column('longitude', sa.NUMERIC(precision=10, scale=6), autoincrement=False, nullable=True),
    sa.Column('observacoes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('ac_contact_id', sa.VARCHAR(length=255), server_default=sa.text("nextval('banco_de_dados_jc.contatos_activecampaign'::regclass)"), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('cliente_id', name='dim_cliente_pkey'),
    sa.UniqueConstraint('ac_contact_id', name='dim_cliente_pk_activecampaignid', postgresql_include=[], postgresql_nulls_not_distinct=False),
    schema='banco_de_dados_jc',
    comment='folder:dimensao|Tabela de clientes/leads, incluindo endereços, tags e UTMs.',
    postgresql_ignore_search_path=False
    )
    op.create_table('detalhes_precos_vendas_na_hotmart',
    sa.Column('id_transacao', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('numero_da_venda', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('data_criacao', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('id_produto', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('nome_produto', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('valor_base_produto', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=False),
    sa.Column('moeda_base_produto', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('valor_total', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=False),
    sa.Column('moeda_total', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('valor_imposto', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=True),
    sa.Column('moeda_imposto', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('valor_taxa', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=True),
    sa.Column('moeda_taxa', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('codigo_cupom', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('valor_cupom', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=True),
    sa.Column('taxa_conversao_real', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id_transacao', name=op.f('detalhes_precos_vendas_hotmart_pkey')),
    schema='banco_de_dados_jc'
    )
    op.create_table('platform_transaction_fee',
    sa.Column('id', sa.BIGINT(), sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1), autoincrement=True, nullable=False, comment='Identificador único do registro.'),
    sa.Column('platform_sale_id', sa.BIGINT(), autoincrement=False, nullable=True, comment='ID da venda associada à taxa (tabela platform_sale).'),
    sa.Column('platform_subscription_id', sa.BIGINT(), autoincrement=False, nullable=True, comment='ID da assinatura associada à taxa (tabela platform_subscription).'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False, comment='Data/hora em que o registro foi criado.'),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False, comment='Data/hora da última atualização do registro.'),
    sa.ForeignKeyConstraint(['platform_sale_id'], ['banco_de_dados.platform_sale.id'], name=op.f('fk_ptfee_sale'), onupdate='CASCADE', ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['platform_subscription_id'], ['banco_de_dados.platform_subscription.id'], name=op.f('fk_ptfee_subscription'), onupdate='CASCADE', ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id', name=op.f('platform_transaction_fee_pkey')),
    schema='banco_de_dados',
    comment='Taxas aplicadas a vendas únicas ou assinaturas.'
    )
    op.create_index(op.f('idx_ptfee_platform_subscription'), 'platform_transaction_fee', ['platform_subscription_id'], unique=False, schema='banco_de_dados')
    op.create_index(op.f('idx_ptfee_platform_sale'), 'platform_transaction_fee', ['platform_sale_id'], unique=False, schema='banco_de_dados')
    op.create_table('analytics_reports',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('query', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('schedule', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('owner_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['owner_id'], ['synapscale_db.users.id'], name=op.f('analytics_reports_owner_id_fkey'), onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('analytics_reports_pkey')),
    schema='synapscale_db'
    )
    op.create_table('node_executions',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('synapscale_db.node_executions_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('execution_id', sa.VARCHAR(length=36), autoincrement=False, nullable=True),
    sa.Column('workflow_execution_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('node_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('node_key', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('node_type', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('node_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('status', postgresql.ENUM('PENDING', 'RUNNING', 'COMPLETED', 'FAILED', 'SKIPPED', 'RETRY', name='nodeexecutionstatus'), autoincrement=False, nullable=True),
    sa.Column('execution_order', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('input_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('output_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('config_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('started_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('completed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('timeout_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('duration_ms', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('execution_log', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('error_details', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('debug_info', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('retry_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('max_retries', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('retry_delay', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('dependencies', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('dependents', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('meta_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['node_id'], ['synapscale_db.nodes.id'], name='node_executions_node_id_fkey'),
    sa.ForeignKeyConstraint(['workflow_execution_id'], ['synapscale_db.workflow_executions.id'], name='node_executions_workflow_execution_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='node_executions_pkey'),
    schema='synapscale_db',
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_public_node_executions_workflow_execution_id'), 'node_executions', ['workflow_execution_id'], unique=False, schema='synapscale_db')
    op.create_index(op.f('ix_public_node_executions_status'), 'node_executions', ['status'], unique=False, schema='synapscale_db')
    op.create_index(op.f('ix_public_node_executions_node_type'), 'node_executions', ['node_type'], unique=False, schema='synapscale_db')
    op.create_index(op.f('ix_public_node_executions_node_key'), 'node_executions', ['node_key'], unique=False, schema='synapscale_db')
    op.create_index(op.f('ix_public_node_executions_node_id'), 'node_executions', ['node_id'], unique=False, schema='synapscale_db')
    op.create_index(op.f('ix_public_node_executions_id'), 'node_executions', ['id'], unique=False, schema='synapscale_db')
    op.create_index(op.f('ix_public_node_executions_execution_order'), 'node_executions', ['execution_order'], unique=False, schema='synapscale_db')
    op.create_index(op.f('ix_public_node_executions_execution_id'), 'node_executions', ['execution_id'], unique=False, schema='synapscale_db')
    op.create_table('vendas_hotmart',
    sa.Column('codigo_transacao', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('status_transacao', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('data_transacao', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('confirmacao_pagamento', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('produtor', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('codigo_produto', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('produto', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('codigo_preco', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('nome_preco', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('taxa_conversao_compra', sa.NUMERIC(precision=10, scale=6), autoincrement=False, nullable=True),
    sa.Column('moeda_compra', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('valor_compra_impostos', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('impostos_locais_compra', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('valor_compra_sem_impostos', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('taxa_conversao_comissao', sa.NUMERIC(precision=10, scale=6), autoincrement=False, nullable=True),
    sa.Column('moeda_comissao', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('comissao_bruta', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('minha_comissao', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('venda_feita_como', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('comissao_produtor', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('comissao_afiliado', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('comissao_coprodutor', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('moeda_taxas', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('taxa_processamento', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('taxa_streaming', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('outras_taxas', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('nome_afiliado', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('canal_venda', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('codigo_src', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('codigo_sck', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('metodo_pagamento', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('tipo_cobranca', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('total_parcelas', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('quantidade_cobrancas', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('data_vencimento_vouchers', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('codigo_cupom', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('periodo_gratuito_trial', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('quantidade_itens', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('comprador', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('email_comprador', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('pais', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('telefone', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('documento', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('codigo_postal', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('cidade', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('estado_provincia', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('endereco', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('bairro', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('numero', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('complemento', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('instagram', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('codigo_assinante', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('tax_solutions', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('tax_collected', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('tax_jurisdiction', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('tipo_order_bump', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('transacao_order_bump', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('tipo_antecipacao_assinatura', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('motivo_recusa_cartao', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('imposto_servico_hotmart', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('impostos_locais', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('juros_parcelamento', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('valor_frete_bruto', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('codigo_transacao', name=op.f('vendas_hotmart_pkey')),
    schema='banco_de_dados_jc',
    comment='folder:origem|Transações Hotmart (status, produto, pagamentos).'
    )
    op.create_index(op.f('idx_vendas_hotmart_produto_data'), 'vendas_hotmart', ['produto', sa.literal_column('data_transacao DESC')], unique=False, schema='banco_de_dados_jc')
    op.create_index(op.f('idx_vendas_hotmart_email_produto_data'), 'vendas_hotmart', ['email_comprador', 'produto', sa.literal_column('data_transacao DESC')], unique=False, schema='banco_de_dados_jc')
    op.create_table('execution_metrics',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('workflow_execution_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('node_execution_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('metric_type', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('metric_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('value_numeric', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('value_float', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('value_text', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('value_json', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('context', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('tags', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('measured_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['node_execution_id'], ['synapscale_db.node_executions.id'], name=op.f('execution_metrics_node_execution_id_fkey')),
    sa.ForeignKeyConstraint(['workflow_execution_id'], ['synapscale_db.workflow_executions.id'], name=op.f('execution_metrics_workflow_execution_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('execution_metrics_pkey')),
    schema='synapscale_db'
    )
    op.create_index(op.f('ix_public_execution_metrics_workflow_execution_id'), 'execution_metrics', ['workflow_execution_id'], unique=False, schema='synapscale_db')
    op.create_index(op.f('ix_public_execution_metrics_node_execution_id'), 'execution_metrics', ['node_execution_id'], unique=False, schema='synapscale_db')
    op.create_index(op.f('ix_public_execution_metrics_metric_type'), 'execution_metrics', ['metric_type'], unique=False, schema='synapscale_db')
    op.create_index(op.f('ix_public_execution_metrics_metric_name'), 'execution_metrics', ['metric_name'], unique=False, schema='synapscale_db')
    op.create_index(op.f('ix_public_execution_metrics_measured_at'), 'execution_metrics', ['measured_at'], unique=False, schema='synapscale_db')
    op.create_index(op.f('ix_public_execution_metrics_id'), 'execution_metrics', ['id'], unique=False, schema='synapscale_db')
    op.create_index(op.f('ix_public_execution_metrics_context'), 'execution_metrics', ['context'], unique=False, schema='synapscale_db')
    op.create_table('messages',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('conversation_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('role', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('attachments', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('model_used', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('model_provider', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('tokens_used', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('processing_time_ms', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('temperature', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('max_tokens', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('rating', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('feedback', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['conversation_id'], ['synapscale_db.conversations.id'], name=op.f('messages_conversation_id_fkey'), onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('messages_pkey')),
    schema='synapscale_db'
    )
    op.create_table('template_reviews',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('template_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('rating', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('comment', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('ease_of_use', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('documentation_quality', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('performance', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('value_for_money', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_verified_purchase', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('is_helpful_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_reported', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('version_reviewed', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['template_id'], ['synapscale_db.workflow_templates.id'], name=op.f('template_reviews_template_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['synapscale_db.users.id'], name=op.f('template_reviews_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('template_reviews_pkey')),
    schema='synapscale_db'
    )
    op.create_index(op.f('ix_public_template_reviews_user_id'), 'template_reviews', ['user_id'], unique=False, schema='synapscale_db')
    op.create_index(op.f('ix_public_template_reviews_template_id'), 'template_reviews', ['template_id'], unique=False, schema='synapscale_db')
    op.create_index(op.f('ix_public_template_reviews_id'), 'template_reviews', ['id'], unique=False, schema='synapscale_db')
    op.create_table('user_variables',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('key', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('value', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('is_secret', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('category', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_encrypted', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['synapscale_db.users.id'], name=op.f('user_variables_user_id_fkey'), onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('user_variables_pkey')),
    schema='synapscale_db'
    )
    op.create_table('platform_transaction_payment_history',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False, comment='Identificador único interno do registro de pagamento.'),
    sa.Column('transaction_id', sa.INTEGER(), autoincrement=False, nullable=False, comment='Referência à transação relacionada.'),
    sa.Column('payment_method', postgresql.ENUM('credit_card', 'debit_card', 'two_credit_cards', 'boleto', 'boleto_installment', 'pix', 'pix_credit_card', 'bank_transfer', 'paypal', 'digital_wallet', 'intelligent_recovery', 'account_balance', 'hotmart_balance', 'other', 'cryptocurrency', name='payment_method_enum', schema='joaocastanheira_bancodedados'), autoincrement=False, nullable=True, comment='Método de pagamento utilizado (mapeado para ENUM).'),
    sa.Column('payment_type', postgresql.ENUM('SINGLE_PAYMENT', 'INSTALLMENT_PAYMENT', name='payment_type_enum', schema='joaocastanheira_bancodedados'), autoincrement=False, nullable=True, comment='Tipo de pagamento (mapeado para ENUM).'),
    sa.Column('installments', sa.INTEGER(), autoincrement=False, nullable=True, comment='Número de parcelas (NULL ou 1 para pagamento único).'),
    sa.Column('value', sa.NUMERIC(precision=15, scale=4), autoincrement=False, nullable=True, comment='Valor monetário pago ou tentado neste evento.'),
    sa.Column('payment_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True, comment='Timestamp da confirmação ou processamento do pagamento.'),
    sa.Column('card_brand', sa.VARCHAR(length=50), autoincrement=False, nullable=True, comment='Bandeira do cartão de crédito/débito, se aplicável.'),
    sa.Column('card_last_digits', sa.VARCHAR(length=4), autoincrement=False, nullable=True, comment='Últimos 4 dígitos do cartão, se aplicável e permitido.'),
    sa.Column('bank_slip_barcode', sa.TEXT(), autoincrement=False, nullable=True, comment='Código de barras do boleto, se aplicável.'),
    sa.Column('pix_code', sa.TEXT(), autoincrement=False, nullable=True, comment='Código ou chave PIX utilizada, se aplicável.'),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True, comment='Dados adicionais em formato JSON (ex: detalhes de recusa, ID do gateway de pagamento específico).'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True, comment='Timestamp da criação deste registro de pagamento.'),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True, comment='Timestamp da última atualização deste registro de pagamento.'),
    sa.ForeignKeyConstraint(['transaction_id'], ['joaocastanheira_bancodedados.transactions.id'], name=op.f('platform_transaction_payment_history_transaction_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('platform_transaction_payment_history_pkey')),
    schema='joaocastanheira_bancodedados',
    comment='Armazena os detalhes específicos de cada evento ou tentativa de pagamento associado a uma transação.'
    )
    op.create_index(op.f('idx_plat_trans_pay_hist_trans_id'), 'platform_transaction_payment_history', ['transaction_id'], unique=False, schema='joaocastanheira_bancodedados')
    op.create_index(op.f('idx_plat_trans_pay_hist_pay_method'), 'platform_transaction_payment_history', ['payment_method'], unique=False, schema='joaocastanheira_bancodedados')
    op.create_index(op.f('idx_plat_trans_pay_hist_pay_date'), 'platform_transaction_payment_history', ['payment_date'], unique=False, schema='joaocastanheira_bancodedados')
    op.create_table('platform_transaction_offer',
    sa.Column('id', sa.BIGINT(), sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1), autoincrement=True, nullable=False, comment='Identificador único do registro.'),
    sa.Column('platform_sale_id', sa.BIGINT(), autoincrement=False, nullable=True, comment='ID da venda associada à oferta (tabela platform_sale).'),
    sa.Column('platform_subscription_id', sa.BIGINT(), autoincrement=False, nullable=True, comment='ID da assinatura associada à oferta (tabela platform_subscription).'),
    sa.Column('platform_offer_history_id', sa.BIGINT(), autoincrement=False, nullable=False, comment='ID do histórico de ofertas aplicadas (tabela platform_offer_history).'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False, comment='Data/hora em que o registro foi criado.'),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False, comment='Data/hora da última atualização do registro.'),
    sa.ForeignKeyConstraint(['platform_sale_id'], ['banco_de_dados.platform_sale.id'], name=op.f('fk_pto_sale'), onupdate='CASCADE', ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['platform_subscription_id'], ['banco_de_dados.platform_subscription.id'], name=op.f('fk_pto_subscription'), onupdate='CASCADE', ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id', name=op.f('platform_transaction_offer_pkey')),
    schema='banco_de_dados',
    comment='Ofertas aplicadas a vendas ou assinaturas nas plataformas.'
    )
    op.create_index(op.f('idx_pto_platform_subscription'), 'platform_transaction_offer', ['platform_subscription_id'], unique=False, schema='banco_de_dados')
    op.create_index(op.f('idx_pto_platform_sale'), 'platform_transaction_offer', ['platform_sale_id'], unique=False, schema='banco_de_dados')
    op.create_index(op.f('idx_pto_platform_offer_history'), 'platform_transaction_offer', ['platform_offer_history_id'], unique=False, schema='banco_de_dados')
    op.create_table('files',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('filename', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('original_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('file_path', sa.VARCHAR(length=500), autoincrement=False, nullable=False),
    sa.Column('file_size', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('mime_type', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('category', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('is_public', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('tags', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['synapscale_db.users.id'], name=op.f('files_user_id_fkey'), onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('files_pkey')),
    schema='synapscale_db'
    )
    op.create_index(op.f('idx_file_filename'), 'files', ['filename'], unique=False, schema='synapscale_db')
    op.create_index(op.f('idx_file_created_at'), 'files', ['created_at'], unique=False, schema='synapscale_db')
    op.create_table('project_collaborators',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('project_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('can_edit', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('can_comment', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('can_share', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('can_delete', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('is_online', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('current_cursor_position', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('last_edit_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('added_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('last_seen_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['project_id'], ['synapscale_db.workspace_projects.id'], name=op.f('project_collaborators_project_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['synapscale_db.users.id'], name=op.f('project_collaborators_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('project_collaborators_pkey')),
    schema='synapscale_db'
    )
    op.create_index(op.f('ix_public_project_collaborators_user_id'), 'project_collaborators', ['user_id'], unique=False, schema='synapscale_db')
    op.create_index(op.f('ix_public_project_collaborators_project_id'), 'project_collaborators', ['project_id'], unique=False, schema='synapscale_db')
    op.create_table('platform_sale',
    sa.Column('id', sa.BIGINT(), sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1), autoincrement=True, nullable=False, comment='Identificador único da venda.'),
    sa.Column('id_transaction', sa.VARCHAR(length=255), autoincrement=False, nullable=False, comment='Identificador único da transação na plataforma.'),
    sa.Column('client_id', sa.BIGINT(), autoincrement=False, nullable=False, comment='ID do cliente associado à venda (tabela platform_sale_client).'),
    sa.Column('platform', sa.VARCHAR(length=100), autoincrement=False, nullable=False, comment='Nome da plataforma onde ocorreu a venda.'),
    sa.Column('is_subscription', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False, comment='Indica se a venda é parte de uma assinatura recorrente.'),
    sa.Column('warranty_expire_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True, comment='Data/hora de expiração da garantia do produto ou serviço.'),
    sa.Column('order_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False, comment='Data/hora em que o pedido foi realizado.'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False, comment='Data/hora em que o registro foi criado.'),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False, comment='Data/hora da última atualização do registro.'),
    sa.ForeignKeyConstraint(['client_id'], ['banco_de_dados.platform_sale_client.id'], name='fk_ps_client', onupdate='CASCADE', ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id', name='platform_sale_pkey'),
    schema='banco_de_dados',
    comment='Registro de vendas realizadas nas diversas plataformas.',
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('uq_ps_transaction'), 'platform_sale', ['id_transaction'], unique=True, schema='banco_de_dados')
    op.create_index(op.f('idx_ps_client'), 'platform_sale', ['client_id'], unique=False, schema='banco_de_dados')
    op.create_table('offers',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('joaocastanheira_bancodedados.offers_id_seq'::regclass)"), autoincrement=True, nullable=False, comment='Identificador único interno da oferta.'),
    sa.Column('offer_id', sa.VARCHAR(length=100), autoincrement=False, nullable=False, comment='Identificador da oferta na plataforma de origem.'),
    sa.Column('platform_origin', sa.VARCHAR(length=100), autoincrement=False, nullable=False, comment='Nome da plataforma de onde esta oferta foi originada.'),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='Nome descritivo da oferta.'),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True, comment='Descrição detalhada das condições da oferta.'),
    sa.Column('plan_id', sa.INTEGER(), autoincrement=False, nullable=True, comment='Referência ao plano associado (se for uma oferta de assinatura).'),
    sa.Column('product_id', sa.INTEGER(), autoincrement=False, nullable=True, comment='Referência ao produto associado.'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True, comment='Timestamp da criação do registro da oferta.'),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True, comment='Timestamp da última atualização do registro da oferta.'),
    sa.Column('payment_mode', sa.VARCHAR(length=50), autoincrement=False, nullable=True, comment='Modo de pagamento da oferta (ex: "subscription", "one_time").'),
    sa.Column('price', sa.NUMERIC(precision=15, scale=4), autoincrement=False, nullable=True, comment='Preço base da oferta.'),
    sa.Column('currency_code', sa.VARCHAR(length=3), autoincrement=False, nullable=True, comment='Código da moeda da oferta (ex: "BRL", "USD").'),
    sa.ForeignKeyConstraint(['plan_id'], ['joaocastanheira_bancodedados.plans.id'], name='offers_plan_id_fkey'),
    sa.ForeignKeyConstraint(['product_id'], ['joaocastanheira_bancodedados.products.id'], name='offers_product_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='offers_pkey'),
    sa.UniqueConstraint('offer_id', 'platform_origin', name='uq_offer_platform', postgresql_include=[], postgresql_nulls_not_distinct=False),
    schema='joaocastanheira_bancodedados',
    comment='Catálogo de ofertas específicas (links de checkout, promoções) associadas a produtos ou planos, unificando dados das plataformas.',
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('idx_offers_product_id'), 'offers', ['product_id'], unique=False, schema='joaocastanheira_bancodedados')
    op.create_index(op.f('idx_offers_platform_origin'), 'offers', ['platform_origin'], unique=False, schema='joaocastanheira_bancodedados')
    op.create_index(op.f('idx_offers_plan_id'), 'offers', ['plan_id'], unique=False, schema='joaocastanheira_bancodedados')
    op.create_table('subscriptions',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('joaocastanheira_bancodedados.subscriptions_id_seq'::regclass)"), autoincrement=True, nullable=False, comment='Identificador único interno da assinatura.'),
    sa.Column('subscription_id', sa.VARCHAR(length=100), autoincrement=False, nullable=False, comment='Identificador único da assinatura na plataforma de origem (gateway).'),
    sa.Column('subscriber_id', sa.VARCHAR(length=100), autoincrement=False, nullable=True, comment='Identificador do assinante na plataforma de origem (pode ser específico da assinatura).'),
    sa.Column('last_transaction_id', sa.VARCHAR(length=100), autoincrement=False, nullable=True, comment='ID da última transação registrada no gateway de pagamento para esta assinatura.'),
    sa.Column('customer_id', sa.INTEGER(), autoincrement=False, nullable=True, comment='Referência ao cliente (assinante) na tabela customers.'),
    sa.Column('plan_id', sa.INTEGER(), autoincrement=False, nullable=True, comment='Referência ao plano associado a esta assinatura na tabela plans.'),
    sa.Column('payment_gateway', sa.VARCHAR(length=100), autoincrement=False, nullable=False, comment='Nome da plataforma onde a assinatura está ativa.'),
    sa.Column('billing_cycle', sa.VARCHAR(length=50), autoincrement=False, nullable=True, comment='Período de recorrência da cobrança (ex: "MONTHLY", "YEARLY").'),
    sa.Column('total_recurrences', sa.INTEGER(), autoincrement=False, nullable=True, comment='Número total de cobranças previstas no plano da assinatura (se aplicável).'),
    sa.Column('max_cycles', sa.INTEGER(), autoincrement=False, nullable=True, comment='Número máximo de ciclos de cobrança permitidos para esta assinatura (se aplicável).'),
    sa.Column('last_update', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True, comment='Timestamp da última atualização recebida da plataforma sobre esta assinatura.'),
    sa.Column('start_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True, comment='Data de início de vigência da assinatura.'),
    sa.Column('end_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True, comment='Data de término (prevista ou efetiva) da assinatura.'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True, comment='Timestamp da criação do registro da assinatura em nosso banco de dados.'),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True, comment='Timestamp da última atualização do registro da assinatura em nosso banco de dados.'),
    sa.Column('status_id', sa.INTEGER(), autoincrement=False, nullable=True, comment='Referência ao status atual da assinatura (FK para transaction_statuses).'),
    sa.Column('request_billet', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True, comment='Indica se o assinante solicitou pagamento via boleto para recorrências.'),
    sa.Column('next_billing_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True, comment='Data prevista para a próxima cobrança da assinatura.'),
    sa.Column('cancellation_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True, comment='Data em que a assinatura foi cancelada, se aplicável.'),
    sa.Column('last_recurrency_number', sa.INTEGER(), autoincrement=False, nullable=True, comment='Indica o número da última renovação paga da assinatura. Por exemplo: se o valor for 10, significa que a assinatura foi paga com sucesso pela décima vez. Esse número é incrementado a cada pagamento aprovado de uma recorrência.'),
    sa.Column('has_credit_card_change', sa.BOOLEAN(), autoincrement=False, nullable=True, comment='Indica que a cobrança foi suspensa devido a restrições na forma de pagamento utilizada.'),
    sa.Column('has_unpaid_recurrency', sa.BOOLEAN(), autoincrement=False, nullable=True, comment='Informa se uma assinatura possui recorrências não pagas. Retorna true para todas as linhas da assinatura se houver pelo menos uma recorrência com status "NÃO PAGA"; caso contrário, retorna false.'),
    sa.Column('billing_type', sa.TEXT(), autoincrement=False, nullable=True, comment='Tipo de cobrança da assinatura. Define se o subscriber_code está associado a uma SUBSCRIPTION, SMART_INSTALLMENT ou SMART_RECOVERY. Cada subscription_id possui exclusivamente uma única classificação entre essas opções.'),
    sa.Column('is_paid_anticipation', sa.BOOLEAN(), autoincrement=False, nullable=True, comment='Indica se a assinatura possui uma transação de antecipação paga. Retorna true se existir uma antecipação paga e false caso contrário.'),
    sa.Column('is_paid_negotiation', sa.BOOLEAN(), autoincrement=False, nullable=True, comment='Indica se a assinatura possui uma transação de negociação paga. Retorna true se existir uma negociação paga e false caso contrário.'),
    sa.Column('coupon_code', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='Código de desconto do cupom utilizado no momento da assinatura'),
    sa.Column('last_recurrency_start_date', sa.BIGINT(), autoincrement=False, nullable=True, comment='Data de início da última recorrência da assinatura. Representada como timestamp em formato Unix (milissegundos). Indica o momento exato em que o novo ciclo recorrente foi iniciado após o último pagamento aprovado.'),
    sa.Column('payment_delays_days', sa.INTEGER(), autoincrement=False, nullable=True, comment='Quantidade de dias de atraso entre a data prevista de pagamento e a data em que o pagamento foi efetivamente realizado na assinatura.'),
    sa.Column('transaction_type', sa.TEXT(), autoincrement=False, nullable=True, comment='Tipo da transação associada à assinatura. Pode indicar se trata-se de uma cobrança regular de assinatura, uma antecipação, uma negociação, ou outro tipo específico de transação registrado no gateway de pagamento.'),
    sa.Column('is_current_purchase', sa.BOOLEAN(), autoincrement=False, nullable=True, comment='Indica se a assinatura está vinculada à compra mais recente realizada pelo cliente. Retorna true quando representa a compra atual em vigor e false caso contrário.'),
    sa.Column('has_retry', sa.BOOLEAN(), autoincrement=False, nullable=True, comment='Indica se houve tentativas de reprocessamento de pagamento na assinatura. Retorna true quando a plataforma tentou reprocessar cobranças após uma falha inicial e false caso não tenha ocorrido nenhum reprocessamento.'),
    sa.ForeignKeyConstraint(['customer_id'], ['joaocastanheira_bancodedados.customers.id'], name='subscriptions_customer_id_fkey'),
    sa.ForeignKeyConstraint(['plan_id'], ['joaocastanheira_bancodedados.plans.id'], name='subscriptions_plan_id_fkey'),
    sa.ForeignKeyConstraint(['status_id'], ['joaocastanheira_bancodedados.transaction_statuses.id'], name='subscriptions_status_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='subscriptions_pkey'),
    sa.UniqueConstraint('subscription_id', 'payment_gateway', name='uq_subscription_gateway', postgresql_include=[], postgresql_nulls_not_distinct=False),
    schema='joaocastanheira_bancodedados',
    comment='Registro de todas as assinaturas recorrentes (Hotmart: subscriptions, Kiwify: subscriptions).',
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('idx_subscriptions_subscriber_id'), 'subscriptions', ['subscriber_id'], unique=False, schema='joaocastanheira_bancodedados')
    op.create_index(op.f('idx_subscriptions_status_id'), 'subscriptions', ['status_id'], unique=False, schema='joaocastanheira_bancodedados')
    op.create_index(op.f('idx_subscriptions_start_date'), 'subscriptions', ['start_date'], unique=False, schema='joaocastanheira_bancodedados')
    op.create_index(op.f('idx_subscriptions_plan_id'), 'subscriptions', ['plan_id'], unique=False, schema='joaocastanheira_bancodedados')
    op.create_index(op.f('idx_subscriptions_payment_gateway'), 'subscriptions', ['payment_gateway'], unique=False, schema='joaocastanheira_bancodedados')
    op.create_index(op.f('idx_subscriptions_next_billing_date'), 'subscriptions', ['next_billing_date'], unique=False, schema='joaocastanheira_bancodedados')
    op.create_index(op.f('idx_subscriptions_end_date'), 'subscriptions', ['end_date'], unique=False, schema='joaocastanheira_bancodedados')
    op.create_index(op.f('idx_subscriptions_customer_id'), 'subscriptions', ['customer_id'], unique=False, schema='joaocastanheira_bancodedados')
    op.create_index(op.f('idx_subscriptions_cancel_date'), 'subscriptions', ['cancellation_date'], unique=False, schema='joaocastanheira_bancodedados')
    op.create_table('customer_external_ids',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False, comment='Identificador único interno para o registro de mapeamento.'),
    sa.Column('customer_id', sa.INTEGER(), autoincrement=False, nullable=False, comment='Referência ao cliente no sistema unificado (FK para customers.id).'),
    sa.Column('platform_origin', sa.VARCHAR(length=100), autoincrement=False, nullable=False, comment='Nome da plataforma de origem (ex: "Hotmart", "Kiwify", "ActiveCampaign").'),
    sa.Column('external_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False, comment='Identificador do cliente na plataforma externa.'),
    sa.Column('match_type', sa.VARCHAR(length=50), server_default=sa.text("'EMAIL_MATCH'::character varying"), autoincrement=False, nullable=True, comment='Método usado para associar este ID externo ao cliente (EMAIL_MATCH, TELEFONE_MATCH, MANUAL).'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True, comment='Data e hora de criação do registro.'),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True, comment='Data e hora da última atualização do registro.'),
    sa.Column('first_seen_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True, comment='Quando este ID foi visto pela primeira vez no sistema.'),
    sa.Column('last_seen_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True, comment='Última vez que este ID foi visto em atividade.'),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True, comment='Dados adicionais relevantes sobre o ID externo (formato JSON).'),
    sa.ForeignKeyConstraint(['customer_id'], ['joaocastanheira_bancodedados.customers.id'], name=op.f('customer_external_ids_customer_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('customer_external_ids_pkey')),
    sa.UniqueConstraint('platform_origin', 'external_id', name=op.f('uq_platform_external_id'), postgresql_include=[], postgresql_nulls_not_distinct=False),
    schema='joaocastanheira_bancodedados',
    comment='Armazena mapeamentos entre clientes e seus identificadores externos em diferentes plataformas como Hotmart, Kiwify, ActiveCampaign, etc.'
    )
    op.create_index(op.f('idx_customer_external_ids_platform_external_id'), 'customer_external_ids', ['platform_origin', 'external_id'], unique=False, schema='joaocastanheira_bancodedados')
    op.create_index(op.f('idx_customer_external_ids_platform'), 'customer_external_ids', ['platform_origin'], unique=False, schema='joaocastanheira_bancodedados')
    op.create_index(op.f('idx_customer_external_ids_external_id'), 'customer_external_ids', ['external_id'], unique=False, schema='joaocastanheira_bancodedados')
    op.create_index(op.f('idx_customer_external_ids_customer_id'), 'customer_external_ids', ['customer_id'], unique=False, schema='joaocastanheira_bancodedados')
    op.create_table('platform_sale_offer_history',
    sa.Column('id', sa.BIGINT(), sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1), autoincrement=True, nullable=False, comment='Identificador único do registro.'),
    sa.Column('code', sa.VARCHAR(length=100), autoincrement=False, nullable=False, comment='Código da oferta (plano).'),
    sa.Column('id_offer', sa.VARCHAR(length=255), autoincrement=False, nullable=False, comment='ID da oferta que ocorreu na venda.'),
    sa.Column('offer_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False, comment='Nome da oferta que ocorreu na venda.'),
    sa.Column('description', sa.VARCHAR(length=500), autoincrement=False, nullable=True, comment='Descrição da oferta.'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False, comment='Data/hora em que o registro foi criado.'),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False, comment='Data/hora da última atualização do registro.'),
    sa.PrimaryKeyConstraint('id', name=op.f('platform_sale_offer_history_pkey')),
    schema='banco_de_dados',
    comment='Histórico de ofertas aplicadas às vendas.'
    )
    op.create_index(op.f('idx_psoh_id_offer'), 'platform_sale_offer_history', ['id_offer'], unique=False, schema='banco_de_dados')
    op.create_index(op.f('idx_psoh_code'), 'platform_sale_offer_history', ['code'], unique=False, schema='banco_de_dados')
    op.create_table('platform_software_invoice_history',
    sa.Column('id', sa.BIGINT(), sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1), autoincrement=True, nullable=False, comment='Identificador único do registro.'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False, comment='Data/hora em que o registro foi criado.'),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False, comment='Data/hora da última atualização do registro.'),
    sa.Column('invoice_status', postgresql.ENUM('emitida', 'pendente', 'cancelada', name='platform_software_invoice_status', schema='banco_de_dados'), autoincrement=False, nullable=False, comment='Status da nota fiscal (emitida, pendente, cancelada).'),
    sa.Column('invoice_value', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=False, comment='Valor da nota fiscal.'),
    sa.Column('invoice_software', sa.VARCHAR(length=100), autoincrement=False, nullable=False, comment='Nome da plataforma que emitiu a nota fiscal.'),
    sa.Column('invoice_created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False, comment='Data/hora de criação da nota fiscal no software emissor.'),
    sa.PrimaryKeyConstraint('id', name=op.f('platform_software_invoice_history_pkey')),
    schema='banco_de_dados',
    comment='Histórico de notas fiscais emitidas por softwares externos.'
    )
    op.create_index(op.f('idx_psih_invoice_status'), 'platform_software_invoice_history', ['invoice_status'], unique=False, schema='banco_de_dados')
    op.create_index(op.f('idx_psih_invoice_created_at'), 'platform_software_invoice_history', ['invoice_created_at'], unique=False, schema='banco_de_dados')
    op.create_table('platform_utm_history',
    sa.Column('id', sa.BIGINT(), sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1), autoincrement=True, nullable=False, comment='Identificador único do registro.'),
    sa.Column('utm_source', sa.VARCHAR(length=100), autoincrement=False, nullable=True, comment='Fonte da campanha (ex.: Google, Facebook, Instagram).'),
    sa.Column('utm_src', sa.VARCHAR(length=100), autoincrement=False, nullable=True, comment='Identificador adicional da fonte.'),
    sa.Column('utm_sck', sa.VARCHAR(length=100), autoincrement=False, nullable=True, comment='Código de rastreamento adicional.'),
    sa.Column('utm_medium', sa.VARCHAR(length=100), autoincrement=False, nullable=True, comment='Meio da campanha (ex.: cpc, email, referral).'),
    sa.Column('utm_campaign', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='Nome da campanha utilizada no rastreamento.'),
    sa.Column('utm_term', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='Termo utilizado para rastreamento de palavras‑chave.'),
    sa.Column('external_code', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='Código externo utilizado para rastreamento específico.'),
    sa.Column('fbp', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='ID do perfil do usuário no Facebook (fbp).'),
    sa.Column('fbc', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='ID do clique do usuário no anúncio do Facebook/Instagram (fbc).'),
    sa.Column('gclid', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='ID do clique do usuário no Google Ads (gclid).'),
    sa.Column('utm_content', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='Conteúdo utilizado para rastreamento do anúncio específico.'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False, comment='Data/hora em que o registro foi criado.'),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False, comment='Data/hora da última atualização do registro.'),
    sa.PrimaryKeyConstraint('id', name=op.f('platform_utm_history_pkey')),
    schema='banco_de_dados',
    comment='Histórico completo dos parâmetros UTM e identificadores de rastreamento capturados.'
    )
    op.create_index(op.f('idx_putmh_utm_source'), 'platform_utm_history', ['utm_source'], unique=False, schema='banco_de_dados')
    op.create_index(op.f('idx_putmh_utm_campaign'), 'platform_utm_history', ['utm_campaign'], unique=False, schema='banco_de_dados')
    op.create_index(op.f('idx_putmh_gclid'), 'platform_utm_history', ['gclid'], unique=False, schema='banco_de_dados')
    op.create_index(op.f('idx_putmh_external_code'), 'platform_utm_history', ['external_code'], unique=False, schema='banco_de_dados')
    op.create_table('transactions',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('joaocastanheira_bancodedados.transactions_id_seq'::regclass)"), autoincrement=True, nullable=False, comment='Identificador único interno da transação.'),
    sa.Column('transaction_id', sa.VARCHAR(length=100), autoincrement=False, nullable=False, comment='Identificador único da transação na plataforma de origem (gateway).'),
    sa.Column('customer_id', sa.INTEGER(), autoincrement=False, nullable=True, comment='Referência ao cliente associado a esta transação.'),
    sa.Column('payment_gateway', sa.VARCHAR(length=100), autoincrement=False, nullable=False, comment='Nome da plataforma de pagamento onde a transação foi processada (ex: "Hotmart", "Kiwify").'),
    sa.Column('status_id', sa.INTEGER(), autoincrement=False, nullable=True, comment='Referência ao status atual da transação (FK para transaction_statuses).'),
    sa.Column('payment_type', postgresql.ENUM('SINGLE_PAYMENT', 'INSTALLMENT_PAYMENT', name='payment_type_enum', schema='joaocastanheira_bancodedados'), autoincrement=False, nullable=True, comment='Tipo de pagamento (ex: "SINGLE_PAYMENT", "INSTALLMENT_PAYMENT").'),
    sa.Column('payment_method', postgresql.ENUM('credit_card', 'debit_card', 'two_credit_cards', 'boleto', 'boleto_installment', 'pix', 'pix_credit_card', 'bank_transfer', 'paypal', 'digital_wallet', 'intelligent_recovery', 'account_balance', 'hotmart_balance', 'other', 'cryptocurrency', name='payment_method_enum', schema='joaocastanheira_bancodedados'), autoincrement=False, nullable=True, comment='Método de pagamento utilizado (ex: "credit_card", "boleto", "pix").'),
    sa.Column('payment_engine', sa.VARCHAR(length=100), autoincrement=False, nullable=True, comment='Motor/processador de pagamento (ex: "Wirecard", "PagSeguro").'),
    sa.Column('installments_number', sa.INTEGER(), autoincrement=False, nullable=True, comment='Número de parcelas para pagamentos parcelados.'),
    sa.Column('card_brand', sa.VARCHAR(length=50), autoincrement=False, nullable=True, comment='Bandeira do cartão utilizado (ex: "Visa", "Mastercard").'),
    sa.Column('card_last_digits', sa.VARCHAR(length=4), autoincrement=False, nullable=True, comment='Últimos 4 dígitos do cartão utilizado.'),
    sa.Column('billet_url', sa.TEXT(), autoincrement=False, nullable=True, comment='URL para visualização/impressão do boleto.'),
    sa.Column('billet_barcode', sa.VARCHAR(length=100), autoincrement=False, nullable=True, comment='Código de barras do boleto para pagamento.'),
    sa.Column('currency_code', sa.VARCHAR(length=3), server_default=sa.text("'BRL'::character varying"), autoincrement=False, nullable=False, comment='Código ISO 4217 da moeda utilizada na transação (ex: "BRL", "USD").'),
    sa.Column('base_price', sa.NUMERIC(precision=15, scale=4), autoincrement=False, nullable=True, comment='Preço base original do produto/serviço antes de descontos/ofertas (informativo).'),
    sa.Column('offer_price', sa.NUMERIC(precision=15, scale=4), autoincrement=False, nullable=False, comment='Preço efetivo da oferta aplicada nesta transação. Base para cálculo de taxas e comissões.'),
    sa.Column('customer_paid_amount', sa.NUMERIC(precision=15, scale=4), autoincrement=False, nullable=True, comment='Valor total efetivamente pago pelo cliente (inclui juros de parcelamento, se houver).'),
    sa.Column('platform_fee_amount', sa.NUMERIC(precision=15, scale=4), server_default=sa.text('0'), autoincrement=False, nullable=True, comment='Soma de todas as taxas cobradas pela plataforma sobre esta transação (deduzidas do vendedor).'),
    sa.Column('distributable_amount', sa.NUMERIC(precision=15, scale=4), autoincrement=False, nullable=True, comment='Valor restante após dedução das taxas da plataforma (offer_price - platform_fee_amount).'),
    sa.Column('partner_commission_amount', sa.NUMERIC(precision=15, scale=4), server_default=sa.text('0'), autoincrement=False, nullable=True, comment='Soma das comissões pagas a todos os parceiros (Afiliados, Co-produtores) nesta transação.'),
    sa.Column('producer_net_amount', sa.NUMERIC(precision=15, scale=4), autoincrement=False, nullable=True, comment='Valor líquido final para o produtor após todas as deduções (distributable_amount - partner_commission_amount).'),
    sa.Column('is_subscription', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('subscription_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('platform_subscription_id', sa.VARCHAR(length=100), autoincrement=False, nullable=True, comment='Identificador da assinatura na plataforma de origem.'),
    sa.Column('recurrency_number', sa.INTEGER(), autoincrement=False, nullable=True, comment='Número da recorrência para transações de assinatura.'),
    sa.Column('tracking_source', sa.VARCHAR(length=100), autoincrement=False, nullable=True, comment='Parâmetro de rastreamento Source (SRC) identificando a origem da venda.'),
    sa.Column('tracking_sck', sa.VARCHAR(length=100), autoincrement=False, nullable=True, comment='Parâmetro de rastreamento SCK para identificação da origem.'),
    sa.Column('under_warranty', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True, comment='Indica se a transação ainda está dentro do período de garantia.'),
    sa.Column('warranty_expire_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('order_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('commission_as', sa.VARCHAR(length=50), autoincrement=False, nullable=True, comment='Comissão por participar da venda como PRODUCER/COPRODUCER/AFFILIATE'),
    sa.Column('approved_date', sa.BIGINT(), autoincrement=False, nullable=True, comment='Data exata em que a transação foi aprovada, caso ela realmente tenha sido paga e concluída.'),
    sa.Column('status', sa.TEXT(), autoincrement=False, nullable=True, comment='Status atual em que a compra se encontra. Pode representar estados como: aprovada, cancelada, pendente, reembolsada, entre outros.'),
    sa.Column('installments_type', sa.TEXT(), autoincrement=False, nullable=True, comment='Define o tipo de parcelamento vinculado à assinatura. Pode assumir valores como: REGULAR (parcelamento tradicional), SMART_INSTALLMENT (parcelamento inteligente com lógica de recorrência), ou outros formatos utilizados pela plataforma.'),
    sa.Column('payment_refusal_message', sa.TEXT(), autoincrement=False, nullable=True, comment='Mensagem retornada pelo gateway de pagamento explicando o motivo da recusa da transação. Pode incluir justificativas como saldo insuficiente, cartão expirado, limite excedido, entre outras.'),
    sa.Column('refund_chargeback_date', sa.BIGINT(), autoincrement=False, nullable=True, comment='Data em que a transação foi reembolsada ou sofreu chargeback. Armazenada como timestamp Unix em milissegundos. Representa o momento exato em que a devolução financeira foi processada.'),
    sa.Column('payment_billet_expiration_date', sa.BIGINT(), autoincrement=False, nullable=True, comment='Data de vencimento do boleto gerado para a transação. Armazenada como timestamp Unix em milissegundos, representa o prazo limite para que o pagamento via boleto bancário seja realizado.'),
    sa.Column('payment_billet_recovery_type', sa.TEXT(), autoincrement=False, nullable=True, comment='Tipo de recuperação aplicada ao boleto gerado para a transação. Pode indicar, por exemplo, se o boleto foi reemitido, reagendado ou se faz parte de uma estratégia de recuperação automática de inadimplência.'),
    sa.Column('payment_pix_expiration_date', sa.BIGINT(), autoincrement=False, nullable=True, comment='Data de expiração do pagamento via PIX. Armazenada como timestamp Unix em milissegundos, indica o prazo máximo para que o pagamento por PIX seja realizado após a geração do código ou QR Code.'),
    sa.Column('payment_billet_reprint_code', sa.TEXT(), autoincrement=False, nullable=True, comment='Código de reimpressão do boleto bancário vinculado à transação. Utilizado para gerar uma nova via do boleto com os mesmos dados de cobrança, quando aplicável.'),
    sa.Column('conversion_rate', sa.NUMERIC(precision=10, scale=6), autoincrement=False, nullable=True, comment='Taxa de conversão da moeda utilizada na transação. Representa o valor de câmbio aplicado quando a transação envolve conversão entre moedas diferentes, com até 6 casas decimais para maior precisão.'),
    sa.ForeignKeyConstraint(['customer_id'], ['joaocastanheira_bancodedados.customers.id'], name='transactions_customer_id_fkey'),
    sa.ForeignKeyConstraint(['status_id'], ['joaocastanheira_bancodedados.transaction_statuses.id'], name='transactions_status_id_fkey'),
    sa.ForeignKeyConstraint(['subscription_id'], ['joaocastanheira_bancodedados.subscriptions.id'], name='transactions_subscription_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='transactions_pkey'),
    sa.UniqueConstraint('transaction_id', 'payment_gateway', name='uq_transaction_gateway', postgresql_include=[], postgresql_nulls_not_distinct=False),
    schema='joaocastanheira_bancodedados',
    comment='Registro central de todas as transações (Hotmart: purchases, Kiwify: checkouts). Também armazena transações recorrentes de assinaturas (Hotmart: subscription/transactions, Kiwify: recurring charges).',
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('idx_transactions_subscription_id'), 'transactions', ['subscription_id'], unique=False, schema='joaocastanheira_bancodedados')
    op.create_index(op.f('idx_transactions_status_id'), 'transactions', ['status_id'], unique=False, schema='joaocastanheira_bancodedados')
    op.create_index(op.f('idx_transactions_recurrence_number'), 'transactions', ['recurrency_number'], unique=False, schema='joaocastanheira_bancodedados')
    op.create_index(op.f('idx_transactions_platform_subscription_id'), 'transactions', ['platform_subscription_id'], unique=False, schema='joaocastanheira_bancodedados')
    op.create_index(op.f('idx_transactions_payment_method'), 'transactions', ['payment_method'], unique=False, schema='joaocastanheira_bancodedados')
    op.create_index(op.f('idx_transactions_payment_gateway'), 'transactions', ['payment_gateway'], unique=False, schema='joaocastanheira_bancodedados')
    op.create_index(op.f('idx_transactions_order_date'), 'transactions', ['order_date'], unique=False, schema='joaocastanheira_bancodedados')
    op.create_index(op.f('idx_transactions_customer_id'), 'transactions', ['customer_id'], unique=False, schema='joaocastanheira_bancodedados')
    op.create_index(op.f('idx_transactions_currency_code'), 'transactions', ['currency_code'], unique=False, schema='joaocastanheira_bancodedados')
    op.create_index(op.f('idx_transactions_created_at'), 'transactions', ['created_at'], unique=False, schema='joaocastanheira_bancodedados')
    op.create_table('platform_transaction_payment',
    sa.Column('id', sa.BIGINT(), sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1), autoincrement=True, nullable=False, comment='Identificador único do registro.'),
    sa.Column('platform_sale_id', sa.BIGINT(), autoincrement=False, nullable=True, comment='ID da venda associada ao pagamento (tabela platform_sale).'),
    sa.Column('platform_subscription_id', sa.BIGINT(), autoincrement=False, nullable=True, comment='ID da assinatura associada ao pagamento (tabela platform_subscription).'),
    sa.Column('payment_history_id', sa.BIGINT(), autoincrement=False, nullable=False, comment='ID do histórico de pagamentos (tabela platform_transaction_payment_history).'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False, comment='Data/hora em que o registro foi criado.'),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False, comment='Data/hora da última atualização do registro.'),
    sa.ForeignKeyConstraint(['payment_history_id'], ['banco_de_dados.platform_transaction_payment_history.id'], name=op.f('fk_ptpay_payment_history'), onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['platform_sale_id'], ['banco_de_dados.platform_sale.id'], name=op.f('fk_ptpay_sale'), onupdate='CASCADE', ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['platform_subscription_id'], ['banco_de_dados.platform_subscription.id'], name=op.f('fk_ptpay_subscription'), onupdate='CASCADE', ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id', name=op.f('platform_transaction_payment_pkey')),
    schema='banco_de_dados',
    comment='Pagamentos associados a vendas únicas ou assinaturas.'
    )
    op.create_index(op.f('idx_ptpay_platform_subscription'), 'platform_transaction_payment', ['platform_subscription_id'], unique=False, schema='banco_de_dados')
    op.create_index(op.f('idx_ptpay_platform_sale'), 'platform_transaction_payment', ['platform_sale_id'], unique=False, schema='banco_de_dados')
    op.create_index(op.f('idx_ptpay_payment_history'), 'platform_transaction_payment', ['payment_history_id'], unique=False, schema='banco_de_dados')
    op.create_table('platform_sale_client_address',
    sa.Column('id', sa.BIGINT(), sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1), autoincrement=True, nullable=False),
    sa.Column('address', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('neighborhood', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('country', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('city', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('zip_code', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('complement', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('number', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('ip', postgresql.INET(), autoincrement=False, nullable=True, comment='Endereço IP coletado no momento do cadastro (IPv4 ou IPv6).'),
    sa.PrimaryKeyConstraint('id', name='platform_sale_client_address_pkey'),
    schema='banco_de_dados',
    comment='Endereços associados aos clientes de venda.',
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('idx_psca_zip_code'), 'platform_sale_client_address', ['zip_code'], unique=False, schema='banco_de_dados')
    op.create_index(op.f('idx_psca_city'), 'platform_sale_client_address', ['city'], unique=False, schema='banco_de_dados')
    op.create_table('tmp_consolidado_produtos',
    sa.Column('id', sa.INTEGER(), sa.Identity(always=True, start=1, increment=1, minvalue=1, maxvalue=2147483647, cycle=False, cache=1), autoincrement=True, nullable=False),
    sa.Column('origem', postgresql.ENUM('Hotmart', 'Kiwify', 'Payt', name='origem_tipo', schema='banco_de_dados_jc'), autoincrement=False, nullable=False),
    sa.Column('produto_original', sa.VARCHAR(length=1000), autoincrement=False, nullable=False),
    sa.Column('codigo_produto', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('nome_preco', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('codigo_preco', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('preco_sem_impostos', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('preco_com_taxas', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('campanha', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('utm_campaign', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.CheckConstraint('preco_com_taxas >= 0::numeric', name=op.f('tmp_consolidado_produtos_preco_com_taxas_check')),
    sa.CheckConstraint('preco_sem_impostos >= 0::numeric', name=op.f('tmp_consolidado_produtos_preco_sem_impostos_check')),
    sa.PrimaryKeyConstraint('id', name=op.f('tmp_consolidado_produtos_pkey')),
    sa.UniqueConstraint('codigo_produto', 'origem', 'produto_original', 'nome_preco', 'codigo_preco', 'preco_sem_impostos', 'campanha', name=op.f('tmp_consolidado_produtos_unica_linha'), postgresql_include=[], postgresql_nulls_not_distinct=False),
    sa.UniqueConstraint('codigo_produto', name=op.f('tmp_consolidado_produtos_codigo_produto_key'), postgresql_include=[], postgresql_nulls_not_distinct=False),
    schema='banco_de_dados_jc'
    )
    op.create_index(op.f('idx_tmp_produtos_origem'), 'tmp_consolidado_produtos', ['origem'], unique=False, schema='banco_de_dados_jc')
    op.create_index(op.f('idx_tmp_produtos_codigo'), 'tmp_consolidado_produtos', ['codigo_produto'], unique=False, schema='banco_de_dados_jc')
    op.create_index(op.f('idx_tmp_consolidado_produtos_origem'), 'tmp_consolidado_produtos', ['origem'], unique=False, schema='banco_de_dados_jc')
    op.create_index(op.f('idx_tmp_consolidado_produtos_codigo_produto'), 'tmp_consolidado_produtos', ['codigo_produto'], unique=False, schema='banco_de_dados_jc')
    op.create_table('vendas_kiwify',
    sa.Column('id_venda', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('produto', sa.VARCHAR(length=1000), autoincrement=False, nullable=True),
    sa.Column('cliente', sa.VARCHAR(length=1000), autoincrement=False, nullable=True),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('cpf', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('celular', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('ip', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('endereco', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('numero', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('complemento', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('bairro', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('cidade', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('estado', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('cep', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('pais', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('status_recebimento', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('data_liberacao_estimada', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('data_deposito', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('parcelas', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('ultimos_digitos_cartao', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('tipo_pagamento', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('moeda', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('valor_liquido', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('taxas', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('preco_base_produto', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('total_com_acrescimo', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('oferta', sa.VARCHAR(length=1000), autoincrement=False, nullable=True),
    sa.Column('metodo_pagamento', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('motivo_recusa', sa.VARCHAR(length=1000), autoincrement=False, nullable=True),
    sa.Column('tracking_src', sa.VARCHAR(length=1000), autoincrement=False, nullable=True),
    sa.Column('tracking_sck', sa.VARCHAR(length=1000), autoincrement=False, nullable=True),
    sa.Column('tracking_utm_source', sa.VARCHAR(length=1000), autoincrement=False, nullable=True),
    sa.Column('tracking_utm_medium', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('tracking_utm_campaign', sa.VARCHAR(length=1000), autoincrement=False, nullable=True),
    sa.Column('tracking_utm_content', sa.VARCHAR(length=1000), autoincrement=False, nullable=True),
    sa.Column('tracking_utm_term', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('data_criacao', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('data_atualizacao', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('id_nota_fiscal', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('status_nota_fiscal', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('nota_fiscal_emitida_por', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('software_nota_fiscal', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('valor_nota_fiscal', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('kiwify_network', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('provedor_one_click', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('coupon_code', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('discount_percentage', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('numero_da_venda', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id_venda', name=op.f('vendas_kiwify_pkey')),
    schema='banco_de_dados_jc',
    comment='folder:origem|Transações Kiwify (produto, status, forma de pagamento etc.).'
    )
    op.create_index(op.f('idx_vendas_kiwify_produto_data'), 'vendas_kiwify', ['produto', sa.literal_column('data_criacao DESC')], unique=False, schema='banco_de_dados_jc')
    op.create_index(op.f('idx_vendas_kiwify_email_produto_data'), 'vendas_kiwify', ['email', 'produto', sa.literal_column('data_criacao DESC')], unique=False, schema='banco_de_dados_jc')
    op.create_table('analytics_dashboards',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('icon', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('color', sa.VARCHAR(length=7), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('layout', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('widgets', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('filters', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('auto_refresh', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('refresh_interval', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_public', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('shared_with', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_default', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('last_viewed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('workspace_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['synapscale_db.users.id'], name=op.f('analytics_dashboards_user_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['workspace_id'], ['synapscale_db.workspaces.id'], name=op.f('analytics_dashboards_workspace_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('analytics_dashboards_pkey')),
    schema='synapscale_db'
    )
    op.create_index(op.f('ix_public_analytics_dashboards_workspace_id'), 'analytics_dashboards', ['workspace_id'], unique=False, schema='synapscale_db')
    op.create_index(op.f('ix_public_analytics_dashboards_user_id'), 'analytics_dashboards', ['user_id'], unique=False, schema='synapscale_db')
    op.create_table('execution_queue',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('queue_id', sa.VARCHAR(length=36), autoincrement=False, nullable=True),
    sa.Column('workflow_execution_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('priority', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('scheduled_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('started_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('completed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('worker_id', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('max_execution_time', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('retry_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('max_retries', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('meta_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['synapscale_db.users.id'], name=op.f('execution_queue_user_id_fkey'), onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['workflow_execution_id'], ['synapscale_db.workflow_executions.id'], name=op.f('execution_queue_workflow_execution_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('execution_queue_pkey')),
    schema='synapscale_db'
    )
    op.create_index(op.f('ix_public_execution_queue_workflow_execution_id'), 'execution_queue', ['workflow_execution_id'], unique=False, schema='synapscale_db')
    op.create_index(op.f('ix_public_execution_queue_worker_id'), 'execution_queue', ['worker_id'], unique=False, schema='synapscale_db')
    op.create_index(op.f('ix_public_execution_queue_user_id'), 'execution_queue', ['user_id'], unique=False, schema='synapscale_db')
    op.create_index(op.f('ix_public_execution_queue_status'), 'execution_queue', ['status'], unique=False, schema='synapscale_db')
    op.create_index(op.f('ix_public_execution_queue_scheduled_at'), 'execution_queue', ['scheduled_at'], unique=False, schema='synapscale_db')
    op.create_index(op.f('ix_public_execution_queue_queue_id'), 'execution_queue', ['queue_id'], unique=True, schema='synapscale_db')
    op.create_index(op.f('ix_public_execution_queue_priority'), 'execution_queue', ['priority'], unique=False, schema='synapscale_db')
    op.create_index(op.f('ix_public_execution_queue_id'), 'execution_queue', ['id'], unique=False, schema='synapscale_db')
    op.create_table('node_templates',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('type', postgresql.ENUM('llm', 'transform', 'api', 'condition', 'trigger', 'operation', 'flow', 'input', 'output', 'file_processor', name='nodetype'), server_default=sa.text("'operation'::nodetype"), autoincrement=False, nullable=False),
    sa.Column('category', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('code_template', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('input_schema', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('output_schema', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('parameters_schema', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('icon', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('color', sa.VARCHAR(length=7), autoincrement=False, nullable=True),
    sa.Column('documentation', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('examples', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_system', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('node_templates_pkey')),
    schema='synapscale_db'
    )
    op.create_table('dim_produto',
    sa.Column('produto_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('nome_raiz', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('nome_variacao', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('sku', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('categoria', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('subcategoria', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('plataforma_padrao', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('data_criacao_produto', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('preco_sugerido', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('taxa_sugerida', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('moeda_padrao', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('campanha', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('descricao', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('produto_id', name=op.f('dim_produto_pkey')),
    sa.UniqueConstraint('nome_variacao', name=op.f('unique_nome_variacao'), postgresql_include=[], postgresql_nulls_not_distinct=False),
    sa.UniqueConstraint('produto_id', name=op.f('dim_produto_produto_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False),
    schema='banco_de_dados_jc',
    comment='folder:dimensao|Tabela de produtos (nome raiz, variações, SKUs, campanhas).'
    )
    op.create_table('comissoes_vendas_na_hotmart',
    sa.Column('numero_da_comissao', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('id_transacao', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('id_produto', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('nome_produto', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('taxa_cambio_pagamento', sa.NUMERIC(precision=15, scale=10), autoincrement=False, nullable=True),
    sa.Column('id_usuario_produtor', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('nome_usuario_produtor', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('valor_comissao_produtor', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=True),
    sa.Column('moeda_comissao_produtor', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('id_usuario_coprodutor', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('nome_usuario_coprodutor', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('valor_comissao_coprodutor', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=True),
    sa.Column('moeda_comissao_coprodutor', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('id_usuario_addon', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('nome_usuario_addon', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('valor_comissao_addon', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=True),
    sa.Column('moeda_comissao_addon', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('id_usuario_afiliado', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('nome_usuario_afiliado', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('valor_comissao_afiliado', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=True),
    sa.Column('moeda_comissao_afiliado', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('data_criacao', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('numero_da_comissao', name=op.f('comissoes_vendas_hotmart_pkey')),
    schema='banco_de_dados_jc'
    )
    op.create_index(op.f('comissoes_vendas_na_hotmart_id_transacao_uindex'), 'comissoes_vendas_na_hotmart', ['id_transacao'], unique=True, schema='banco_de_dados_jc')
    op.create_table('refresh_tokens',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('token', sa.VARCHAR(length=500), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('is_revoked', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['synapscale_db.users.id'], name=op.f('refresh_tokens_user_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('refresh_tokens_pkey')),
    schema='synapscale_db'
    )
    op.create_index(op.f('ix_synapscale_db_refresh_tokens_user_id'), 'refresh_tokens', ['user_id'], unique=False, schema='synapscale_db')
    op.create_index(op.f('ix_synapscale_db_refresh_tokens_token'), 'refresh_tokens', ['token'], unique=True, schema='synapscale_db')
    op.create_table('platform_sale_client_platform_id',
    sa.Column('id', sa.BIGINT(), sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1), autoincrement=True, nullable=False, comment='Identificador interno do registro (chave primária).'),
    sa.Column('platform_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False, comment='ID fornecido pela plataforma para identificar o cliente.'),
    sa.Column('sale_client_id', sa.BIGINT(), autoincrement=False, nullable=False, comment='ID do cliente na tabela platform_sale_client (base Synapscale).'),
    sa.Column('platform', sa.VARCHAR(length=100), autoincrement=False, nullable=False, comment='Nome da plataforma à qual o ID pertence (ex.: Hotmart).'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False, comment='Data e hora em que o registro foi criado.'),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False, comment='Data e hora da última atualização do registro.'),
    sa.ForeignKeyConstraint(['sale_client_id'], ['banco_de_dados.platform_sale_client.id'], name=op.f('fk_pscpi_sale_client'), onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('platform_sale_client_platform_id_pkey')),
    schema='banco_de_dados',
    comment='Mapeia os IDs atribuídos por cada plataforma (Hotmart, Eduzz etc.) a um cliente interno.'
    )
    op.create_index(op.f('uq_pscpi_platform_platform_id'), 'platform_sale_client_platform_id', ['platform', 'platform_id'], unique=True, schema='banco_de_dados')
    op.create_index(op.f('idx_pscpi_sale_client'), 'platform_sale_client_platform_id', ['sale_client_id'], unique=False, schema='banco_de_dados')
    op.create_table('workspace_invitations',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('workspace_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('inviter_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('invited_user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('role', postgresql.ENUM('OWNER', 'ADMIN', 'EDITOR', 'VIEWER', 'GUEST', name='workspacerole'), autoincrement=False, nullable=False),
    sa.Column('message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('token', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('expires_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('responded_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['invited_user_id'], ['synapscale_db.users.id'], name=op.f('workspace_invitations_invited_user_id_fkey')),
    sa.ForeignKeyConstraint(['inviter_id'], ['synapscale_db.users.id'], name=op.f('workspace_invitations_inviter_id_fkey')),
    sa.ForeignKeyConstraint(['workspace_id'], ['synapscale_db.workspaces.id'], name=op.f('workspace_invitations_workspace_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('workspace_invitations_pkey')),
    schema='synapscale_db'
    )
    op.create_index(op.f('ix_public_workspace_invitations_workspace_id'), 'workspace_invitations', ['workspace_id'], unique=False, schema='synapscale_db')
    op.create_index(op.f('ix_public_workspace_invitations_token'), 'workspace_invitations', ['token'], unique=True, schema='synapscale_db')
    op.create_index(op.f('ix_public_workspace_invitations_inviter_id'), 'workspace_invitations', ['inviter_id'], unique=False, schema='synapscale_db')
    op.create_index(op.f('ix_public_workspace_invitations_invited_user_id'), 'workspace_invitations', ['invited_user_id'], unique=False, schema='synapscale_db')
    op.create_index(op.f('ix_public_workspace_invitations_email'), 'workspace_invitations', ['email'], unique=False, schema='synapscale_db')
    op.create_table('system_performance_metrics',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('metric_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('metric_type', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('service', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('environment', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('value', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('unit', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('tags', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('system_performance_metrics_pkey')),
    schema='synapscale_db'
    )
    op.create_index(op.f('ix_public_system_performance_metrics_timestamp'), 'system_performance_metrics', ['timestamp'], unique=False, schema='synapscale_db')
    op.create_index(op.f('ix_public_system_performance_metrics_service'), 'system_performance_metrics', ['service'], unique=False, schema='synapscale_db')
    op.create_index(op.f('ix_public_system_performance_metrics_metric_name'), 'system_performance_metrics', ['metric_name'], unique=False, schema='synapscale_db')
    op.create_index(op.f('ix_public_system_performance_metrics_id'), 'system_performance_metrics', ['id'], unique=False, schema='synapscale_db')
    op.create_table('workflow_nodes',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('workflow_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('node_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('instance_name', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('position_x', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('position_y', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('configuration', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['node_id'], ['synapscale_db.nodes.id'], name='workflow_nodes_node_id_fkey'),
    sa.ForeignKeyConstraint(['workflow_id'], ['synapscale_db.workflows.id'], name='workflow_nodes_workflow_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='workflow_nodes_pkey'),
    schema='synapscale_db',
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_public_workflow_nodes_workflow_id'), 'workflow_nodes', ['workflow_id'], unique=False, schema='synapscale_db')
    op.create_index(op.f('ix_public_workflow_nodes_node_id'), 'workflow_nodes', ['node_id'], unique=False, schema='synapscale_db')
    op.create_table('platform_commission',
    sa.Column('id', sa.BIGINT(), sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1), autoincrement=True, nullable=False, comment='Identificador único do registro.'),
    sa.Column('participant_id', sa.BIGINT(), autoincrement=False, nullable=False, comment='ID do participante na tabela platform_commission_participants.'),
    sa.Column('platform_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False, comment='Identificador único da pessoa comissionada na plataforma.'),
    sa.Column('name', sa.VARCHAR(length=150), autoincrement=False, nullable=False, comment='Nome da pessoa comissionada.'),
    sa.Column('price', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=False, comment='Valor efetivamente pago ao participante.'),
    sa.Column('producer_paid_value', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=False, comment='Valor de compra (purchase_value) pago pelo comprador.'),
    sa.Column('original_value', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=False, comment='Valor previsto para a comissão total da venda.'),
    sa.Column('original_paid_value', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=False, comment='Valor de compra pago pelo comprador, convertido para a moeda escolhida.'),
    sa.Column('producer_value', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=False, comment='Valor previsto da comissão do produtor a receber.'),
    sa.Column('currency', sa.VARCHAR(length=10), autoincrement=False, nullable=False, comment='Moeda na qual o participante recebeu o pagamento.'),
    sa.Column('conversion_rate', sa.NUMERIC(precision=18, scale=8), autoincrement=False, nullable=True, comment='Taxa usada na conversão de moeda, se aplicável.'),
    sa.Column('type', sa.VARCHAR(length=50), autoincrement=False, nullable=False, comment='Tipo de participante comissionado.'),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='E‑mail da pessoa comissionada.'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False, comment='Data/hora em que o registro foi criado.'),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False, comment='Data/hora da última atualização do registro.'),
    sa.ForeignKeyConstraint(['participant_id'], ['banco_de_dados.platform_commission_participants.id'], name='fk_pc_participant', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='platform_commission_pkey'),
    schema='banco_de_dados',
    comment='Comissões pagas a participantes (afiliados, coprodutores, etc.).',
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('idx_pc_platform_id'), 'platform_commission', ['platform_id'], unique=False, schema='banco_de_dados')
    op.create_index(op.f('idx_pc_participant'), 'platform_commission', ['participant_id'], unique=False, schema='banco_de_dados')
    op.create_table('alembic_version',
    sa.Column('version_num', sa.VARCHAR(length=32), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('version_num', name=op.f('alembic_version_pkc'))
    )
    op.create_table('platform_transaction_commission',
    sa.Column('id', sa.BIGINT(), sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1), autoincrement=True, nullable=False, comment='Identificador único da transação de comissão.'),
    sa.Column('platform_subscription_id', sa.BIGINT(), autoincrement=False, nullable=True, comment='ID da assinatura associada (tabela platform_subscription).'),
    sa.Column('platform_sale_id', sa.BIGINT(), autoincrement=False, nullable=True, comment='ID da venda associada (tabela platform_sale).'),
    sa.Column('platform_commission_id', sa.BIGINT(), autoincrement=False, nullable=False, comment='ID da comissão (tabela platform_sale_commission).'),
    sa.Column('type', postgresql.ENUM('credit', 'debit', 'refund', 'chargeback', name='platform_transaction_commission_type', schema='banco_de_dados'), autoincrement=False, nullable=False, comment='Tipo da transação de comissão: credit, debit, refund ou chargeback.'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False, comment='Data/hora em que o registro foi criado.'),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False, comment='Data/hora da última atualização do registro.'),
    sa.ForeignKeyConstraint(['platform_commission_id'], ['banco_de_dados.platform_commission.id'], name=op.f('fk_ptc_commission'), onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['platform_sale_id'], ['banco_de_dados.platform_sale.id'], name=op.f('fk_ptc_sale'), onupdate='CASCADE', ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['platform_subscription_id'], ['banco_de_dados.platform_subscription.id'], name=op.f('fk_ptc_subscription'), onupdate='CASCADE', ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id', name=op.f('platform_transaction_commission_pkey')),
    schema='banco_de_dados',
    comment='Transações de comissão (crédito, débito, reembolso, chargeback) associadas a vendas ou assinaturas.'
    )
    op.create_index(op.f('idx_ptc_platform_subscription'), 'platform_transaction_commission', ['platform_subscription_id'], unique=False, schema='banco_de_dados')
    op.create_index(op.f('idx_ptc_platform_sale'), 'platform_transaction_commission', ['platform_sale_id'], unique=False, schema='banco_de_dados')
    op.create_index(op.f('idx_ptc_platform_commission'), 'platform_transaction_commission', ['platform_commission_id'], unique=False, schema='banco_de_dados')
    op.create_table('vendas_na_hotmart',
    sa.Column('codigo_transacao', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('status_transacao', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('data_transacao', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('confirmacao_pagamento', sa.VARCHAR(length=1000), autoincrement=False, nullable=True),
    sa.Column('nome_produtor', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('id_produto', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('nome_produto', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('codigo_preco', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('nome_preco', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('moeda_compra', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('valor_total_cobrado', sa.NUMERIC(precision=18, scale=2), autoincrement=False, nullable=True),
    sa.Column('valor_base_da_compra', sa.NUMERIC(precision=18, scale=2), autoincrement=False, nullable=True),
    sa.Column('moeda_recebimento', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('valor_comissao_liquida', sa.NUMERIC(precision=18, scale=2), autoincrement=False, nullable=True),
    sa.Column('venda_feita_como', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('valor_comissao_produtor', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('comissao_afiliado', sa.NUMERIC(precision=18, scale=2), autoincrement=False, nullable=True),
    sa.Column('valor_comissao_coprodutor', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('moeda_taxas', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('taxa_processamento_porcentagem', sa.NUMERIC(precision=18, scale=2), autoincrement=False, nullable=True),
    sa.Column('taxa_streaming', sa.NUMERIC(precision=18, scale=2), autoincrement=False, nullable=True),
    sa.Column('taxa_valor_total', sa.NUMERIC(precision=18, scale=2), autoincrement=False, nullable=True),
    sa.Column('nome_afiliado', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('canal_venda', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('codigo_src', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('codigo_sck', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('metodo_pagamento', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('tipo_cobranca', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('total_parcelas', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('quantidade_cobrancas', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('data_vencimento_voucher', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('codigo_cupom', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('periodo_gratuito_trial', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('quantidade_itens', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('nome_comprador', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('email_comprador', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('pais_comprador', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('telefone_comprador', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('documento_comprador', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('cep_comprador', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('cidade_comprador', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('estado_comprador', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('endereco_comprador', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('bairro_comprador', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('numero_endereco_comprador', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('complemento_endereco_comprador', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('instagram_comprador', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('codigo_assinante', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('tipo_order_bump', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('transacao_order_bump', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('tipo_antecipacao_assinatura', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('motivo_recusa_cartao', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('taxa_parcelamento', sa.NUMERIC(precision=18, scale=2), autoincrement=False, nullable=True),
    sa.Column('valor_frete_bruto', sa.NUMERIC(precision=18, scale=2), autoincrement=False, nullable=True),
    sa.Column('numero_da_venda', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('data_vencimento_garantia', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('taxa_fixa_por_venda', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('assinatura_simounao', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('utm_source', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('utm_medium', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('utm_campaign', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('utm_term', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('utm_content', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('codigo_transacao', name=op.f('vendas_na_hotmart_pkey')),
    schema='banco_de_dados_jc'
    )
    op.create_index(op.f('idx_status_transacao'), 'vendas_na_hotmart', ['status_transacao'], unique=False, schema='banco_de_dados_jc')
    op.create_index(op.f('idx_id_produto'), 'vendas_na_hotmart', ['id_produto'], unique=False, schema='banco_de_dados_jc')
    op.create_index(op.f('idx_data_transacao'), 'vendas_na_hotmart', ['data_transacao'], unique=False, schema='banco_de_dados_jc')
    op.create_table('platform_sale_offer_history',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False, comment='Identificador único interno.'),
    sa.Column('transaction_id', sa.INTEGER(), autoincrement=False, nullable=True, comment='Referência à transação onde esta oferta foi usada.'),
    sa.Column('code', sa.VARCHAR(length=100), autoincrement=False, nullable=True, comment='Código interno ou SKU da oferta/plano no momento da venda.'),
    sa.Column('offer_id', sa.VARCHAR(length=100), autoincrement=False, nullable=True, comment='ID da oferta na plataforma de origem no momento da venda.'),
    sa.Column('offer_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='Nome da oferta como exibido ao cliente no momento da venda.'),
    sa.Column('description', sa.VARCHAR(length=500), autoincrement=False, nullable=True, comment='Descrição da oferta válida no momento da venda.'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True, comment='Timestamp da criação deste registro histórico.'),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True, comment='Timestamp da última atualização deste registro histórico.'),
    sa.ForeignKeyConstraint(['transaction_id'], ['joaocastanheira_bancodedados.transactions.id'], name=op.f('platform_sale_offer_history_transaction_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('platform_sale_offer_history_pkey')),
    schema='joaocastanheira_bancodedados',
    comment='Armazena um snapshot da oferta utilizada em uma venda específica no momento da transação, garantindo rastreabilidade histórica mesmo que as ofertas sejam posteriormente modificadas.'
    )
    op.create_index(op.f('idx_platform_sale_offer_history_trans_id'), 'platform_sale_offer_history', ['transaction_id'], unique=False, schema='joaocastanheira_bancodedados')
    op.create_index(op.f('idx_platform_sale_offer_history_offer_id'), 'platform_sale_offer_history', ['offer_id'], unique=False, schema='joaocastanheira_bancodedados')
    op.create_index(op.f('idx_platform_sale_offer_history_code'), 'platform_sale_offer_history', ['code'], unique=False, schema='joaocastanheira_bancodedados')
    op.create_table('platform_utm_history',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False, comment='Identificador único interno do registro UTM.'),
    sa.Column('transaction_id', sa.INTEGER(), autoincrement=False, nullable=False, comment='Referência à transação associada.'),
    sa.Column('utm_source', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='Parâmetro utm_source.'),
    sa.Column('utm_medium', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='Parâmetro utm_medium.'),
    sa.Column('utm_campaign', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='Parâmetro utm_campaign.'),
    sa.Column('utm_term', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='Parâmetro utm_term.'),
    sa.Column('utm_content', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='Parâmetro utm_content.'),
    sa.Column('capture_date', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True, comment='Timestamp da captura dos dados UTM.'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True, comment='Timestamp da criação do registro UTM.'),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True, comment='Timestamp da última atualização do registro UTM.'),
    sa.Column('src', sa.VARCHAR(length=50), autoincrement=False, nullable=True, comment='Parâmetro SRC'),
    sa.Column('sck', sa.VARCHAR(length=50), autoincrement=False, nullable=True, comment='Parâmetro SCK'),
    sa.ForeignKeyConstraint(['transaction_id'], ['joaocastanheira_bancodedados.transactions.id'], name=op.f('platform_utm_history_transaction_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('platform_utm_history_pkey')),
    schema='joaocastanheira_bancodedados',
    comment='Armazena os parâmetros UTM capturados no momento de uma transação para rastreamento de marketing.'
    )
    op.create_index(op.f('idx_platform_utm_history_transaction_id'), 'platform_utm_history', ['transaction_id'], unique=False, schema='joaocastanheira_bancodedados')
    op.create_index(op.f('idx_platform_utm_history_source_medium'), 'platform_utm_history', ['utm_source', 'utm_medium'], unique=False, schema='joaocastanheira_bancodedados')
    op.create_index(op.f('idx_platform_utm_history_campaign'), 'platform_utm_history', ['utm_campaign'], unique=False, schema='joaocastanheira_bancodedados')
    op.create_table('transaction_fees',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False, comment='Identificador único interno deste registro de taxa.'),
    sa.Column('transaction_id', sa.INTEGER(), autoincrement=False, nullable=False, comment='Referência à transação sobre a qual esta taxa incidiu.'),
    sa.Column('fee_type', sa.VARCHAR(length=100), autoincrement=False, nullable=False, comment='Tipo específico da taxa cobrada (Necessário mapear das APIs, ex: "PLATFORM_FEE", "GATEWAY_FEE").'),
    sa.Column('total_amount', sa.NUMERIC(precision=15, scale=4), autoincrement=False, nullable=False, comment='Valor total da taxa (normalmente base_amount + fixed_amount).'),
    sa.Column('fee_currency_code', sa.VARCHAR(length=3), autoincrement=False, nullable=False, comment='Código ISO 4217 da moeda em que a taxa foi cobrada.'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True, comment='Timestamp da criação deste registro de taxa.'),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True, comment='Timestamp da última atualização deste registro de taxa.'),
    sa.Column('base_amount', sa.NUMERIC(precision=15, scale=4), autoincrement=False, nullable=True, comment='Valor base da taxa (percentual sobre o valor da transação).'),
    sa.Column('fixed_amount', sa.NUMERIC(precision=15, scale=4), autoincrement=False, nullable=True, comment='Valor fixo da taxa (independente do valor da transação).'),
    sa.Column('percentage', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True, comment='Porcentagem cobrada pela plataforma de pagamentos para transacionar a venda. Essa porcentagem incide sobre o valor base da oferta.'),
    sa.ForeignKeyConstraint(['transaction_id'], ['joaocastanheira_bancodedados.transactions.id'], name=op.f('transaction_fees_transaction_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('transaction_fees_pkey')),
    schema='joaocastanheira_bancodedados',
    comment='Armazena taxas (Hotmart: hotmart_fee; Kiwify: payment.fee).'
    )
    op.create_index(op.f('idx_transaction_fees_type'), 'transaction_fees', ['fee_type'], unique=False, schema='joaocastanheira_bancodedados')
    op.create_index(op.f('idx_transaction_fees_transaction_id'), 'transaction_fees', ['transaction_id'], unique=False, schema='joaocastanheira_bancodedados')
    op.create_index(op.f('idx_transaction_fees_currency_code'), 'transaction_fees', ['fee_currency_code'], unique=False, schema='joaocastanheira_bancodedados')
    op.create_table('platform_transaction_utm',
    sa.Column('id', sa.BIGINT(), sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1), autoincrement=True, nullable=False, comment='Identificador único do registro.'),
    sa.Column('platform_sale_id', sa.BIGINT(), autoincrement=False, nullable=True, comment='ID da venda principal associada ao rastreamento (tabela platform_sale).'),
    sa.Column('platform_subscription_id', sa.BIGINT(), autoincrement=False, nullable=True, comment='ID da assinatura associada ao rastreamento UTM (tabela platform_subscription).'),
    sa.Column('platform_utm_id', sa.BIGINT(), autoincrement=False, nullable=False, comment='ID do código UTM associado à transação (tabela platform_utm).'),
    sa.Column('type', postgresql.ENUM('subscription', 'single_sale', name='platform_transaction_utm_type', schema='banco_de_dados'), autoincrement=False, nullable=False, comment='Tipo da transação: subscription ou single_sale.'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False, comment='Data/hora em que o registro foi criado.'),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False, comment='Data/hora da última atualização do registro.'),
    sa.ForeignKeyConstraint(['platform_sale_id'], ['banco_de_dados.platform_sale.id'], name=op.f('fk_ptu_sale'), onupdate='CASCADE', ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['platform_subscription_id'], ['banco_de_dados.platform_subscription.id'], name=op.f('fk_ptu_subscription'), onupdate='CASCADE', ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id', name=op.f('platform_transaction_utm_pkey')),
    schema='banco_de_dados',
    comment='Relaciona transações (venda ou assinatura) a códigos UTM.'
    )
    op.create_index(op.f('idx_ptu_platform_utm'), 'platform_transaction_utm', ['platform_utm_id'], unique=False, schema='banco_de_dados')
    op.create_index(op.f('idx_ptu_platform_subscription'), 'platform_transaction_utm', ['platform_subscription_id'], unique=False, schema='banco_de_dados')
    op.create_index(op.f('idx_ptu_platform_sale'), 'platform_transaction_utm', ['platform_sale_id'], unique=False, schema='banco_de_dados')
    op.create_table('node_categories',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('icon', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('color', sa.VARCHAR(length=7), autoincrement=False, nullable=True),
    sa.Column('parent_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('sort_order', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['parent_id'], ['synapscale_db.node_categories.id'], name=op.f('node_categories_parent_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('node_categories_pkey')),
    sa.UniqueConstraint('name', name=op.f('node_categories_name_key'), postgresql_include=[], postgresql_nulls_not_distinct=False),
    schema='synapscale_db'
    )
    op.create_table('user_subscriptions',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('plan_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('active', 'inactive', 'cancelled', 'expired', 'trial', name='subscriptionstatus'), server_default=sa.text("'active'::subscriptionstatus"), autoincrement=False, nullable=False),
    sa.Column('started_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('cancelled_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('payment_method', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('payment_provider', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('external_subscription_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('billing_cycle', sa.VARCHAR(length=20), server_default=sa.text("'monthly'::character varying"), autoincrement=False, nullable=True),
    sa.Column('current_period_start', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('current_period_end', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('current_workspaces', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('current_storage_mb', sa.DOUBLE_PRECISION(precision=53), server_default=sa.text('0.0'), autoincrement=False, nullable=False),
    sa.Column('current_executions_this_month', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('subscription_metadata', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['plan_id'], ['synapscale_db.plans.id'], name=op.f('user_subscriptions_plan_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['synapscale_db.users.id'], name=op.f('user_subscriptions_user_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('user_subscriptions_pkey')),
    schema='synapscale_db'
    )
    op.create_index(op.f('idx_user_subscriptions_user_id'), 'user_subscriptions', ['user_id'], unique=False, schema='synapscale_db')
    op.create_index(op.f('idx_user_subscriptions_status'), 'user_subscriptions', ['status'], unique=False, schema='synapscale_db')
    op.create_table('transaction_items',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False, comment='Identificador único interno do item dentro da transação.'),
    sa.Column('transaction_id', sa.INTEGER(), autoincrement=False, nullable=False, comment='Referência à transação principal.'),
    sa.Column('offer_id', sa.INTEGER(), autoincrement=False, nullable=True, comment='Referência à oferta específica utilizada (se aplicável).'),
    sa.Column('product_id', sa.INTEGER(), autoincrement=False, nullable=False, comment='Referência ao produto adquirido.'),
    sa.Column('plan_id', sa.INTEGER(), autoincrement=False, nullable=True, comment='Referência ao plano adquirido (especialmente para itens de assinatura).'),
    sa.Column('quantity', sa.INTEGER(), server_default=sa.text('1'), autoincrement=False, nullable=True, comment='Quantidade de unidades deste item específico.'),
    sa.Column('unit_price', sa.NUMERIC(precision=15, scale=4), autoincrement=False, nullable=True, comment='Preço de uma unidade deste item no momento da transação (na moeda da transação).'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True, comment='Timestamp da criação deste registro de item.'),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True, comment='Timestamp da última atualização deste registro de item.'),
    sa.ForeignKeyConstraint(['offer_id'], ['joaocastanheira_bancodedados.offers.id'], name=op.f('transaction_items_offer_id_fkey')),
    sa.ForeignKeyConstraint(['plan_id'], ['joaocastanheira_bancodedados.plans.id'], name=op.f('transaction_items_plan_id_fkey')),
    sa.ForeignKeyConstraint(['product_id'], ['joaocastanheira_bancodedados.products.id'], name=op.f('transaction_items_product_id_fkey')),
    sa.ForeignKeyConstraint(['transaction_id'], ['joaocastanheira_bancodedados.transactions.id'], name=op.f('transaction_items_transaction_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('transaction_items_pkey')),
    schema='joaocastanheira_bancodedados',
    comment='Detalha os itens individuais (produtos/ofertas/planos) que compõem uma transação. Permite modelar carrinhos com múltiplos itens ou order bumps.'
    )
    op.create_index(op.f('idx_transaction_items_transaction_id'), 'transaction_items', ['transaction_id'], unique=False, schema='joaocastanheira_bancodedados')
    op.create_index(op.f('idx_transaction_items_product_id'), 'transaction_items', ['product_id'], unique=False, schema='joaocastanheira_bancodedados')
    op.create_index(op.f('idx_transaction_items_plan_id'), 'transaction_items', ['plan_id'], unique=False, schema='joaocastanheira_bancodedados')
    op.create_index(op.f('idx_transaction_items_offer_id'), 'transaction_items', ['offer_id'], unique=False, schema='joaocastanheira_bancodedados')
    op.create_table('contatos_activecampaign',
    sa.Column('id_tabeladimcliente', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('contact_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('nome', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('sobrenome', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('telefone', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('endereco_ip', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('agente_usuario', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('documento', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.UniqueConstraint('contact_id', name=op.f('contatos_activecampaign_pk_contactid'), postgresql_include=[], postgresql_nulls_not_distinct=False),
    sa.UniqueConstraint('email', name=op.f('contatos_activecampaign_email_key'), postgresql_include=[], postgresql_nulls_not_distinct=False),
    sa.UniqueConstraint('email', name=op.f('contatos_activecampaign_email_key1'), postgresql_include=[], postgresql_nulls_not_distinct=False),
    sa.UniqueConstraint('id_tabeladimcliente', name=op.f('contatos_activecampaign_pk_dimclienteid'), postgresql_include=[], postgresql_nulls_not_distinct=False),
    schema='banco_de_dados_jc',
    comment='folder:origem|Armazena contatos e leads do ActiveCampaign com informações de CRM.'
    )
    op.create_index(op.f('contatos_activecampaign_idx'), 'contatos_activecampaign', ['contact_id'], unique=False, schema='banco_de_dados_jc')
    op.create_index(op.f('contatos_activecampaign_id_index'), 'contatos_activecampaign', ['id_tabeladimcliente'], unique=False, schema='banco_de_dados_jc')
    op.create_index(op.f('contatos_activecampaign_contact_id_uindex'), 'contatos_activecampaign', ['contact_id'], unique=True, schema='banco_de_dados_jc')
    op.create_table('custom_reports',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('workspace_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('category', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('query_config', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('visualization_config', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('filters', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_scheduled', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('schedule_config', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('last_run_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('next_run_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('is_public', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('shared_with', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('cached_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('cache_expires_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['synapscale_db.users.id'], name='custom_reports_user_id_fkey'),
    sa.ForeignKeyConstraint(['workspace_id'], ['synapscale_db.workspaces.id'], name='custom_reports_workspace_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='custom_reports_pkey'),
    schema='synapscale_db',
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_public_custom_reports_workspace_id'), 'custom_reports', ['workspace_id'], unique=False, schema='synapscale_db')
    op.create_index(op.f('ix_public_custom_reports_user_id'), 'custom_reports', ['user_id'], unique=False, schema='synapscale_db')
    op.create_index(op.f('ix_public_custom_reports_category'), 'custom_reports', ['category'], unique=False, schema='synapscale_db')
    op.create_table('customers',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('joaocastanheira_bancodedados.customers_id_seq'::regclass)"), autoincrement=True, nullable=False, comment='Identificador único interno do cliente.'),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='E-mail principal do cliente, usado para login e comunicação. Deve ser único.'),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='Nome completo do cliente.'),
    sa.Column('address_id', sa.INTEGER(), autoincrement=False, nullable=True, comment='Referência ao endereço principal do cliente na tabela addresses.'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True, comment='Timestamp da criação do registro do cliente.'),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True, comment='Timestamp da última atualização do registro do cliente.'),
    sa.Column('phone_local_code', sa.VARCHAR(length=10), autoincrement=False, nullable=True, comment='DDD ou código de área do telefone do cliente.'),
    sa.Column('phone_number', sa.VARCHAR(length=20), autoincrement=False, nullable=True, comment='Número do telefone do cliente (sem DDD/código de área).'),
    sa.Column('document_type', sa.VARCHAR(length=10), autoincrement=False, nullable=True, comment='Tipo de documento do cliente (ex: "CPF", "CNPJ", "PASSPORT").'),
    sa.Column('document_number', sa.VARCHAR(length=50), autoincrement=False, nullable=True, comment='Número do documento do cliente, como CPF, CNPJ ou passaporte.'),
    sa.ForeignKeyConstraint(['address_id'], ['joaocastanheira_bancodedados.addresses.id'], name='customers_address_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='customers_pkey'),
    sa.UniqueConstraint('email', name='customers_email_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    schema='joaocastanheira_bancodedados',
    comment='Repositório central de informações dos clientes, unificando dados das diversas plataformas.',
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('idx_customers_email_lower'), 'customers', [sa.literal_column('lower(email::text)')], unique=False, schema='joaocastanheira_bancodedados')
    op.create_index(op.f('idx_customers_email'), 'customers', ['email'], unique=False, schema='joaocastanheira_bancodedados')
    op.create_index(op.f('idx_customers_address_id'), 'customers', ['address_id'], unique=False, schema='joaocastanheira_bancodedados')
    op.create_table('api_field_mapping',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False, comment='Identificador único sequencial para o registro de mapeamento.'),
    sa.Column('platform_origin', sa.VARCHAR(length=100), autoincrement=False, nullable=False, comment="Nome da plataforma de origem dos dados (ex: 'Hotmart', 'Kiwify')."),
    sa.Column('source_api_field', sa.VARCHAR(length=255), autoincrement=False, nullable=False, comment="Nome exato do campo ou caminho do campo na resposta da API de origem (ex: 'transaction', 'buyer.email', 'product.id')."),
    sa.Column('destination_table', sa.VARCHAR(length=100), autoincrement=False, nullable=False, comment='Nome da tabela de destino no banco de dados joaocastanheira_bancodedados onde o dado é armazenado.'),
    sa.Column('destination_column', sa.VARCHAR(length=100), autoincrement=False, nullable=False, comment='Nome da coluna de destino na tabela especificada (destination_table).'),
    sa.Column('mapping_notes', sa.TEXT(), autoincrement=False, nullable=True, comment='Observações relevantes sobre o mapeamento, incluindo lógica de transformação, validações, ou referências do documento original.'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True, comment='Timestamp da criação do registro de mapeamento.'),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True, comment='Timestamp da última atualização do registro de mapeamento.'),
    sa.PrimaryKeyConstraint('id', name=op.f('api_field_mapping_pkey')),
    sa.UniqueConstraint('platform_origin', 'source_api_field', 'destination_table', 'destination_column', name=op.f('uq_api_mapping_rule'), postgresql_include=[], postgresql_nulls_not_distinct=False),
    schema='joaocastanheira_bancodedados',
    comment='Tabela de metadados que documenta o mapeamento campo a campo entre APIs de origem (ex: Hotmart) e as tabelas/colunas de destino no banco de dados joaocastanheira_bancodedados.'
    )
    op.create_table('analytics_alerts',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('condition', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('notification_config', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('owner_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('last_triggered_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['owner_id'], ['synapscale_db.users.id'], name=op.f('analytics_alerts_owner_id_fkey'), onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('analytics_alerts_pkey')),
    schema='synapscale_db'
    )
    op.create_table('platform_commission',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False, comment='Identificador único interno do registro de comissão.'),
    sa.Column('transaction_id', sa.INTEGER(), autoincrement=False, nullable=False, comment='Referência à transação que originou esta comissão.'),
    sa.Column('participant_id', sa.INTEGER(), autoincrement=False, nullable=False, comment='Referência ao participante que recebeu a comissão.'),
    sa.Column('amount', sa.NUMERIC(precision=15, scale=4), autoincrement=False, nullable=False, comment='Valor monetário da comissão.'),
    sa.Column('currency_code', sa.VARCHAR(length=3), autoincrement=False, nullable=False, comment='Código ISO 4217 da moeda em que a comissão foi paga.'),
    sa.Column('commission_as', sa.VARCHAR(length=100), autoincrement=False, nullable=True, comment='Indica o tipo/papel do participante que gerou a comissão (ex: "PRODUCER", "AFFILIATE", "COPRODUCER").'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True, comment='Timestamp da criação deste registro de comissão.'),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True, comment='Timestamp da última atualização deste registro de comissão.'),
    sa.Column('exchange_rate', sa.VARCHAR(), autoincrement=False, nullable=True, comment='Taxa de cambio cobrada por transação feita em outra moeda'),
    sa.ForeignKeyConstraint(['participant_id'], ['joaocastanheira_bancodedados.commission_participants.id'], name=op.f('platform_commission_participant_id_fkey')),
    sa.ForeignKeyConstraint(['transaction_id'], ['joaocastanheira_bancodedados.transactions.id'], name=op.f('platform_commission_transaction_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('platform_commission_pkey')),
    schema='joaocastanheira_bancodedados',
    comment='Registra comissões (Hotmart: commissions; Kiwify: affiliate_commission, revenue_partners).'
    )
    op.create_index(op.f('idx_platform_commission_transaction_id'), 'platform_commission', ['transaction_id'], unique=False, schema='joaocastanheira_bancodedados')
    op.create_index(op.f('idx_platform_commission_source'), 'platform_commission', ['commission_as'], unique=False, schema='joaocastanheira_bancodedados')
    op.create_index(op.f('idx_platform_commission_participant_id'), 'platform_commission', ['participant_id'], unique=False, schema='joaocastanheira_bancodedados')
    op.create_index(op.f('idx_platform_commission_currency_code'), 'platform_commission', ['currency_code'], unique=False, schema='joaocastanheira_bancodedados')
    op.create_table('template_favorites',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('template_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['template_id'], ['synapscale_db.workflow_templates.id'], name=op.f('template_favorites_template_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['synapscale_db.users.id'], name=op.f('template_favorites_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('template_favorites_pkey')),
    schema='synapscale_db'
    )
    op.create_index(op.f('ix_public_template_favorites_user_id'), 'template_favorites', ['user_id'], unique=False, schema='synapscale_db')
    op.create_index(op.f('ix_public_template_favorites_template_id'), 'template_favorites', ['template_id'], unique=False, schema='synapscale_db')
    op.create_index(op.f('ix_public_template_favorites_id'), 'template_favorites', ['id'], unique=False, schema='synapscale_db')
    op.create_table('template_collections',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('collection_id', sa.VARCHAR(length=36), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('creator_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('is_public', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('is_featured', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('template_ids', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('tags', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('thumbnail_url', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('view_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('follow_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['creator_id'], ['synapscale_db.users.id'], name=op.f('template_collections_creator_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('template_collections_pkey')),
    schema='synapscale_db'
    )
    op.create_index(op.f('ix_public_template_collections_id'), 'template_collections', ['id'], unique=False, schema='synapscale_db')
    op.create_index(op.f('ix_public_template_collections_creator_id'), 'template_collections', ['creator_id'], unique=False, schema='synapscale_db')
    op.create_index(op.f('ix_public_template_collections_collection_id'), 'template_collections', ['collection_id'], unique=True, schema='synapscale_db')
    op.create_table('map_produtos',
    sa.Column('map_produto_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('plataforma', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('produto_limpo', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('plano_variacao', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('codigos_produto', postgresql.ARRAY(sa.TEXT()), server_default=sa.text("'{}'::text[]"), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('map_produto_id', name=op.f('map_produtos_pkey')),
    sa.UniqueConstraint('plataforma', 'produto_limpo', 'plano_variacao', name=op.f('map_produtos_plataforma_produto_limpo_plano_variacao_key'), postgresql_include=[], postgresql_nulls_not_distinct=False),
    schema='banco_de_dados_jc'
    )
    op.create_index(op.f('idx_map_produtos_produto_limpo'), 'map_produtos', ['produto_limpo'], unique=False, schema='banco_de_dados_jc')
    op.create_index(op.f('idx_map_produtos_plataforma'), 'map_produtos', ['plataforma'], unique=False, schema='banco_de_dados_jc')
    op.create_index(op.f('idx_map_produtos_plano_variacao'), 'map_produtos', ['plano_variacao'], unique=False, schema='banco_de_dados_jc')
    op.create_index(op.f('idx_map_produtos_codigos_produto'), 'map_produtos', ['codigos_produto'], unique=False, schema='banco_de_dados_jc', postgresql_using='gin')
    op.create_table('agents',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('provider', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('model', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('system_prompt', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('temperature', sa.NUMERIC(precision=3, scale=2), server_default=sa.text('0.7'), autoincrement=False, nullable=True),
    sa.Column('max_tokens', sa.INTEGER(), server_default=sa.text('1000'), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('personality', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('instructions', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('agent_type', postgresql.ENUM('GENERAL', 'SPECIALIST', 'WORKFLOW', 'ASSISTANT', name='agenttype'), autoincrement=False, nullable=True),
    sa.Column('model_provider', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('top_p', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('frequency_penalty', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('presence_penalty', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('tools', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('knowledge_base', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('capabilities', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('status', postgresql.ENUM('ACTIVE', 'INACTIVE', 'TRAINING', 'MAINTENANCE', name='agentstatus'), autoincrement=False, nullable=True),
    sa.Column('avatar_url', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('configuration', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('conversation_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('message_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('total_tokens_used', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('average_response_time', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('rating_average', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('rating_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('last_active_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('workspace_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['synapscale_db.users.id'], name='agents_user_id_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['workspace_id'], ['synapscale_db.workspaces.id'], name='agents_workspace_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='agents_pkey'),
    schema='synapscale_db',
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_public_agents_workspace_id'), 'agents', ['workspace_id'], unique=False, schema='synapscale_db')
    op.create_table('platform_transaction_plan',
    sa.Column('id', sa.BIGINT(), sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1), autoincrement=True, nullable=False, comment='Identificador único do registro.'),
    sa.Column('platform_sale_id', sa.BIGINT(), autoincrement=False, nullable=True, comment='ID da venda associada ao plano (tabela platform_sale).'),
    sa.Column('platform_subscription_id', sa.BIGINT(), autoincrement=False, nullable=True, comment='ID da assinatura associada ao plano (tabela platform_subscription).'),
    sa.Column('plan_history_id', sa.BIGINT(), autoincrement=False, nullable=False, comment='ID do histórico do plano adquirido (tabela platform_plan_history).'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False, comment='Data/hora em que o registro foi criado.'),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False, comment='Data/hora da última atualização do registro.'),
    sa.ForeignKeyConstraint(['platform_sale_id'], ['banco_de_dados.platform_sale.id'], name=op.f('fk_ptplan_sale'), onupdate='CASCADE', ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['platform_subscription_id'], ['banco_de_dados.platform_subscription.id'], name=op.f('fk_ptplan_subscription'), onupdate='CASCADE', ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id', name=op.f('platform_transaction_plan_pkey')),
    schema='banco_de_dados',
    comment='Planos adquiridos em vendas únicas ou assinaturas.'
    )
    op.create_index(op.f('idx_ptplan_platform_subscription'), 'platform_transaction_plan', ['platform_subscription_id'], unique=False, schema='banco_de_dados')
    op.create_index(op.f('idx_ptplan_platform_sale'), 'platform_transaction_plan', ['platform_sale_id'], unique=False, schema='banco_de_dados')
    op.create_index(op.f('idx_ptplan_plan_history'), 'platform_transaction_plan', ['plan_history_id'], unique=False, schema='banco_de_dados')
    op.create_table('subscriptions_summary',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False, comment='Identificador único interno para o registro de resumo.'),
    sa.Column('platform_origin', sa.VARCHAR(length=100), autoincrement=False, nullable=False, comment="Plataforma de origem da qual estes dados de assinatura vieram (ex: 'Hotmart', 'Kiwify'). Essencial para distinguir IDs específicos da plataforma."),
    sa.Column('subscription_origin_id', sa.INTEGER(), autoincrement=False, nullable=False, comment='Referência ao registro principal da assinatura na tabela subscriptions.'),
    sa.Column('customer_id', sa.INTEGER(), autoincrement=False, nullable=False, comment='Referência ao registro unificado do cliente na tabela customers.'),
    sa.Column('plan_id', sa.INTEGER(), autoincrement=False, nullable=True, comment='Referência ao registro do plano na tabela plans.'),
    sa.Column('product_id', sa.INTEGER(), autoincrement=False, nullable=True, comment='Referência ao registro principal do produto na tabela products associado a esta assinatura.'),
    sa.Column('offer_id', sa.INTEGER(), autoincrement=False, nullable=True, comment='Referência ao registro da oferta na tabela offers utilizada para esta assinatura.'),
    sa.Column('status_id', sa.INTEGER(), autoincrement=False, nullable=True, comment='Referência ao status normalizado na tabela transaction_statuses. Requer mapeamento durante o ETL.'),
    sa.Column('platform_subscription_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False, comment='Identificador único da assinatura na plataforma de origem (ex: código da assinatura Hotmart).'),
    sa.Column('platform_subscriber_code', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='Código específico da plataforma que identifica o assinante, se diferente do ID principal do cliente.'),
    sa.Column('platform_subscriber_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='Identificador do cliente/assinante na plataforma de origem.'),
    sa.Column('platform_product_id', sa.VARCHAR(length=100), autoincrement=False, nullable=True, comment='Identificador do produto na plataforma de origem.'),
    sa.Column('platform_offer_code', sa.VARCHAR(length=100), autoincrement=False, nullable=True, comment='Identificador da oferta (código/slug) na plataforma de origem.'),
    sa.Column('platform_last_transaction_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment="ID da transação *na plataforma de origem* relacionado à última recorrência (ex: 'tran_xyz123'). Este SIM é o identificador único da transação na plataforma."),
    sa.Column('lifetime', sa.INTEGER(), autoincrement=False, nullable=True, comment='Tempo de vida total calculado da assinatura em dias no momento da geração do resumo.'),
    sa.Column('accession_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True, comment='Data/hora em que a assinatura começou. O processo ETL deve converter do formato da plataforma (ex: Unix ms) para TIMESTAMP WITH TIME ZONE (UTC recomendado).'),
    sa.Column('end_accession_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True, comment='Data/hora em que o ciclo de faturamento atual termina ou a assinatura terminou definitivamente. O processo ETL deve converter do formato da plataforma (ex: Unix ms) para TIMESTAMP WITH TIME ZONE (UTC recomendado).'),
    sa.Column('trial', sa.BOOLEAN(), autoincrement=False, nullable=True, comment='Indica se a assinatura estava em período de teste no momento da geração do resumo ou começou com um.'),
    sa.Column('plan_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='Nome do plano desnormalizado (copiado de plans.name via plan_id) para conveniência em relatórios.'),
    sa.Column('product_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='Nome do produto desnormalizado (copiado de products.name via product_id) para conveniência em relatórios.'),
    sa.Column('subscriber_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='Nome do assinante desnormalizado (copiado de customers.name via customer_id) para conveniência em relatórios.'),
    sa.Column('subscriber_email', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='Email do assinante desnormalizado (copiado de customers.email via customer_id) para conveniência em relatórios.'),
    sa.Column('last_recurrency_number', sa.INTEGER(), autoincrement=False, nullable=True, comment='O número sequencial da última recorrência como um todo (ex: 1 para o primeiro ciclo de pagamento, 2 para o segundo, etc.).'),
    sa.Column('last_recurrency_request_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True, comment='Data/hora em que a última cobrança de recorrência foi tentada. O processo ETL deve converter do formato da plataforma (ex: Unix ms) para TIMESTAMP WITH TIME ZONE (UTC recomendado).'),
    sa.Column('last_recurrency_status', sa.VARCHAR(length=50), autoincrement=False, nullable=True, comment="Status bruto da última tentativa de recorrência vindo da plataforma de origem (ex: 'PAID', 'NOT_PAID', 'FAILED'). Considere criar uma tabela de normalização separada se os valores forem consistentes."),
    sa.Column('last_recurrency_billing_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True, comment="Tipo de cobrança bruto associado à última recorrência vindo da plataforma de origem (ex: 'SMART_INSTALLMENT', 'SUBSCRIPTION')."),
    sa.Column('unpaid_recurrency_number', sa.INTEGER(), autoincrement=False, nullable=True, comment='O número sequencial da primeira recorrência não paga, se a assinatura estiver inadimplente.'),
    sa.Column('unpaid_recurrency_charge_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True, comment='Data/hora em que a cobrança da primeira recorrência não paga foi tentada. O processo ETL deve converter do formato da plataforma (ex: Unix ms) para TIMESTAMP WITH TIME ZONE (UTC recomendado).'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True, comment='Timestamp de quando o registro de resumo foi criado pela primeira vez.'),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True, comment='Timestamp da última atualização do registro de resumo.'),
    sa.Column('plan_recurrency_period', sa.INTEGER(), autoincrement=False, nullable=True, comment='Período de recorrência da assinatura, em dias. Representa o intervalo entre cada nova cobrança programada.'),
    sa.Column('last_recurrency_transaction_number', sa.INTEGER(), autoincrement=False, nullable=True, comment='Número sequencial da transação/cobrança associada à última recorrência processada ou tentada (ex: 1 para a primeira cobrança, 2 para a segunda, etc.). NÃO é um ID de transação global.'),
    sa.ForeignKeyConstraint(['customer_id'], ['joaocastanheira_bancodedados.customers.id'], name=op.f('subscriptions_summary_customer_id_fkey'), ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['offer_id'], ['joaocastanheira_bancodedados.offers.id'], name=op.f('subscriptions_summary_offer_id_fkey'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['plan_id'], ['joaocastanheira_bancodedados.plans.id'], name=op.f('subscriptions_summary_plan_id_fkey'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['product_id'], ['joaocastanheira_bancodedados.products.id'], name=op.f('subscriptions_summary_product_id_fkey'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['status_id'], ['joaocastanheira_bancodedados.transaction_statuses.id'], name=op.f('subscriptions_summary_status_id_fkey'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['subscription_origin_id'], ['joaocastanheira_bancodedados.subscriptions.id'], name=op.f('subscriptions_summary_subscription_origin_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('subscriptions_summary_pkey')),
    sa.UniqueConstraint('platform_subscription_id', 'platform_origin', name=op.f('uq_subscriptions_summary_platform'), postgresql_include=[], postgresql_nulls_not_distinct=False),
    schema='joaocastanheira_bancodedados',
    comment='Tabela de resumo desnormalizada para dados de assinatura, otimizada para relatórios. Populada via ETL a partir das tabelas principais e potencialmente APIs das plataformas.'
    )
    op.create_index(op.f('idx_subscriptions_summary_subscription_origin_id'), 'subscriptions_summary', ['subscription_origin_id'], unique=False, schema='joaocastanheira_bancodedados')
    op.create_index(op.f('idx_subscriptions_summary_subscriber_email'), 'subscriptions_summary', ['subscriber_email'], unique=False, schema='joaocastanheira_bancodedados')
    op.create_index(op.f('idx_subscriptions_summary_status_id'), 'subscriptions_summary', ['status_id'], unique=False, schema='joaocastanheira_bancodedados')
    op.create_index(op.f('idx_subscriptions_summary_product_id'), 'subscriptions_summary', ['product_id'], unique=False, schema='joaocastanheira_bancodedados')
    op.create_index(op.f('idx_subscriptions_summary_platform_subscriber_id'), 'subscriptions_summary', ['platform_subscriber_id', 'platform_origin'], unique=False, schema='joaocastanheira_bancodedados')
    op.create_index(op.f('idx_subscriptions_summary_platform_ids'), 'subscriptions_summary', ['platform_subscription_id', 'platform_origin'], unique=False, schema='joaocastanheira_bancodedados')
    op.create_index(op.f('idx_subscriptions_summary_plan_id'), 'subscriptions_summary', ['plan_id'], unique=False, schema='joaocastanheira_bancodedados')
    op.create_index(op.f('idx_subscriptions_summary_offer_id'), 'subscriptions_summary', ['offer_id'], unique=False, schema='joaocastanheira_bancodedados')
    op.create_index(op.f('idx_subscriptions_summary_last_rec_trans_num'), 'subscriptions_summary', ['last_recurrency_transaction_number'], unique=False, schema='joaocastanheira_bancodedados')
    op.create_index(op.f('idx_subscriptions_summary_last_rec_num'), 'subscriptions_summary', ['last_recurrency_number'], unique=False, schema='joaocastanheira_bancodedados')
    op.create_index(op.f('idx_subscriptions_summary_end_accession_date'), 'subscriptions_summary', ['end_accession_date'], unique=False, schema='joaocastanheira_bancodedados')
    op.create_index(op.f('idx_subscriptions_summary_customer_id'), 'subscriptions_summary', ['customer_id'], unique=False, schema='joaocastanheira_bancodedados')
    op.create_index(op.f('idx_subscriptions_summary_accession_date'), 'subscriptions_summary', ['accession_date'], unique=False, schema='joaocastanheira_bancodedados')
    op.create_table('nodes',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('category', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('version', sa.VARCHAR(length=50), server_default=sa.text("'1.0.0'::character varying"), autoincrement=False, nullable=False),
    sa.Column('definition', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('is_public', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('code_template', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('input_schema', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('output_schema', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('parameters_schema', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('icon', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('color', sa.VARCHAR(length=7), autoincrement=False, nullable=True),
    sa.Column('documentation', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('examples', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('downloads_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('usage_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('rating_average', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('rating_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('workspace_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('type', postgresql.ENUM('llm', 'transform', 'api', 'condition', 'trigger', 'operation', 'flow', 'input', 'output', 'file_processor', name='nodetype'), server_default=sa.text("'operation'::nodetype"), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('draft', 'published', 'deprecated', 'private', name='nodestatus'), server_default=sa.text("'draft'::nodestatus"), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['synapscale_db.users.id'], name='nodes_user_id_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['workspace_id'], ['synapscale_db.workspaces.id'], name='nodes_workspace_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='nodes_pkey'),
    schema='synapscale_db',
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_public_nodes_workspace_id'), 'nodes', ['workspace_id'], unique=False, schema='synapscale_db')
    op.create_index(op.f('ix_public_nodes_user_id'), 'nodes', ['user_id'], unique=False, schema='synapscale_db')
    op.create_table('password_reset_tokens',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('token', sa.VARCHAR(length=500), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('is_used', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('password_reset_tokens_pkey')),
    schema='synapscale_db'
    )
    op.create_index(op.f('ix_synapscale_db_password_reset_tokens_user_id'), 'password_reset_tokens', ['user_id'], unique=False, schema='synapscale_db')
    op.create_index(op.f('ix_synapscale_db_password_reset_tokens_token'), 'password_reset_tokens', ['token'], unique=True, schema='synapscale_db')
    op.create_table('commission_participants',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('joaocastanheira_bancodedados.commission_participants_id_seq'::regclass)"), autoincrement=True, nullable=False, comment='Identificador único interno do participante.'),
    sa.Column('platform_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False, comment='Identificador do participante na plataforma de origem.'),
    sa.Column('platform_origin', sa.VARCHAR(length=100), autoincrement=False, nullable=False, comment='Nome da plataforma de onde este participante foi originado (ex: "Hotmart", "Kiwify").'),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='E-mail principal do participante.'),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='Nome completo ou razão social.'),
    sa.Column('trade_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='Nome comercial, fantasia ou de afiliado.'),
    sa.Column('locale', sa.VARCHAR(length=20), autoincrement=False, nullable=True, comment='Código de localidade/idioma do participante (ex: "pt_BR").'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True, comment='Timestamp da criação do registro do participante.'),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True, comment='Timestamp da última atualização do registro do participante.'),
    sa.Column('phone_local_code', sa.VARCHAR(length=10), autoincrement=False, nullable=True, comment='DDD ou código de área do telefone do participante.'),
    sa.Column('phone_number', sa.VARCHAR(length=20), autoincrement=False, nullable=True, comment='Número do telefone do participante (sem DDD/código de área).'),
    sa.Column('document_type', sa.VARCHAR(length=10), autoincrement=False, nullable=True, comment='Tipo de documento do participante (ex: "CPF", "CNPJ", "PASSPORT").'),
    sa.Column('document_number', sa.VARCHAR(length=50), autoincrement=False, nullable=True, comment='Número do documento do participante, como CPF, CNPJ ou passaporte.'),
    sa.PrimaryKeyConstraint('id', name='commission_participants_pkey'),
    sa.UniqueConstraint('platform_id', 'platform_origin', name='uq_participant_platform', postgresql_include=[], postgresql_nulls_not_distinct=False),
    schema='joaocastanheira_bancodedados',
    comment='Armazena participantes de comissão (Hotmart: producers, affiliates; Kiwify: affiliates, partners). Os endereços são armazenados na tabela participant_addresses.',
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('idx_commission_participants_platform_origin'), 'commission_participants', ['platform_origin'], unique=False, schema='joaocastanheira_bancodedados')
    op.create_index(op.f('idx_commission_participants_email'), 'commission_participants', ['email'], unique=False, schema='joaocastanheira_bancodedados')
    op.create_table('platform_status',
    sa.Column('id', sa.BIGINT(), sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1), autoincrement=True, nullable=False, comment='Identificador único do status.'),
    sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=False, comment='Nome do status.'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False, comment='Data/hora em que o registro foi criado.'),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False, comment='Data/hora da última atualização do registro.'),
    sa.PrimaryKeyConstraint('id', name='platform_status_pkey'),
    sa.UniqueConstraint('status', name='uk_platform_status_name', postgresql_include=[], postgresql_nulls_not_distinct=False),
    schema='banco_de_dados',
    comment='Lista de possíveis status de transações ou assinaturas.',
    postgresql_ignore_search_path=False
    )
    op.create_table('platform_subscription',
    sa.Column('id', sa.BIGINT(), sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1), autoincrement=True, nullable=False, comment='Identificador único do assinante.'),
    sa.Column('subscription_id', sa.BIGINT(), autoincrement=False, nullable=False, comment='ID da assinatura na plataforma.'),
    sa.Column('subscriber_id', sa.BIGINT(), autoincrement=False, nullable=False, comment='ID do assinante (tabela platform_sale_client).'),
    sa.Column('id_transaction', sa.VARCHAR(length=255), autoincrement=False, nullable=False, comment='ID da transação associada à assinatura.'),
    sa.Column('subscriber_code', sa.VARCHAR(length=100), autoincrement=False, nullable=True, comment='Código do assinante ou código promocional.'),
    sa.Column('purchase', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False, comment='Indica se foi compra de assinatura (TRUE/FALSE).'),
    sa.Column('platform', sa.VARCHAR(length=100), autoincrement=False, nullable=False, comment='Nome da plataforma onde ocorreu a venda da assinatura.'),
    sa.Column('billing_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False, comment='Tipo de assinatura/billing.'),
    sa.Column('lifetime', sa.INTEGER(), autoincrement=False, nullable=True, comment='Tempo de vida da assinatura em dias.'),
    sa.Column('max_cycles', sa.INTEGER(), autoincrement=False, nullable=True, comment='Máximo de ciclos de cobrança antes da expiração.'),
    sa.Column('last_update', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True, comment='Data/hora da última atualização da assinatura.'),
    sa.Column('subscription_start', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False, comment='Data/hora de início da assinatura.'),
    sa.Column('subscription_end', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True, comment='Data/hora de término da assinatura.'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False, comment='Data/hora em que o registro foi criado.'),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False, comment='Data/hora da última atualização do registro.'),
    sa.ForeignKeyConstraint(['subscriber_id'], ['banco_de_dados.platform_sale_client.id'], name='fk_psub_subscriber', onupdate='CASCADE', ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id', name='platform_subscription_pkey'),
    schema='banco_de_dados',
    comment='Assinaturas registradas nas diversas plataformas.',
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('uq_psub_transaction'), 'platform_subscription', ['id_transaction'], unique=True, schema='banco_de_dados')
    op.create_index(op.f('uq_psub_subscription_id'), 'platform_subscription', ['subscription_id'], unique=True, schema='banco_de_dados')
    op.create_index(op.f('idx_psub_subscriber'), 'platform_subscription', ['subscriber_id'], unique=False, schema='banco_de_dados')
    op.create_table('participant_addresses',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False, comment='Identificador único interno do endereço.'),
    sa.Column('participant_id', sa.INTEGER(), autoincrement=False, nullable=False, comment='Referência ao participante dono deste endereço.'),
    sa.Column('address', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='Logradouro (Rua, Avenida, etc.).'),
    sa.Column('neighborhood', sa.VARCHAR(length=100), autoincrement=False, nullable=True, comment='Bairro.'),
    sa.Column('country', sa.VARCHAR(length=100), autoincrement=False, nullable=True, comment='País (Código ISO ou nome).'),
    sa.Column('city', sa.VARCHAR(length=100), autoincrement=False, nullable=True, comment='Cidade.'),
    sa.Column('zip_code', sa.VARCHAR(length=20), autoincrement=False, nullable=True, comment='Código de Endereçamento Postal (CEP).'),
    sa.Column('complement', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='Complemento do endereço (Bloco, Apto, etc.).'),
    sa.Column('number', sa.VARCHAR(length=20), autoincrement=False, nullable=True, comment='Número do imóvel.'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True, comment='Timestamp da criação do registro.'),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True, comment='Timestamp da última atualização do registro.'),
    sa.Column('state', sa.VARCHAR(length=100), autoincrement=False, nullable=True, comment='Estado/UF do endereço.'),
    sa.ForeignKeyConstraint(['participant_id'], ['joaocastanheira_bancodedados.commission_participants.id'], name=op.f('participant_addresses_participant_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('participant_addresses_pkey')),
    schema='joaocastanheira_bancodedados',
    comment='Armazena os endereços específicos de participantes de comissão (afiliados, produtores, co-produtores).'
    )
    op.create_index(op.f('idx_participant_addresses_zip_code'), 'participant_addresses', ['zip_code'], unique=False, schema='joaocastanheira_bancodedados')
    op.create_index(op.f('idx_participant_addresses_state'), 'participant_addresses', ['state'], unique=False, schema='joaocastanheira_bancodedados')
    op.create_index(op.f('idx_participant_addresses_participant_id'), 'participant_addresses', ['participant_id'], unique=False, schema='joaocastanheira_bancodedados')
    op.create_index(op.f('idx_participant_addresses_country_city'), 'participant_addresses', ['country', 'city'], unique=False, schema='joaocastanheira_bancodedados')
    op.create_table('analytics_metrics',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('metric_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('metric_value', sa.NUMERIC(precision=15, scale=4), autoincrement=False, nullable=False),
    sa.Column('dimensions', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=False),
    sa.Column('timestamp', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('analytics_metrics_pkey')),
    schema='synapscale_db'
    )
    op.create_table('platform_transaction_product',
    sa.Column('id', sa.BIGINT(), sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1), autoincrement=True, nullable=False, comment='Identificador único do registro.'),
    sa.Column('platform_subscription_id', sa.BIGINT(), autoincrement=False, nullable=True, comment='ID da assinatura associada ao produto (tabela platform_subscription).'),
    sa.Column('platform_sale_id', sa.BIGINT(), autoincrement=False, nullable=True, comment='ID da venda associada ao produto (tabela platform_sale).'),
    sa.Column('product_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False, comment='Identificador do produto na plataforma.'),
    sa.Column('ucode', sa.VARCHAR(length=100), autoincrement=False, nullable=False, comment='Código único do produto.'),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False, comment='Nome do produto.'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False, comment='Data/hora em que o registro foi criado.'),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False, comment='Data/hora da última atualização do registro.'),
    sa.ForeignKeyConstraint(['platform_sale_id'], ['banco_de_dados.platform_sale.id'], name=op.f('fk_ptp_sale'), onupdate='CASCADE', ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['platform_subscription_id'], ['banco_de_dados.platform_subscription.id'], name=op.f('fk_ptp_subscription'), onupdate='CASCADE', ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id', name=op.f('platform_transaction_product_pkey')),
    schema='banco_de_dados',
    comment='Produtos vinculados a transações de venda ou assinatura.'
    )
    op.create_index(op.f('idx_ptp_platform_subscription'), 'platform_transaction_product', ['platform_subscription_id'], unique=False, schema='banco_de_dados')
    op.create_index(op.f('idx_ptp_platform_sale'), 'platform_transaction_product', ['platform_sale_id'], unique=False, schema='banco_de_dados')
    op.create_table('platform_transaction_invoice',
    sa.Column('id', sa.BIGINT(), sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1), autoincrement=True, nullable=False, comment='Identificador único do registro.'),
    sa.Column('platform_subscription_id', sa.BIGINT(), autoincrement=False, nullable=True, comment='ID da assinatura associada à fatura (tabela platform_subscription).'),
    sa.Column('platform_sale_id', sa.BIGINT(), autoincrement=False, nullable=True, comment='ID da venda associada à fatura (tabela platform_sale).'),
    sa.Column('software_invoice_id', sa.BIGINT(), autoincrement=False, nullable=False, comment='ID do software responsável pela emissão da fatura (tabela software_invoice).'),
    sa.Column('type', postgresql.ENUM('subscription', 'single_payment', name='platform_transaction_invoice_type', schema='banco_de_dados'), autoincrement=False, nullable=False, comment='Tipo da fatura: subscription ou single_payment.'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False, comment='Data/hora em que o registro foi criado.'),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False, comment='Data/hora da última atualização do registro.'),
    sa.ForeignKeyConstraint(['platform_sale_id'], ['banco_de_dados.platform_sale.id'], name=op.f('fk_pti_sale'), onupdate='CASCADE', ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['platform_subscription_id'], ['banco_de_dados.platform_subscription.id'], name=op.f('fk_pti_subscription'), onupdate='CASCADE', ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id', name=op.f('platform_transaction_invoice_pkey')),
    schema='banco_de_dados',
    comment='Faturas geradas para vendas únicas ou assinaturas.'
    )
    op.create_index(op.f('idx_pti_software_invoice'), 'platform_transaction_invoice', ['software_invoice_id'], unique=False, schema='banco_de_dados')
    op.create_index(op.f('idx_pti_platform_subscription'), 'platform_transaction_invoice', ['platform_subscription_id'], unique=False, schema='banco_de_dados')
    op.create_index(op.f('idx_pti_platform_sale'), 'platform_transaction_invoice', ['platform_sale_id'], unique=False, schema='banco_de_dados')
    op.create_table('user_behavior_metrics',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('period_type', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('session_count', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('total_session_duration', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('avg_session_duration', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('page_views', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('unique_pages_visited', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('workflows_created', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('workflows_executed', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('components_used', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('collaborations_initiated', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('marketplace_purchases', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('revenue_generated', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('components_published', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('error_count', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('support_tickets', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('feature_requests', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('engagement_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('satisfaction_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('value_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['synapscale_db.users.id'], name=op.f('user_behavior_metrics_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('user_behavior_metrics_pkey')),
    schema='synapscale_db'
    )
    op.create_index(op.f('ix_public_user_behavior_metrics_user_id'), 'user_behavior_metrics', ['user_id'], unique=False, schema='synapscale_db')
    op.create_index(op.f('ix_public_user_behavior_metrics_date'), 'user_behavior_metrics', ['date'], unique=False, schema='synapscale_db')
    op.create_table('plans',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('joaocastanheira_bancodedados.plans_id_seq'::regclass)"), autoincrement=True, nullable=False, comment='Identificador único interno do plano.'),
    sa.Column('plan_id', sa.VARCHAR(length=100), autoincrement=False, nullable=False, comment='Identificador do plano na plataforma de origem.'),
    sa.Column('platform_origin', sa.VARCHAR(length=100), autoincrement=False, nullable=False, comment='Nome da plataforma de onde este plano foi originado.'),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='Nome oficial do plano.'),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True, comment='Descrição detalhada do que o plano inclui.'),
    sa.Column('product_id', sa.INTEGER(), autoincrement=False, nullable=True, comment='Referência ao produto principal ao qual este plano está associado.'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True, comment='Timestamp da criação do registro do plano.'),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True, comment='Timestamp da última atualização do registro do plano.'),
    sa.Column('price', sa.NUMERIC(precision=15, scale=4), autoincrement=False, nullable=True, comment='Preço base do plano por ciclo de cobrança.'),
    sa.Column('currency_code', sa.VARCHAR(length=3), autoincrement=False, nullable=True, comment='Código da moeda do preço do plano (ex: "BRL", "USD").'),
    sa.Column('recurrency_period', sa.INTEGER(), autoincrement=False, nullable=True, comment='Armazena a duração da recorrência em dias, indicando quantos dias o ciclo de recorrência abrange.'),
    sa.Column('recurrency_type', sa.INTEGER(), autoincrement=False, nullable=True, comment='Define o tipo de recorrência do plano, como mensal, anual, trimestral, semestral, etc.'),
    sa.Column('trial_period', sa.INTEGER(), autoincrement=False, nullable=True, comment='Número de dias do período de teste'),
    sa.Column('max_cycles', sa.INTEGER(), autoincrement=False, nullable=True, comment='Número máximo de ciclos de cobrança (0 ou NULL para infinito).'),
    sa.Column('trial', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False, comment='Indica se a assinatura possuiu período de teste'),
    sa.Column('trial_end', postgresql.TIMESTAMP(), autoincrement=False, nullable=True, comment='Data e hora do fim do período de trial'),
    sa.ForeignKeyConstraint(['product_id'], ['joaocastanheira_bancodedados.products.id'], name='plans_product_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='plans_pkey'),
    sa.UniqueConstraint('plan_id', 'platform_origin', name='uq_plan_platform', postgresql_include=[], postgresql_nulls_not_distinct=False),
    schema='joaocastanheira_bancodedados',
    comment='Catálogo de planos (geralmente associados a assinaturas) vinculados a produtos, unificando dados das plataformas.',
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('idx_plans_product_id'), 'plans', ['product_id'], unique=False, schema='joaocastanheira_bancodedados')
    op.create_index(op.f('idx_plans_platform_origin'), 'plans', ['platform_origin'], unique=False, schema='joaocastanheira_bancodedados')
    op.create_table('workflow_templates',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('category', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('tags', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('workflow_definition', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('preview_image', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('author_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('version', sa.VARCHAR(length=50), server_default=sa.text("'1.0.0'::character varying"), autoincrement=False, nullable=False),
    sa.Column('is_public', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('is_featured', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('downloads_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('rating_average', sa.NUMERIC(precision=3, scale=2), server_default=sa.text('0.00'), autoincrement=False, nullable=False),
    sa.Column('rating_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('price', sa.NUMERIC(precision=10, scale=2), server_default=sa.text('0.00'), autoincrement=False, nullable=False),
    sa.Column('is_free', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('license', sa.VARCHAR(length=50), server_default=sa.text("'MIT'::character varying"), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('short_description', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('original_workflow_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('is_verified', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('license_type', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('workflow_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('nodes_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('connections_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('required_variables', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('optional_variables', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('default_config', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('compatibility_version', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('estimated_duration', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('complexity_level', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('download_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('usage_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('view_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('keywords', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('use_cases', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('industries', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('thumbnail_url', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('preview_images', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('demo_video_url', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('documentation', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('setup_instructions', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('changelog', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('support_email', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('repository_url', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('documentation_url', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('published_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('last_used_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['author_id'], ['synapscale_db.users.id'], name='workflow_templates_author_id_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['original_workflow_id'], ['synapscale_db.workflows.id'], name='workflow_templates_original_workflow_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='workflow_templates_pkey'),
    schema='synapscale_db',
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_public_workflow_templates_status'), 'workflow_templates', ['status'], unique=False, schema='synapscale_db')
    op.create_index(op.f('ix_public_workflow_templates_published_at'), 'workflow_templates', ['published_at'], unique=False, schema='synapscale_db')
    op.create_index(op.f('ix_public_workflow_templates_original_workflow_id'), 'workflow_templates', ['original_workflow_id'], unique=False, schema='synapscale_db')
    op.create_index(op.f('ix_public_workflow_templates_license_type'), 'workflow_templates', ['license_type'], unique=False, schema='synapscale_db')
    op.create_index(op.f('ix_public_workflow_templates_is_verified'), 'workflow_templates', ['is_verified'], unique=False, schema='synapscale_db')
    op.create_index(op.f('ix_public_workflow_templates_download_count'), 'workflow_templates', ['download_count'], unique=False, schema='synapscale_db')
    op.create_table('marketplace_components',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('category', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('component_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('tags', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('price', sa.NUMERIC(precision=10, scale=2), server_default=sa.text('0.00'), autoincrement=False, nullable=False),
    sa.Column('is_free', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('author_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('version', sa.VARCHAR(length=50), server_default=sa.text("'1.0.0'::character varying"), autoincrement=False, nullable=False),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('component_metadata', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('downloads_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('rating_average', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('rating_count', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('is_featured', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('is_approved', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'pending'::character varying"), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('short_description', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('subcategory', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('author_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('organization', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('configuration_schema', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('dependencies', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('compatibility', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('documentation', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('readme', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('changelog', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('examples', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('icon_url', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('screenshots', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('demo_url', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('video_url', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('currency', sa.VARCHAR(length=3), autoincrement=False, nullable=True),
    sa.Column('license_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('install_count', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('view_count', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('like_count', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('is_verified', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('moderation_notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('keywords', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('search_vector', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('popularity_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('published_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('last_download_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['author_id'], ['synapscale_db.users.id'], name='marketplace_components_author_id_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='marketplace_components_pkey'),
    schema='synapscale_db',
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_public_marketplace_components_subcategory'), 'marketplace_components', ['subcategory'], unique=False, schema='synapscale_db')
    op.create_table('products',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('joaocastanheira_bancodedados.products_id_seq'::regclass)"), autoincrement=True, nullable=False, comment='Identificador único interno do produto.'),
    sa.Column('product_id', sa.VARCHAR(length=100), autoincrement=False, nullable=False, comment='Identificador do produto na plataforma de origem.'),
    sa.Column('platform_origin', sa.VARCHAR(length=100), autoincrement=False, nullable=False, comment='Nome da plataforma de onde este produto foi originado.'),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='Nome oficial do produto.'),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True, comment='Descrição completa do produto.'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True, comment='Timestamp da criação do registro do produto.'),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True, comment='Timestamp da última atualização do registro do produto.'),
    sa.PrimaryKeyConstraint('id', name='products_pkey'),
    sa.UniqueConstraint('product_id', 'platform_origin', name='uq_product_platform', postgresql_include=[], postgresql_nulls_not_distinct=False),
    schema='joaocastanheira_bancodedados',
    comment='Catálogo unificado de produtos registrados nas diversas plataformas de venda.',
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('idx_products_platform_origin'), 'products', ['platform_origin'], unique=False, schema='joaocastanheira_bancodedados')
    op.create_index(op.f('idx_products_name'), 'products', ['name'], unique=False, schema='joaocastanheira_bancodedados')
    op.create_table('workflows',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('definition', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('workspace_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('is_public', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('category', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('tags', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('version', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('status', postgresql.ENUM('DRAFT', 'PUBLISHED', 'ARCHIVED', 'DEPRECATED', name='workflowstatus'), autoincrement=False, nullable=True),
    sa.Column('thumbnail_url', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('downloads_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('rating_average', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('rating_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('execution_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('last_executed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['synapscale_db.users.id'], name='workflows_user_id_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['workspace_id'], ['synapscale_db.workspaces.id'], name='workflows_workspace_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='workflows_pkey'),
    schema='synapscale_db',
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_public_workflows_workspace_id'), 'workflows', ['workspace_id'], unique=False, schema='synapscale_db')
    op.create_table('sufixos',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('produto', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('plataforma', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('sufixo', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('sufixos_pkey')),
    schema='banco_de_dados_jc'
    )
    op.create_table('component_versions',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('component_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('version', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('is_latest', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('is_stable', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('changelog', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('breaking_changes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('migration_guide', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('component_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('file_size', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('min_platform_version', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('max_platform_version', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('dependencies', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('download_count', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('deprecated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['component_id'], ['synapscale_db.marketplace_components.id'], name=op.f('component_versions_component_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('component_versions_pkey')),
    schema='synapscale_db'
    )
    op.create_index(op.f('ix_public_component_versions_component_id'), 'component_versions', ['component_id'], unique=False, schema='synapscale_db')
    op.create_table('platform_commission_participants_doc',
    sa.Column('id', sa.BIGINT(), sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1), autoincrement=True, nullable=False, comment='Identificador único do documento.'),
    sa.Column('value', sa.VARCHAR(length=50), autoincrement=False, nullable=False, comment='Valor do documento, como CPF ou CNPJ.'),
    sa.Column('type', sa.VARCHAR(length=10), autoincrement=False, nullable=False, comment='Tipo do documento (exemplo: "CPF", "CNPJ").'),
    sa.Column('commission_participant_id', sa.BIGINT(), autoincrement=False, nullable=False, comment='ID do participante da comissão ao qual o documento pertence.'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False, comment='Data que o registro foi criado no banco.'),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False, comment='Data que o registro foi atualizado no banco.'),
    sa.ForeignKeyConstraint(['commission_participant_id'], ['banco_de_dados.platform_commission_participants.id'], name=op.f('fk_pcpd_participant'), onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('platform_commission_participants_doc_pkey')),
    schema='banco_de_dados',
    comment='Documentos (CPF/CNPJ) vinculados a participantes comissionados.'
    )
    op.create_index(op.f('idx_pcpd_commission_participant'), 'platform_commission_participants_doc', ['commission_participant_id'], unique=False, schema='banco_de_dados')
    op.create_table('platform_transaction_plan_history',
    sa.Column('id', sa.BIGINT(), sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1), autoincrement=True, nullable=False, comment='Identificador único do registro.'),
    sa.Column('plan_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False, comment='Nome do plano que ocorreu na venda.'),
    sa.Column('plan_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False, comment='ID do plano fornecido pela plataforma.'),
    sa.Column('price', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=False, comment='Preço do plano na transação.'),
    sa.Column('recurrency_period', sa.VARCHAR(length=50), autoincrement=False, nullable=True, comment='Período fixo de recorrência do plano oferecido.'),
    sa.Column('coupon_code', sa.VARCHAR(length=100), autoincrement=False, nullable=True, comment='Código do cupom utilizado na compra do plano.'),
    sa.Column('charge_cycles', sa.INTEGER(), autoincrement=False, nullable=True, comment='Máximo de ciclos de cobrança disponibilizados pela plataforma.'),
    sa.Column('recurrency_type', postgresql.ENUM('mensal', 'anual', 'única', 'custom', name='platform_transaction_plan_history_recurrency_type', schema='banco_de_dados'), autoincrement=False, nullable=False, comment='Tipo de recorrência utilizada (mensal, anual, única, custom).'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False, comment='Data/hora em que o registro foi criado.'),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False, comment='Data/hora da última atualização do registro.'),
    sa.PrimaryKeyConstraint('id', name=op.f('platform_transaction_plan_history_pkey')),
    schema='banco_de_dados',
    comment='Histórico de planos (nome, preço, recorrência) vinculados a transações.'
    )
    op.create_index(op.f('idx_ptplanh_plan_name'), 'platform_transaction_plan_history', ['plan_name'], unique=False, schema='banco_de_dados')
    op.create_index(op.f('idx_ptplanh_plan_id'), 'platform_transaction_plan_history', ['plan_id'], unique=False, schema='banco_de_dados')
    op.create_table('users',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('username', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('hashed_password', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('full_name', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('is_verified', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('is_superuser', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('profile_image_url', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('bio', sa.VARCHAR(length=1000), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    schema='synapscale_db',
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_synapscale_db_users_username'), 'users', ['username'], unique=True, schema='synapscale_db')
    op.create_index(op.f('ix_synapscale_db_users_email'), 'users', ['email'], unique=True, schema='synapscale_db')
    op.create_table('platform_sale_client_history',
    sa.Column('id', sa.BIGINT(), sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1), autoincrement=True, nullable=False, comment='Identificador único do registro (chave primária).'),
    sa.Column('platform_sale_client_id', sa.BIGINT(), autoincrement=False, nullable=False, comment='ID do cliente que realizou uma venda e teve informações alteradas.'),
    sa.Column('field_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False, comment='Nome do campo que foi alterado pelo cliente.'),
    sa.Column('old_value', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='Valor anterior do campo antes da alteração.'),
    sa.Column('new_value', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='Novo valor do campo após a alteração.'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False, comment='Data e hora em que a alteração foi registrada.'),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False, comment='Data e hora da última atualização no histórico de alterações.'),
    sa.ForeignKeyConstraint(['platform_sale_client_id'], ['banco_de_dados.platform_sale_client.id'], name=op.f('fk_platform_sale_client_history__platform_sale_client'), onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('platform_sale_client_history_pkey')),
    schema='banco_de_dados',
    comment='Histórico de alterações feitas pelo cliente em suas informações de venda.'
    )
    op.create_index(op.f('idx_platform_sale_client_history__client'), 'platform_sale_client_history', ['platform_sale_client_id'], unique=False, schema='banco_de_dados')
    op.create_table('fact_vendas',
    sa.Column('venda_id', sa.BIGINT(), autoincrement=True, nullable=False, comment='Id da venda no nosso banco de dados e vai desde a primeira venda concluida ate a ultima em ordem. Ou seja, nao e o codigo do gateway e sim do nosso banco. Codigo interno.'),
    sa.Column('cliente_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('produto_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('codigo_payt', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('id_venda_kiwify', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('codigo_transacao_hotmart', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('plataforma', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('data_venda', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('data_atualizacao', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('valor_bruto', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('valor_liquido', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('valor_imposto', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('taxa_plataforma', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('comissao_afiliado', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('comissao_coprodutor', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('forma_pagamento', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('quantidade_parcelas', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('status_venda', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('utm_source_compra', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('utm_medium_compra', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('utm_campaign_compra', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('utm_term_compra', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('utm_content_compra', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('obs_venda', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('email_comprador', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('sku', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('codigovenda_no_gateway', sa.VARCHAR(length=50), autoincrement=False, nullable=False, comment='Codigo da venda no gateway / na plataforma de pagamentos em que ela ocorreu. '),
    sa.Column('documento_comprador', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('produto', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['cliente_id'], ['banco_de_dados_jc.dim_cliente.cliente_id'], name=op.f('fact_vendas_cliente_id_fkey')),
    sa.PrimaryKeyConstraint('venda_id', 'cliente_id', name=op.f('fact_vendas_pkey')),
    schema='banco_de_dados_jc',
    comment='folder:fato|Registra cada venda (transação unificada) relacionando cliente e produto.'
    )
    op.create_index(op.f('fact_vendas_produto_idx'), 'fact_vendas', ['produto_id'], unique=False, schema='banco_de_dados_jc')
    op.create_index(op.f('fact_vendas_data_venda_idx'), 'fact_vendas', ['data_venda'], unique=False, schema='banco_de_dados_jc')
    op.create_index(op.f('fact_vendas_cliente_idx'), 'fact_vendas', ['cliente_id'], unique=False, schema='banco_de_dados_jc')
    op.create_table('project_versions',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('project_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('version_number', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('version_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('workflow_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('changes_summary', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('file_size', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('checksum', sa.VARCHAR(length=64), autoincrement=False, nullable=True),
    sa.Column('is_major', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('is_auto_save', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['project_id'], ['synapscale_db.workspace_projects.id'], name=op.f('project_versions_project_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['synapscale_db.users.id'], name=op.f('project_versions_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('project_versions_pkey')),
    schema='synapscale_db'
    )
    op.create_index(op.f('ix_public_project_versions_user_id'), 'project_versions', ['user_id'], unique=False, schema='synapscale_db')
    op.create_index(op.f('ix_public_project_versions_project_id'), 'project_versions', ['project_id'], unique=False, schema='synapscale_db')
    op.create_table('report_executions',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('report_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('execution_type', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('parameters', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('result_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('execution_time_ms', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('rows_processed', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('data_size_bytes', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('started_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('completed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['report_id'], ['synapscale_db.custom_reports.id'], name=op.f('report_executions_report_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['synapscale_db.users.id'], name=op.f('report_executions_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('report_executions_pkey')),
    schema='synapscale_db'
    )
    op.create_index(op.f('ix_public_report_executions_user_id'), 'report_executions', ['user_id'], unique=False, schema='synapscale_db')
    op.create_index(op.f('ix_public_report_executions_report_id'), 'report_executions', ['report_id'], unique=False, schema='synapscale_db')
    op.create_table('node_ratings',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('node_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('rating', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['node_id'], ['synapscale_db.nodes.id'], name=op.f('node_ratings_node_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['synapscale_db.users.id'], name=op.f('node_ratings_user_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('node_ratings_pkey')),
    schema='synapscale_db'
    )
    op.create_index(op.f('ix_synapscale_db_node_ratings_user_id'), 'node_ratings', ['user_id'], unique=False, schema='synapscale_db')
    op.create_index(op.f('ix_synapscale_db_node_ratings_node_id'), 'node_ratings', ['node_id'], unique=False, schema='synapscale_db')
    op.create_table('workflow_executions',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('execution_id', sa.VARCHAR(length=36), autoincrement=False, nullable=True),
    sa.Column('workflow_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'pending'::character varying"), autoincrement=False, nullable=False),
    sa.Column('priority', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('input_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('output_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('context_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('variables', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('total_nodes', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('completed_nodes', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('failed_nodes', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('progress_percentage', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('started_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('completed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('timeout_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('estimated_duration', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('actual_duration', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('execution_log', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('error_details', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('debug_info', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('retry_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('max_retries', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('auto_retry', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('notify_on_completion', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('notify_on_failure', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('tags', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('meta_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['synapscale_db.users.id'], name=op.f('workflow_executions_user_id_fkey'), onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['workflow_id'], ['synapscale_db.workflows.id'], name=op.f('workflow_executions_workflow_id_fkey'), onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('workflow_executions_pkey')),
    schema='synapscale_db'
    )
    op.create_index(op.f('ix_public_workflow_executions_user_id'), 'workflow_executions', ['user_id'], unique=False, schema='synapscale_db')
    op.create_index(op.f('ix_public_workflow_executions_priority'), 'workflow_executions', ['priority'], unique=False, schema='synapscale_db')
    op.create_index(op.f('ix_public_workflow_executions_execution_id'), 'workflow_executions', ['execution_id'], unique=True, schema='synapscale_db')
    op.create_table('conversations',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('agent_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('workspace_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('title', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('message_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('total_tokens_used', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('context', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('settings', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('last_message_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['agent_id'], ['synapscale_db.agents.id'], name=op.f('conversations_agent_id_fkey'), onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['synapscale_db.users.id'], name=op.f('conversations_user_id_fkey'), onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('conversations_pkey')),
    schema='synapscale_db'
    )
    op.create_table('component_purchases',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('component_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('amount', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('currency', sa.VARCHAR(length=3), autoincrement=False, nullable=False),
    sa.Column('payment_method', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('transaction_id', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('payment_provider', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('provider_transaction_id', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('license_key', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('license_expires_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('completed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('refunded_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['component_id'], ['synapscale_db.marketplace_components.id'], name=op.f('component_purchases_component_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['synapscale_db.users.id'], name=op.f('component_purchases_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('component_purchases_pkey')),
    sa.UniqueConstraint('license_key', name=op.f('component_purchases_license_key_key'), postgresql_include=[], postgresql_nulls_not_distinct=False),
    sa.UniqueConstraint('transaction_id', name=op.f('component_purchases_transaction_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False),
    schema='synapscale_db'
    )
    op.create_index(op.f('ix_public_component_purchases_user_id'), 'component_purchases', ['user_id'], unique=False, schema='synapscale_db')
    op.create_index(op.f('ix_public_component_purchases_component_id'), 'component_purchases', ['component_id'], unique=False, schema='synapscale_db')
    op.create_table('mapa_produtos',
    sa.Column('map_produto_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('plataforma', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('produto', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('sufixo_produto', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('codigos_produto', postgresql.ARRAY(sa.TEXT()), server_default=sa.text("'{}'::text[]"), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('map_produto_id', name=op.f('mapa_produtos_pkey')),
    sa.UniqueConstraint('plataforma', 'produto', 'sufixo_produto', name=op.f('mapa_produtos_plataforma_produto_sufixo_produto_key'), postgresql_include=[], postgresql_nulls_not_distinct=False),
    schema='banco_de_dados_jc'
    )
    op.create_table('addresses',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('joaocastanheira_bancodedados.addresses_id_seq'::regclass)"), autoincrement=True, nullable=False, comment='Identificador único sequencial do endereço.'),
    sa.Column('address', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='Logradouro (Rua, Avenida, etc.).'),
    sa.Column('neighborhood', sa.VARCHAR(length=100), autoincrement=False, nullable=True, comment='Bairro.'),
    sa.Column('country', sa.VARCHAR(length=100), autoincrement=False, nullable=True, comment='País (Código ISO ou nome).'),
    sa.Column('city', sa.VARCHAR(length=100), autoincrement=False, nullable=True, comment='Cidade.'),
    sa.Column('zip_code', sa.VARCHAR(length=20), autoincrement=False, nullable=True, comment='Código de Endereçamento Postal (CEP).'),
    sa.Column('complement', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='Complemento do endereço (Bloco, Apto, etc.).'),
    sa.Column('number', sa.VARCHAR(length=20), autoincrement=False, nullable=True, comment='Número do imóvel.'),
    sa.Column('ip', sa.VARCHAR(length=45), autoincrement=False, nullable=True, comment='Endereço IP associado ao registro do endereço (se aplicável).'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True, comment='Timestamp da criação do registro.'),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True, comment='Timestamp da última atualização do registro.'),
    sa.Column('state', sa.VARCHAR(length=100), autoincrement=False, nullable=True, comment='Estado/UF do endereço.'),
    sa.PrimaryKeyConstraint('id', name='addresses_pkey'),
    schema='joaocastanheira_bancodedados',
    comment='Repositório centralizado de endereços, garantindo precisão e rastreabilidade de localizações de clientes.',
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('idx_addresses_zip_code'), 'addresses', ['zip_code'], unique=False, schema='joaocastanheira_bancodedados')
    op.create_index(op.f('idx_addresses_state'), 'addresses', ['state'], unique=False, schema='joaocastanheira_bancodedados')
    op.create_index(op.f('idx_addresses_country'), 'addresses', ['country'], unique=False, schema='joaocastanheira_bancodedados')
    op.create_index(op.f('idx_addresses_city'), 'addresses', ['city'], unique=False, schema='joaocastanheira_bancodedados')
    op.create_table('platform_transaction_status',
    sa.Column('id', sa.BIGINT(), sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1), autoincrement=True, nullable=False, comment='Identificador único do registro.'),
    sa.Column('platform_sale_id', sa.BIGINT(), autoincrement=False, nullable=True, comment='ID da venda associada ao status (tabela platform_sale).'),
    sa.Column('platform_status_id', sa.BIGINT(), autoincrement=False, nullable=False, comment='ID do status da transação (tabela platform_status).'),
    sa.Column('platform_subscription_id', sa.BIGINT(), autoincrement=False, nullable=True, comment='ID da assinatura associada ao status (tabela platform_subscription).'),
    sa.Column('reason', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='Razão ou descrição do status.'),
    sa.Column('type', postgresql.ENUM('subscription', 'single_sale', name='platform_transaction_status_type', schema='banco_de_dados'), autoincrement=False, nullable=False, comment='Tipo da transação: subscription ou single_sale.'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False, comment='Data/hora em que o registro foi criado.'),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False, comment='Data/hora da última atualização do registro.'),
    sa.ForeignKeyConstraint(['platform_sale_id'], ['banco_de_dados.platform_sale.id'], name=op.f('fk_pts_sale'), onupdate='CASCADE', ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['platform_status_id'], ['banco_de_dados.platform_status.id'], name=op.f('fk_pts_status'), onupdate='CASCADE', ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['platform_subscription_id'], ['banco_de_dados.platform_subscription.id'], name=op.f('fk_pts_subscription'), onupdate='CASCADE', ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id', name=op.f('platform_transaction_status_pkey')),
    schema='banco_de_dados',
    comment='Status de cada transação (venda ou assinatura) nas plataformas.'
    )
    op.create_index(op.f('idx_pts_platform_subscription'), 'platform_transaction_status', ['platform_subscription_id'], unique=False, schema='banco_de_dados')
    op.create_index(op.f('idx_pts_platform_status'), 'platform_transaction_status', ['platform_status_id'], unique=False, schema='banco_de_dados')
    op.create_index(op.f('idx_pts_platform_sale'), 'platform_transaction_status', ['platform_sale_id'], unique=False, schema='banco_de_dados')
    op.create_table('platform_subscription__recurrency_history',
    sa.Column('id', sa.BIGINT(), sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1), autoincrement=True, nullable=False),
    sa.Column('platform_subscription_id', sa.BIGINT(), autoincrement=False, nullable=False, comment='ID da assinatura (tabela platform_subscription).'),
    sa.Column('id_transaction', sa.VARCHAR(length=255), autoincrement=False, nullable=False, comment='Transação da recorrência.'),
    sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('transaction_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('under_warranty', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('is_trial', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('current_purchase', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('is_paid_anticipation', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('payment_delay', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('trial_period', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('trial_end', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('sequence', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('last_recurrency', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('recurrency', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('recurrency_period', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('retry_schedule', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('last_recurrency_status', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('transaction_quantity', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('request_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('cancellation_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('charge_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['platform_subscription_id'], ['banco_de_dados.platform_subscription.id'], name=op.f('fk_psrh_subscription'), onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('platform_subscription__recurrency_history_pkey')),
    schema='banco_de_dados',
    comment='Histórico das recorrências (cobranças) de cada assinatura.'
    )
    op.create_index(op.f('idx_psrh_transaction'), 'platform_subscription__recurrency_history', ['id_transaction'], unique=False, schema='banco_de_dados')
    op.create_index(op.f('idx_psrh_platform_subscription'), 'platform_subscription__recurrency_history', ['platform_subscription_id'], unique=False, schema='banco_de_dados')
    op.create_table('workspace_members',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('workspace_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('role', postgresql.ENUM('OWNER', 'ADMIN', 'EDITOR', 'VIEWER', 'GUEST', name='workspacerole'), autoincrement=False, nullable=False),
    sa.Column('custom_permissions', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('is_favorite', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('notification_preferences', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('last_seen_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('joined_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('left_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['synapscale_db.users.id'], name=op.f('workspace_members_user_id_fkey')),
    sa.ForeignKeyConstraint(['workspace_id'], ['synapscale_db.workspaces.id'], name=op.f('workspace_members_workspace_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('workspace_members_pkey')),
    schema='synapscale_db'
    )
    op.create_index(op.f('ix_public_workspace_members_workspace_id'), 'workspace_members', ['workspace_id'], unique=False, schema='synapscale_db')
    op.create_index(op.f('ix_public_workspace_members_user_id'), 'workspace_members', ['user_id'], unique=False, schema='synapscale_db')
    op.create_index(op.f('ix_public_workspace_members_id'), 'workspace_members', ['id'], unique=False, schema='synapscale_db')
    op.create_table('user_insights',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('insight_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('category', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('priority', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('recommendation', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('supporting_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('confidence_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('suggested_action', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('action_url', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('action_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_read', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('is_dismissed', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('is_acted_upon', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('user_feedback', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('expires_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('is_evergreen', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('read_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('acted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['synapscale_db.users.id'], name=op.f('user_insights_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('user_insights_pkey')),
    schema='synapscale_db'
    )
    op.create_index(op.f('ix_public_user_insights_user_id'), 'user_insights', ['user_id'], unique=False, schema='synapscale_db')
    op.create_index(op.f('ix_public_user_insights_insight_type'), 'user_insights', ['insight_type'], unique=False, schema='synapscale_db')
    op.create_index(op.f('ix_public_user_insights_category'), 'user_insights', ['category'], unique=False, schema='synapscale_db')
    op.create_table('workflow_connections',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('workflow_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('source_node_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('target_node_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('source_port', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('target_port', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['source_node_id'], ['synapscale_db.workflow_nodes.id'], name=op.f('workflow_connections_source_node_id_fkey')),
    sa.ForeignKeyConstraint(['target_node_id'], ['synapscale_db.workflow_nodes.id'], name=op.f('workflow_connections_target_node_id_fkey')),
    sa.ForeignKeyConstraint(['workflow_id'], ['synapscale_db.workflows.id'], name=op.f('workflow_connections_workflow_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('workflow_connections_pkey')),
    schema='synapscale_db'
    )
    op.create_index(op.f('ix_public_workflow_connections_workflow_id'), 'workflow_connections', ['workflow_id'], unique=False, schema='synapscale_db')
    op.create_table('transaction_status_history',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False, comment='Identificador único interno do registro de histórico.'),
    sa.Column('transaction_id', sa.INTEGER(), autoincrement=False, nullable=False, comment='Referência à transação cujo status mudou.'),
    sa.Column('status_id', sa.INTEGER(), autoincrement=False, nullable=False, comment='Referência ao novo status (padronizado) que a transação assumiu.'),
    sa.Column('change_date', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True, comment='Data e hora em que a mudança para este status ocorreu efetivamente (idealmente o timestamp da plataforma).'),
    sa.Column('reason', sa.TEXT(), autoincrement=False, nullable=True, comment='Descrição textual opcional explicando o motivo da mudança de status.'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True, comment='Timestamp da criação deste registro de histórico.'),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True, comment='Timestamp da última atualização deste registro de histórico.'),
    sa.ForeignKeyConstraint(['status_id'], ['joaocastanheira_bancodedados.transaction_statuses.id'], name=op.f('transaction_status_history_status_id_fkey')),
    sa.ForeignKeyConstraint(['transaction_id'], ['joaocastanheira_bancodedados.transactions.id'], name=op.f('transaction_status_history_transaction_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('transaction_status_history_pkey')),
    schema='joaocastanheira_bancodedados',
    comment='Registra o histórico de todas as mudanças de status pelas quais uma transação passou.'
    )
    op.create_index(op.f('idx_transaction_status_history_trans_id'), 'transaction_status_history', ['transaction_id'], unique=False, schema='joaocastanheira_bancodedados')
    op.create_index(op.f('idx_transaction_status_history_status_id'), 'transaction_status_history', ['status_id'], unique=False, schema='joaocastanheira_bancodedados')
    op.create_index(op.f('idx_transaction_status_history_change_date'), 'transaction_status_history', ['change_date'], unique=False, schema='joaocastanheira_bancodedados')
    op.create_table('template_usage',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('template_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('workflow_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('usage_type', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('success', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('template_version', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('modifications_made', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('execution_time', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('ip_address', sa.VARCHAR(length=45), autoincrement=False, nullable=True),
    sa.Column('user_agent', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('used_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['template_id'], ['synapscale_db.workflow_templates.id'], name=op.f('template_usage_template_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['synapscale_db.users.id'], name=op.f('template_usage_user_id_fkey')),
    sa.ForeignKeyConstraint(['workflow_id'], ['synapscale_db.workflows.id'], name=op.f('template_usage_workflow_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('template_usage_pkey')),
    schema='synapscale_db'
    )
    op.create_index(op.f('ix_public_template_usage_workflow_id'), 'template_usage', ['workflow_id'], unique=False, schema='synapscale_db')
    op.create_index(op.f('ix_public_template_usage_user_id'), 'template_usage', ['user_id'], unique=False, schema='synapscale_db')
    op.create_index(op.f('ix_public_template_usage_used_at'), 'template_usage', ['used_at'], unique=False, schema='synapscale_db')
    op.create_index(op.f('ix_public_template_usage_template_id'), 'template_usage', ['template_id'], unique=False, schema='synapscale_db')
    op.create_index(op.f('ix_public_template_usage_id'), 'template_usage', ['id'], unique=False, schema='synapscale_db')
    op.create_table('workspace_activities',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('workspace_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('action', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('resource_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('resource_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('description', sa.VARCHAR(length=500), autoincrement=False, nullable=False),
    sa.Column('meta_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('ip_address', sa.VARCHAR(length=45), autoincrement=False, nullable=True),
    sa.Column('user_agent', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['synapscale_db.users.id'], name=op.f('workspace_activities_user_id_fkey')),
    sa.ForeignKeyConstraint(['workspace_id'], ['synapscale_db.workspaces.id'], name=op.f('workspace_activities_workspace_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('workspace_activities_pkey')),
    schema='synapscale_db'
    )
    op.create_index(op.f('ix_public_workspace_activities_workspace_id'), 'workspace_activities', ['workspace_id'], unique=False, schema='synapscale_db')
    op.create_index(op.f('ix_public_workspace_activities_user_id'), 'workspace_activities', ['user_id'], unique=False, schema='synapscale_db')
    op.create_index(op.f('ix_public_workspace_activities_action'), 'workspace_activities', ['action'], unique=False, schema='synapscale_db')
    op.create_table('customer_logs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False, comment='Identificador único do registro de log.'),
    sa.Column('customer_id', sa.INTEGER(), autoincrement=False, nullable=False, comment='Referência ao cliente cujos dados foram alterados.'),
    sa.Column('field_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False, comment='Nome da coluna na tabela customers que foi modificada.'),
    sa.Column('old_value', sa.TEXT(), autoincrement=False, nullable=True, comment='Valor do campo antes da alteração.'),
    sa.Column('new_value', sa.TEXT(), autoincrement=False, nullable=True, comment='Valor do campo após a alteração.'),
    sa.Column('changed_by', sa.VARCHAR(length=100), server_default=sa.text("'SYSTEM'::character varying"), autoincrement=False, nullable=True, comment='Identificação do agente que realizou a mudança (sistema, usuário, API).'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True, comment='Timestamp do registro da alteração.'),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True, comment='Timestamp da última atualização do registro de log (raramente usado).'),
    sa.ForeignKeyConstraint(['customer_id'], ['joaocastanheira_bancodedados.customers.id'], name=op.f('customer_logs_customer_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('customer_logs_pkey')),
    schema='joaocastanheira_bancodedados',
    comment='Tabela de auditoria para rastrear modificações nos dados da tabela customers.'
    )
    op.create_index(op.f('idx_customer_logs_customer_id'), 'customer_logs', ['customer_id'], unique=False, schema='joaocastanheira_bancodedados')
    op.create_index(op.f('idx_customer_logs_created_at'), 'customer_logs', ['created_at'], unique=False, schema='joaocastanheira_bancodedados')
    op.create_table('platform_transaction_fee_history',
    sa.Column('id', sa.BIGINT(), sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1), autoincrement=True, nullable=False),
    sa.Column('base_value', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=False, comment='Valor base do produto sobre o qual a taxa foi aplicada.'),
    sa.Column('fee_amount', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=False, comment='Valor da taxa paga na transação.'),
    sa.Column('fee_currency_code', sa.VARCHAR(length=10), autoincrement=False, nullable=False, comment='Código da moeda referente à taxa (ex.: BRL, USD).'),
    sa.Column('fee_percentage', sa.NUMERIC(precision=6, scale=3), autoincrement=False, nullable=True, comment='Percentual da taxa aplicada sobre a transação.'),
    sa.Column('tax_amount', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=False, comment='Valor do imposto pago na venda.'),
    sa.Column('tax_currency_code', sa.VARCHAR(length=10), autoincrement=False, nullable=False, comment='Código da moeda referente ao imposto.'),
    sa.Column('tax_percentage', sa.NUMERIC(precision=6, scale=3), autoincrement=False, nullable=True, comment='Percentual do imposto cobrado sobre a transação.'),
    sa.Column('coupon_value', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=True, comment='Valor do cupom promocional aplicado à transação.'),
    sa.Column('coupon_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True, comment='Nome do cupom promocional utilizado.'),
    sa.Column('conversion_rate', sa.NUMERIC(precision=18, scale=8), autoincrement=False, nullable=True, comment='Taxa de conversão da moeda aplicada à transação.'),
    sa.Column('fixed_value', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=True, comment='Valor fixo cobrado pela plataforma.'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False, comment='Data/hora em que o registro foi criado.'),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False, comment='Data/hora da última atualização do registro.'),
    sa.PrimaryKeyConstraint('id', name=op.f('platform_transaction_fee_history_pkey')),
    schema='banco_de_dados',
    comment='Histórico detalhado das taxas, impostos, cupons e valores fixos aplicados às transações.'
    )
    op.create_index(op.f('idx_ptfeeh_tax_currency'), 'platform_transaction_fee_history', ['tax_currency_code'], unique=False, schema='banco_de_dados')
    op.create_index(op.f('idx_ptfeeh_fee_currency'), 'platform_transaction_fee_history', ['fee_currency_code'], unique=False, schema='banco_de_dados')
    op.create_index(op.f('idx_ptfeeh_coupon_name'), 'platform_transaction_fee_history', ['coupon_name'], unique=False, schema='banco_de_dados')
    op.create_table('platform_commission_participants',
    sa.Column('id', sa.BIGINT(), sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1), autoincrement=True, nullable=False, comment='Identificador único do participante.'),
    sa.Column('platform_id', sa.VARCHAR(length=100), autoincrement=False, nullable=False, comment='Código único da pessoa comissionada na plataforma.'),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='Email do cliente – campo a ser atualizado.'),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='Nome do cliente – campo a ser atualizado.'),
    sa.Column('trader_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='Nome do trader ou responsável pela conta.'),
    sa.Column('telephone', sa.VARCHAR(length=50), autoincrement=False, nullable=True, comment='Número de telefone do participante.'),
    sa.Column('document', sa.VARCHAR(length=100), autoincrement=False, nullable=True, comment='Documento do cliente (exemplo: CPF ou CNPJ).'),
    sa.Column('locale', sa.VARCHAR(length=10), autoincrement=False, nullable=True, comment='Código de localização/idioma do participante (exemplo: "pt_BR", "en_US").'),
    sa.Column('client_address_id', sa.BIGINT(), autoincrement=False, nullable=True, comment='ID da tabela de endereço do cliente (platform_sale_client_address).'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False, comment='Data que o registro foi criado no banco.'),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False, comment='Data que o registro foi atualizado no banco.'),
    sa.ForeignKeyConstraint(['client_address_id'], ['banco_de_dados.platform_sale_client_address.id'], name=op.f('fk_pcp_client_address'), onupdate='CASCADE', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('platform_commission_participants_pkey')),
    schema='banco_de_dados',
    comment='Participantes que recebem comissões (ex.: afiliados, produtores, coprodutores).'
    )
    op.create_index(op.f('idx_pcp_platform_id'), 'platform_commission_participants', ['platform_id'], unique=False, schema='banco_de_dados')
    op.create_index(op.f('idx_pcp_client_address'), 'platform_commission_participants', ['client_address_id'], unique=False, schema='banco_de_dados')
    op.create_table('business_metrics',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('period_type', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('total_users', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('new_users', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('active_users', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('churned_users', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('total_sessions', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('avg_session_duration', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('total_page_views', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('bounce_rate', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('workflows_created', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('workflows_executed', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('components_published', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('components_downloaded', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('workspaces_created', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('teams_formed', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('collaborative_sessions', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('total_revenue', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('recurring_revenue', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('marketplace_revenue', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('avg_revenue_per_user', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('error_rate', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('avg_response_time', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('uptime_percentage', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('customer_satisfaction', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('business_metrics_pkey')),
    schema='synapscale_db'
    )
    op.create_index(op.f('ix_public_business_metrics_id'), 'business_metrics', ['id'], unique=False, schema='synapscale_db')
    op.create_index(op.f('ix_public_business_metrics_date'), 'business_metrics', ['date'], unique=False, schema='synapscale_db')
    op.create_table('project_comments',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('project_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('parent_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('content_type', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('node_id', sa.VARCHAR(length=36), autoincrement=False, nullable=True),
    sa.Column('position_x', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('position_y', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('is_resolved', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('is_edited', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('resolved_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['parent_id'], ['synapscale_db.project_comments.id'], name=op.f('project_comments_parent_id_fkey')),
    sa.ForeignKeyConstraint(['project_id'], ['synapscale_db.workspace_projects.id'], name=op.f('project_comments_project_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['synapscale_db.users.id'], name=op.f('project_comments_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('project_comments_pkey')),
    schema='synapscale_db'
    )
    op.create_index(op.f('ix_public_project_comments_user_id'), 'project_comments', ['user_id'], unique=False, schema='synapscale_db')
    op.create_index(op.f('ix_public_project_comments_project_id'), 'project_comments', ['project_id'], unique=False, schema='synapscale_db')
    op.create_index(op.f('ix_public_project_comments_parent_id'), 'project_comments', ['parent_id'], unique=False, schema='synapscale_db')
    op.create_table('analytics_events',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('event_id', sa.VARCHAR(length=36), autoincrement=False, nullable=False),
    sa.Column('event_type', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('category', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('action', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('label', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('session_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('anonymous_id', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('ip_address', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('user_agent', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('referrer', sa.VARCHAR(length=1000), autoincrement=False, nullable=True),
    sa.Column('page_url', sa.VARCHAR(length=1000), autoincrement=False, nullable=True),
    sa.Column('properties', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=False),
    sa.Column('value', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('workspace_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('project_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('workflow_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('country', sa.VARCHAR(length=2), autoincrement=False, nullable=True),
    sa.Column('region', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('city', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('timezone', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('device_type', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('os', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('browser', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('screen_resolution', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('timestamp', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['project_id'], ['synapscale_db.workspace_projects.id'], name=op.f('analytics_events_project_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['synapscale_db.users.id'], name=op.f('analytics_events_user_id_fkey'), onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['workflow_id'], ['synapscale_db.workflows.id'], name=op.f('analytics_events_workflow_id_fkey')),
    sa.ForeignKeyConstraint(['workspace_id'], ['synapscale_db.workspaces.id'], name=op.f('analytics_events_workspace_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('analytics_events_pkey')),
    schema='synapscale_db'
    )
    op.create_index(op.f('ix_public_analytics_events_workspace_id'), 'analytics_events', ['workspace_id'], unique=False, schema='synapscale_db')
    op.create_index(op.f('ix_public_analytics_events_workflow_id'), 'analytics_events', ['workflow_id'], unique=False, schema='synapscale_db')
    op.create_index(op.f('ix_public_analytics_events_project_id'), 'analytics_events', ['project_id'], unique=False, schema='synapscale_db')
    op.create_index(op.f('ix_public_analytics_events_label'), 'analytics_events', ['label'], unique=False, schema='synapscale_db')
    op.create_index(op.f('ix_public_analytics_events_event_id'), 'analytics_events', ['event_id'], unique=True, schema='synapscale_db')
    op.create_index(op.f('ix_public_analytics_events_category'), 'analytics_events', ['category'], unique=False, schema='synapscale_db')
    op.create_index(op.f('ix_public_analytics_events_anonymous_id'), 'analytics_events', ['anonymous_id'], unique=False, schema='synapscale_db')
    op.create_index(op.f('ix_public_analytics_events_action'), 'analytics_events', ['action'], unique=False, schema='synapscale_db')
    op.create_table('vendas_na_kiwify',
    sa.Column('id_venda', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('numero_da_venda', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('referencia_venda', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('tipo_produto', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('data_criacao', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('data_atualizacao', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('produto_id', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('produto_nome', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('produto_oferta_id', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('produto_oferta_nome', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('produto_plano_id', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('produto_plano_nome', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('envio_json', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('envio_codigo_rastreamento', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('status_recebimento', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('metodo_pagamento', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('tipo_pagamento', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('data_aprovacao', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('data_reembolso', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('pagamento_um_clique', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('provedor_one_click', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('parcelas', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('ultimos_digitos_cartao', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('motivo_recusa', sa.VARCHAR(length=1000), autoincrement=False, nullable=True),
    sa.Column('motivo_rejeicao_cartao', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('tipo_cartao', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('pagamento_dois_cartoes', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('moeda', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('valor_total_cobrado', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('valor_do_acrescimo_dos_juros', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('preco_base_produto', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('valor_taxa_plataforma', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('valor_comissao_afiliado', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('valor_comissao_coprodutor', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('valor_comissao_liquida', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('url_boleto', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('data_liberacao_estimada', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('data_deposito', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('tipo_venda', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('id_pedido_pai', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('cliente', sa.VARCHAR(length=1000), autoincrement=False, nullable=True),
    sa.Column('cliente_id', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('cliente_nome', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('cpf', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('celular', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('cliente_instagram', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('pais', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('endereco', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('numero', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('complemento', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('bairro', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('cidade', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('estado', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('cep', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('ip', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('tracking_sck', sa.VARCHAR(length=1000), autoincrement=False, nullable=True),
    sa.Column('tracking_src', sa.VARCHAR(length=1000), autoincrement=False, nullable=True),
    sa.Column('tracking_utm_source', sa.VARCHAR(length=1000), autoincrement=False, nullable=True),
    sa.Column('tracking_utm_medium', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('tracking_utm_campaign', sa.VARCHAR(length=1000), autoincrement=False, nullable=True),
    sa.Column('tracking_utm_content', sa.VARCHAR(length=1000), autoincrement=False, nullable=True),
    sa.Column('tracking_utm_term', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('comissao_afiliado_valor', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('comissao_afiliado_nome', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('comissao_afiliado_email', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('comissao_afiliado_documento', sa.VARCHAR(length=1000), autoincrement=False, nullable=True),
    sa.Column('parceiros_receita', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('desconto_codigo', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('desconto_percentual', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('kiwify_network', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('id_nota_fiscal', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('status_nota_fiscal', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('nota_fiscal_emitida_por', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('software_nota_fiscal', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('valor_nota_fiscal', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id_venda', name=op.f('vendas_na_kiwify_pkey')),
    sa.UniqueConstraint('referencia_venda', name=op.f('unique_referencia_venda'), postgresql_include=[], postgresql_nulls_not_distinct=False),
    schema='banco_de_dados_jc'
    )
    op.create_table('fact_acessos_cademi',
    sa.Column('acesso_id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('cliente_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('produto_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('data_acesso', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('tipo_acesso', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('duracao_min', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('modulo_curso', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['cliente_id'], ['banco_de_dados_jc.dim_cliente.cliente_id'], name=op.f('fact_acessos_cademi_cliente_id_fkey')),
    sa.PrimaryKeyConstraint('acesso_id', name=op.f('fact_acessos_cademi_pkey')),
    schema='banco_de_dados_jc',
    comment='folder:fato|Registra acessos dos clientes aos cursos e módulos na plataforma Cademi.'
    )
    op.create_table('component_downloads',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('component_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('version', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('download_type', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('ip_address', sa.VARCHAR(length=45), autoincrement=False, nullable=True),
    sa.Column('user_agent', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('referrer', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('file_size', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('completed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['component_id'], ['synapscale_db.marketplace_components.id'], name=op.f('component_downloads_component_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['synapscale_db.users.id'], name=op.f('component_downloads_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('component_downloads_pkey')),
    schema='synapscale_db'
    )
    op.create_index(op.f('ix_public_component_downloads_user_id'), 'component_downloads', ['user_id'], unique=False, schema='synapscale_db')
    op.create_index(op.f('ix_public_component_downloads_component_id'), 'component_downloads', ['component_id'], unique=False, schema='synapscale_db')
    op.create_table('platform_software_invoice_history',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False, comment='Identificador único interno do registro de NF.'),
    sa.Column('transaction_id', sa.INTEGER(), autoincrement=False, nullable=False, comment='Referência à transação correspondente.'),
    sa.Column('invoice_number', sa.VARCHAR(length=100), autoincrement=False, nullable=True, comment='Número sequencial da NF.'),
    sa.Column('invoice_series', sa.VARCHAR(length=20), autoincrement=False, nullable=True, comment='Série da NF.'),
    sa.Column('invoice_key', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='Chave de acesso única da NF-e.'),
    sa.Column('issue_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True, comment='Timestamp da emissão da NF.'),
    sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=True, comment='Status atual da NF (ex: "Emitida", "Cancelada").'),
    sa.Column('xml_url', sa.TEXT(), autoincrement=False, nullable=True, comment='Link para download do arquivo XML.'),
    sa.Column('pdf_url', sa.TEXT(), autoincrement=False, nullable=True, comment='Link para download do arquivo PDF (DANFE).'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True, comment='Timestamp da criação do registro de NF.'),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True, comment='Timestamp da última atualização do registro de NF.'),
    sa.ForeignKeyConstraint(['transaction_id'], ['joaocastanheira_bancodedados.transactions.id'], name=op.f('platform_software_invoice_history_transaction_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('platform_software_invoice_history_pkey')),
    sa.UniqueConstraint('invoice_key', name=op.f('platform_software_invoice_history_invoice_key_key'), postgresql_include=[], postgresql_nulls_not_distinct=False),
    schema='joaocastanheira_bancodedados',
    comment='Armazena informações sobre Notas Fiscais emitidas e associadas a transações, potencialmente via integração com software de emissão.'
    )
    op.create_index(op.f('idx_plat_soft_inv_hist_trans_id'), 'platform_software_invoice_history', ['transaction_id'], unique=False, schema='joaocastanheira_bancodedados')
    op.create_index(op.f('idx_plat_soft_inv_hist_issue_date'), 'platform_software_invoice_history', ['issue_date'], unique=False, schema='joaocastanheira_bancodedados')
    op.create_table('template_downloads',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('template_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('download_type', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('ip_address', sa.VARCHAR(length=45), autoincrement=False, nullable=True),
    sa.Column('user_agent', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('template_version', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('downloaded_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['template_id'], ['synapscale_db.workflow_templates.id'], name=op.f('template_downloads_template_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['synapscale_db.users.id'], name=op.f('template_downloads_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('template_downloads_pkey')),
    schema='synapscale_db'
    )
    op.create_index(op.f('ix_public_template_downloads_user_id'), 'template_downloads', ['user_id'], unique=False, schema='synapscale_db')
    op.create_index(op.f('ix_public_template_downloads_template_id'), 'template_downloads', ['template_id'], unique=False, schema='synapscale_db')
    op.create_index(op.f('ix_public_template_downloads_id'), 'template_downloads', ['id'], unique=False, schema='synapscale_db')
    op.create_index(op.f('ix_public_template_downloads_downloaded_at'), 'template_downloads', ['downloaded_at'], unique=False, schema='synapscale_db')
    op.create_table('subscription_status_history',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False, comment='Identificador único interno do registro de histórico.'),
    sa.Column('subscription_id', sa.INTEGER(), autoincrement=False, nullable=False, comment='Referência à assinatura cujo status mudou.'),
    sa.Column('status_id', sa.INTEGER(), autoincrement=False, nullable=False, comment='Referência ao novo status (padronizado) que a assinatura assumiu, utilizando a tabela transaction_statuses.'),
    sa.Column('change_date', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True, comment='Data e hora em que a mudança para este status ocorreu efetivamente (idealmente o timestamp da plataforma).'),
    sa.Column('reason', sa.TEXT(), autoincrement=False, nullable=True, comment='Descrição textual opcional explicando o motivo da mudança de status.'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True, comment='Timestamp da criação deste registro de histórico.'),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True, comment='Timestamp da última atualização deste registro de histórico.'),
    sa.ForeignKeyConstraint(['status_id'], ['joaocastanheira_bancodedados.transaction_statuses.id'], name=op.f('subscription_status_history_status_id_fkey')),
    sa.ForeignKeyConstraint(['subscription_id'], ['joaocastanheira_bancodedados.subscriptions.id'], name=op.f('subscription_status_history_subscription_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('subscription_status_history_pkey')),
    schema='joaocastanheira_bancodedados',
    comment='Registra o histórico de todas as mudanças de status pelas quais uma assinatura passou ao longo do tempo.'
    )
    op.create_index(op.f('idx_subscription_status_history_sub_id'), 'subscription_status_history', ['subscription_id'], unique=False, schema='joaocastanheira_bancodedados')
    op.create_index(op.f('idx_subscription_status_history_status_id'), 'subscription_status_history', ['status_id'], unique=False, schema='joaocastanheira_bancodedados')
    op.create_index(op.f('idx_subscription_status_history_change_date'), 'subscription_status_history', ['change_date'], unique=False, schema='joaocastanheira_bancodedados')
    op.create_table('fact_pesquisas',
    sa.Column('pesquisa_id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('cliente_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('data_resposta', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('tipo_pesquisa', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('pergunta_1', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('resposta_1', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('pergunta_2', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('resposta_2', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('nota_nps', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('obs_pesquisa', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['cliente_id'], ['banco_de_dados_jc.dim_cliente.cliente_id'], name=op.f('fact_pesquisas_cliente_id_fkey')),
    sa.PrimaryKeyConstraint('pesquisa_id', name=op.f('fact_pesquisas_pkey')),
    schema='banco_de_dados_jc',
    comment='folder:fato|Registra respostas de pesquisas/NPS, vinculando ao cliente.'
    )
    op.create_table('email_verification_tokens',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('token', sa.VARCHAR(length=500), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('is_used', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('email_verification_tokens_pkey')),
    schema='synapscale_db'
    )
    op.create_index(op.f('ix_synapscale_db_email_verification_tokens_user_id'), 'email_verification_tokens', ['user_id'], unique=False, schema='synapscale_db')
    op.create_index(op.f('ix_synapscale_db_email_verification_tokens_token'), 'email_verification_tokens', ['token'], unique=True, schema='synapscale_db')
    # ### end Alembic commands ###
