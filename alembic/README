# Guia de Migrações Alembic — Padrão para Equipe

## Estrutura de Diretórios
- **alembic/**: scripts e configuração principal
  - **alembic/env.py**: lógica de ambiente Alembic
  - **alembic/versions/**: arquivos de migração versionados
  - **alembic/README**: este guia
- **config/alembic.ini**: arquivo de configuração principal (ajuste o caminho se necessário)

---

## Convenções de Nomes
- **Revisions**: sempre use hashes curtos (ex: `1234abcd5678`) como valor de `revision` e nome do arquivo (ex: `1234abcd5678_add_field_to_table.py`).
- **down_revision**: sempre aponte para o hash da migração anterior.
- **Nunca use nomes longos ou descritivos como revision.**

---

## Passo a Passo para Criar e Aplicar Migrações

### 1. Gerar uma nova migração
```sh
alembic revision -m "descrição curta" -c config/alembic.ini
```
- O arquivo será criado em `alembic/versions/`.
- Edite o arquivo para definir as operações de upgrade/downgrade.

### 2. Migração envolvendo Enum (padrão seguro)
**Sempre separe em duas migrações:**
- **Primeira:** Adicione o novo valor ao Enum.
- **Segunda:** Adicione a coluna que usa o novo valor como default.

**Exemplo:**
```python
# Migração 1: Adiciona valor ao Enum
revision = '1234abcd5678'
down_revision = 'anterior'
def upgrade():
    op.execute("ALTER TYPE meu_enum ADD VALUE IF NOT EXISTS 'novo_valor';")

def downgrade():
    pass  # Não é possível remover valores de Enum facilmente

# Migração 2: Adiciona coluna usando o Enum
revision = '2345bcde6789'
down_revision = '1234abcd5678'
def upgrade():
    op.add_column(
        'minha_tabela',
        sa.Column('nova_coluna', sa.Enum(..., name='meu_enum'), nullable=False, server_default="novo_valor"),
        schema='meu_schema'  # especifique o schema se necessário
    )

def downgrade():
    op.drop_column('minha_tabela', 'nova_coluna', schema='meu_schema')
```

### 3. Aplicar as migrações
```sh
# Sempre rode na ordem correta:
alembic upgrade <revision> -c config/alembic.ini
# ou para todas até o topo:
alembic upgrade head -c config/alembic.ini
```

### 4. Dicas para execução
- **Sempre confira o schema**: use o parâmetro `schema='...'` se sua tabela não está no schema padrão.
- **Nunca misture alteração de Enum e uso do novo valor na mesma migração.**
- **Documente o propósito da migração no docstring.**
- **Para múltiplos ambientes:** garanta que o `alembic.ini` aponte para o banco correto.

---

## Troubleshooting - Problemas Comuns

### ❌ Erro: "column already exists" ou "DuplicateColumn"
**Problema:** Uma migração está tentando criar uma coluna que já existe.
**Solução:** Use lógica condicional PostgreSQL:

```python
def upgrade():
    op.execute("""
    DO $$
    BEGIN
        IF NOT EXISTS (
            SELECT 1 FROM information_schema.columns 
            WHERE table_schema='schema_name' AND table_name='table_name' AND column_name='column_name'
        ) THEN
            ALTER TABLE schema_name.table_name 
            ADD COLUMN column_name TYPE DEFAULT value;
        END IF;
    END$$;
    """)
```

### ❌ Erro: "revision not found" ou "migration conflicts"
**Problema:** Conflitos na árvore de migrações.
**Solução:**
1. Verificar histórico: `alembic history`
2. Identificar branches: `alembic branches`
3. Merge se necessário: `alembic merge -m "merge description" revision1 revision2`

### ❌ Erro: "target database is not up to date"
**Problema:** Banco local e produção estão em versões diferentes.
**Solução:**
1. Verificar versão atual: `alembic current`
2. Aplicar migrações pendentes: `alembic upgrade head`
3. Se necessário, fazer downgrade primeiro: `alembic downgrade revision`

### ❌ Deploy falhando com erros de migração
**Procedimento de emergência:**
1. **Identificar migração problemática** nos logs
2. **Fazer backup do banco** antes de qualquer ação
3. **Corrigir migração** com lógica condicional (IF NOT EXISTS)
4. **Testar localmente** antes de redeploy
5. **Aplicar correção** via novo commit

---

## Resumo
- Use sempre revisions curtos.
- Separe alterações de Enum e uso do valor novo.
- Especifique schema quando necessário.
- **Use lógica condicional para migrações robustas.**
- Siga a estrutura e comandos deste guia para migrações seguras e reprodutíveis.