server:
  http_listen_port: 9080
  grpc_listen_port: 0

positions:
  filename: /tmp/positions.yaml

clients:
  - url: http://loki:3100/loki/api/v1/push

scrape_configs:
  # Docker container logs
  - job_name: docker-containers
    docker_sd_configs:
      - host: unix:///var/run/docker.sock
        refresh_interval: 5s
        filters:
          - name: label
            values: ["logging=promtail"]
    relabel_configs:
      # Only process containers with logging=promtail label
      - source_labels: ['__meta_docker_container_label_logging']
        regex: promtail
        action: keep
      
      # Extract container name
      - source_labels: ['__meta_docker_container_name']
        regex: '/(.*)'
        target_label: 'container_name'
        replacement: '${1}'
      
      # Extract container image
      - source_labels: ['__meta_docker_container_image']
        target_label: 'container_image'
      
      # Extract compose service name
      - source_labels: ['__meta_docker_container_label_com_docker_compose_service']
        target_label: 'compose_service'
      
      # Set job label
      - target_label: 'job'
        replacement: 'docker-containers'
      
      # Extract log level from labels if available
      - source_labels: ['__meta_docker_container_label_log_level']
        target_label: 'log_level'

    pipeline_stages:
      # Parse JSON logs if they exist
      - json:
          expressions:
            timestamp: timestamp
            level: level
            message: message
            module: module
            function: function
            line: line
            request_id: request_id
            user_id: user_id
            endpoint_category: endpoint_category
            url: url
            method: method
            status_code: status_code
            process_time: process_time
            error_type: error_type
      
      # Set timestamp if available
      - timestamp:
          source: timestamp
          format: RFC3339Nano
          fallback_formats:
            - RFC3339
            - "2006-01-02T15:04:05.999999999Z07:00"
            - "2006-01-02T15:04:05Z07:00"
      
      # Add labels based on parsed JSON
      - labels:
          level:
          module:
          request_id:
          user_id:
          endpoint_category:
          method:
          status_code:
          error_type:

  # Application log files
  - job_name: synapscale-app-logs
    static_configs:
      - targets:
          - localhost
        labels:
          job: synapscale-app-logs
          __path__: /var/log/synapscale/*.log
    
    pipeline_stages:
      # Parse structured logs
      - json:
          expressions:
            timestamp: timestamp
            level: level
            logger: logger
            message: message
            module: module
            function: function
            line: line
            request_id: request_id
            user_id: user_id
            endpoint_category: endpoint_category
            url: url
            method: method
            status_code: status_code
            process_time: process_time
            error_type: error_type
      
      # Set timestamp
      - timestamp:
          source: timestamp
          format: RFC3339Nano
          fallback_formats:
            - RFC3339
            - "2006-01-02T15:04:05.999999999Z07:00"
      
      # Add labels
      - labels:
          level:
          logger:
          module:
          request_id:
          endpoint_category:
          method:
          status_code:
          error_type:

  # System logs (optional)
  - job_name: system-logs
    static_configs:
      - targets:
          - localhost
        labels:
          job: system-logs
          __path__: /var/log/synapscale/system.log
    
    pipeline_stages:
      - regex:
          expression: '^(?P<timestamp>\S+\s+\S+)\s+(?P<level>\S+)\s+(?P<message>.*)$'
      
      - timestamp:
          source: timestamp
          format: "Jan 02 15:04:05"
      
      - labels:
          level: 