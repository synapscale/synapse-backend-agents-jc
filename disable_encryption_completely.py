#!/usr/bin/env python3
"""
Script para desabilitar COMPLETAMENTE a criptografia das user-variables
Remove todas as flags is_encrypted=true e garante que valores sejam salvos em texto claro
"""
import os
import sys
from dotenv import load_dotenv

# Carregar .env
load_dotenv()

# Adicionar src ao path
sys.path.insert(0, 'src')

from sqlalchemy import create_engine, text
from sqlalchemy.orm import sessionmaker
from synapse.models.user_variable import UserVariable

def check_current_status():
    """
    Verifica o status atual das vari√°veis
    """
    DATABASE_URL = os.getenv("DATABASE_URL")
    if not DATABASE_URL:
        print("‚ùå DATABASE_URL n√£o encontrada no .env")
        return False
    
    try:
        engine = create_engine(DATABASE_URL)
        SessionLocal = sessionmaker(bind=engine)
        db = SessionLocal()
        
        print("üîç Verificando status atual das vari√°veis...")
        
        total = db.query(UserVariable).count()
        encrypted = db.query(UserVariable).filter(UserVariable.is_encrypted == True).count()
        not_encrypted = total - encrypted
        
        print(f"üìä STATUS ATUAL:")
        print(f"   Total de vari√°veis: {total}")
        print(f"   Marcadas como criptografadas: {encrypted}")
        print(f"   Marcadas como n√£o criptografadas: {not_encrypted}")
        
        if encrypted > 0:
            print(f"‚ö†Ô∏è  {encrypted} vari√°veis ainda marcadas como criptografadas")
            
            # Mostrar algumas como exemplo
            examples = db.query(UserVariable).filter(UserVariable.is_encrypted == True).limit(5).all()
            print("\nüìã Exemplos de vari√°veis marcadas como criptografadas:")
            for i, var in enumerate(examples):
                print(f"   {i+1}. {var.key} = {var.value[:20]}{'...' if len(var.value) > 20 else ''}")
        else:
            print("‚úÖ Nenhuma vari√°vel est√° marcada como criptografada!")
        
        db.close()
        return encrypted > 0
        
    except Exception as e:
        print(f"‚ùå Erro ao conectar no banco: {e}")
        return False

def force_disable_encryption():
    """
    For√ßa a desabilita√ß√£o completa da criptografia
    """
    DATABASE_URL = os.getenv("DATABASE_URL")
    if not DATABASE_URL:
        print("‚ùå DATABASE_URL n√£o encontrada no .env")
        return False
    
    try:
        engine = create_engine(DATABASE_URL)
        SessionLocal = sessionmaker(bind=engine)
        db = SessionLocal()
        
        print("üîß For√ßando desabilita√ß√£o da criptografia...")
        
        # Buscar todas as vari√°veis marcadas como encrypted
        encrypted_vars = db.query(UserVariable).filter(
            UserVariable.is_encrypted == True
        ).all()
        
        if len(encrypted_vars) == 0:
            print("‚úÖ Nenhuma vari√°vel criptografada encontrada!")
            return True
        
        print(f"üîÑ Atualizando {len(encrypted_vars)} vari√°veis para is_encrypted=false...")
        
        count = 0
        for var in encrypted_vars:
            var.is_encrypted = False
            count += 1
            
            if count % 10 == 0:
                print(f"   Processadas {count}/{len(encrypted_vars)} vari√°veis...")
        
        # Salvar mudan√ßas
        db.commit()
        
        print(f"‚úÖ {count} vari√°veis atualizadas com sucesso!")
        
        # Verifica√ß√£o final
        remaining = db.query(UserVariable).filter(
            UserVariable.is_encrypted == True
        ).count()
        
        if remaining == 0:
            print("üéâ CRIPTOGRAFIA COMPLETAMENTE DESABILITADA!")
            print("üéâ Todas as vari√°veis agora s√£o armazenadas em texto claro")
        else:
            print(f"‚ö†Ô∏è  Ainda restam {remaining} vari√°veis marcadas como criptografadas")
        
        db.close()
        return remaining == 0
        
    except Exception as e:
        print(f"‚ùå Erro ao desabilitar criptografia: {e}")
        return False

def update_schema_defaults():
    """
    Atualiza o schema padr√£o no banco para is_encrypted=false
    """
    DATABASE_URL = os.getenv("DATABASE_URL")
    if not DATABASE_URL:
        print("‚ùå DATABASE_URL n√£o encontrada no .env")
        return False
    
    try:
        engine = create_engine(DATABASE_URL)
        
        print("üîß Atualizando schema padr√£o no banco...")
        
        # Alterar o default da coluna para false
        with engine.connect() as conn:
            conn.execute(text("""
                ALTER TABLE synapscale_db.user_variables 
                ALTER COLUMN is_encrypted SET DEFAULT false
            """))
            conn.commit()
        
        print("‚úÖ Schema padr√£o atualizado - novas vari√°veis ser√£o is_encrypted=false por padr√£o")
        return True
        
    except Exception as e:
        print(f"‚ö†Ô∏è  Erro ao atualizar schema (pode ser normal): {e}")
        return False

def test_new_variable():
    """
    Testa criar uma nova vari√°vel para verificar se est√° funcionando
    """
    DATABASE_URL = os.getenv("DATABASE_URL")
    if not DATABASE_URL:
        print("‚ùå DATABASE_URL n√£o encontrada no .env")
        return False
    
    try:
        engine = create_engine(DATABASE_URL)
        SessionLocal = sessionmaker(bind=engine)
        db = SessionLocal()
        
        print("üß™ Testando cria√ß√£o de nova vari√°vel...")
        
        # Buscar primeiro usu√°rio para teste
        from synapse.models.user import User
        user = db.query(User).first()
        
        if not user:
            print("‚ö†Ô∏è  Nenhum usu√°rio encontrado para teste")
            return False
        
        # Criar vari√°vel de teste
        test_var = UserVariable.create_variable(
            user_id=user.id,
            key="TEST_NO_ENCRYPTION",
            value="this_is_plain_text_123",
            description="Teste de vari√°vel sem criptografia",
            category="test"
        )
        
        db.add(test_var)
        db.commit()
        db.refresh(test_var)
        
        print(f"‚úÖ Vari√°vel de teste criada:")
        print(f"   Key: {test_var.key}")
        print(f"   Value: {test_var.value}")
        print(f"   is_encrypted: {test_var.is_encrypted}")
        print(f"   Valor recuperado: {test_var.get_decrypted_value()}")
        
        # Limpar teste
        db.delete(test_var)
        db.commit()
        print("üßπ Vari√°vel de teste removida")
        
        db.close()
        
        if test_var.is_encrypted:
            print("‚ùå PROBLEMA: Vari√°vel ainda foi marcada como criptografada!")
            return False
        else:
            print("‚úÖ SUCESSO: Vari√°vel criada corretamente sem criptografia!")
            return True
        
    except Exception as e:
        print(f"‚ùå Erro no teste: {e}")
        return False

def main():
    """
    Fun√ß√£o principal
    """
    print("üöÄ SCRIPT PARA DESABILITAR CRIPTOGRAFIA COMPLETAMENTE")
    print("=" * 60)
    
    # 1. Verificar status atual
    print("\n1Ô∏è‚É£ VERIFICANDO STATUS ATUAL...")
    has_encrypted = check_current_status()
    
    # 2. Se h√° vari√°veis criptografadas, corrigir
    if has_encrypted:
        print("\n2Ô∏è‚É£ CORRIGINDO VARI√ÅVEIS EXISTENTES...")
        if not force_disable_encryption():
            print("‚ùå Falha ao corrigir vari√°veis existentes")
            return False
    else:
        print("\n‚úÖ Nenhuma vari√°vel criptografada encontrada")
    
    # 3. Atualizar schema padr√£o
    print("\n3Ô∏è‚É£ ATUALIZANDO SCHEMA PADR√ÉO...")
    update_schema_defaults()
    
    # 4. Testar cria√ß√£o de nova vari√°vel
    print("\n4Ô∏è‚É£ TESTANDO NOVA VARI√ÅVEL...")
    if not test_new_variable():
        print("‚ùå FALHA NO TESTE - ainda h√° problema!")
        return False
    
    # 5. Verifica√ß√£o final
    print("\n5Ô∏è‚É£ VERIFICA√á√ÉO FINAL...")
    if not check_current_status():
        print("\nüéâ SUCESSO TOTAL! CRIPTOGRAFIA COMPLETAMENTE DESABILITADA!")
        print("\nüìã RESUMO DO QUE FOI FEITO:")
        print("   ‚úÖ Todas as vari√°veis existentes marcadas como is_encrypted=false")
        print("   ‚úÖ Schema padr√£o atualizado")
        print("   ‚úÖ Teste de nova vari√°vel funcionando")
        print("   ‚úÖ Valores salvos em texto claro")
        
        print("\nüîß PR√ìXIMOS PASSOS:")
        print("   1. Reinicie o servidor da API")
        print("   2. Teste criar uma nova vari√°vel via endpoint")
        print("   3. Verifique se o valor √© salvo em texto claro")
        
        return True
    else:
        print("‚ùå Ainda h√° problemas - verifique logs acima")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 