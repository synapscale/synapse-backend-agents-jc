#!/usr/bin/env python3
"""
üì∫ Monitor de Logs de Autentica√ß√£o - Tempo Real

Este script monitora e filtra logs de autentica√ß√£o em tempo real,
mostrando apenas as informa√ß√µes relevantes de forma organizada.
"""

import subprocess
import sys
import re
import time
from datetime import datetime

def print_banner():
    """Exibe banner inicial"""
    print("\n" + "=" * 60)
    print("üì∫ MONITOR DE LOGS DE AUTENTICA√á√ÉO - TEMPO REAL")
    print("=" * 60)
    print("üî• Mostrando apenas logs relevantes (sem spam)")
    print("üîê Filtros: LOGIN SUCCESS/FAILED + outros endpoints AUTH")
    print("üìä Exclu√≠dos: current-url, identity, health, metrics")
    print("=" * 60)
    print("üí° Execute testes em outro terminal para ver os logs")
    print("üß™ Comando: python test_auth_logs.py")
    print("=" * 60)
    print(f"‚è∞ Iniciado em: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("\nüîç AGUARDANDO LOGS...")

def filter_log_line(line):
    """
    Filtra e formata linhas de log relevantes.
    
    Retorna:
        tuple: (should_display, formatted_line)
    """
    line = line.strip()
    
    if not line:
        return False, ""
    
    # Filtros de logs irrelevantes (EXCLUIR)
    excluded_patterns = [
        r"current-url",
        r"\.identity", 
        r"/health",
        r"/metrics",
        r"/favicon\.ico",
        r"GET.*docs",
        r"GET.*static",
        r"watchfiles",
        r"INFO.*uvicorn",
        r"Started server process",
        r"Waiting for application startup",
        r"Application startup complete"
    ]
    
    for pattern in excluded_patterns:
        if re.search(pattern, line, re.IGNORECASE):
            return False, ""
    
    # Destacar logs de autentica√ß√£o ESPECIAIS
    if "üîê" in line:
        # Log j√° formatado - apenas destacar mais
        if "‚úÖ LOGIN SUCCESS" in line:
            formatted = f"üéâ {line}"
            return True, f"\033[92m{formatted}\033[0m"  # Verde
        elif "‚ùå LOGIN FAILED" in line:
            formatted = f"‚ö†Ô∏è  {line}"
            return True, f"\033[91m{formatted}\033[0m"  # Vermelho
        else:
            return True, f"\033[94m{line}\033[0m"  # Azul
    
    # Logs de endpoints AUTH em geral
    if "/auth/" in line:
        return True, f"\033[93müîë {line}\033[0m"  # Amarelo
    
    # Logs de erro (importantes)
    if any(level in line for level in ["ERROR", "CRITICAL", "Exception"]):
        return True, f"\033[91m‚ùå {line}\033[0m"  # Vermelho
    
    # Logs de warning (importantes)
    if "WARNING" in line:
        return True, f"\033[93m‚ö†Ô∏è  {line}\033[0m"  # Amarelo
    
    # Outros logs importantes (startup, connections, etc.)
    important_patterns = [
        r"server.*start",
        r"database.*connect",
        r"application.*ready",
        r"POST.*api.*v1",
        r"PUT.*api.*v1", 
        r"DELETE.*api.*v1"
    ]
    
    for pattern in important_patterns:
        if re.search(pattern, line, re.IGNORECASE):
            return True, f"üì° {line}"
    
    # Por padr√£o, n√£o mostrar outros logs
    return False, ""

def monitor_logs():
    """Monitora logs em tempo real"""
    print_banner()
    
    try:
        # Iniciar processo para seguir logs do servidor
        # Assumindo que o servidor est√° rodando com stdout/stderr vis√≠vel
        cmd = ["python", "-u", "src/synapse/main.py"]
        
        # Tentar conectar a um processo j√° rodando via tail/grep
        try:
            # M√©todo alternativo: usar journalctl, logs do sistema, ou tail de arquivo
            # Por enquanto, vamos simular o monitoring
            
            print("üîÑ Tentando conectar aos logs do servidor...")
            print("üìå Execute 'python test_auth_logs.py' em outro terminal")
            print("\n" + "-" * 60)
            
            # Loop de monitoramento simulado
            # Em produ√ß√£o, isto seria conectado aos logs reais
            count = 0
            while True:
                time.sleep(1)
                count += 1
                
                if count % 10 == 0:
                    timestamp = datetime.now().strftime('%H:%M:%S')
                    print(f"‚è≥ {timestamp} - Aguardando atividade de login...")
                
                # Aqui voc√™ conectaria aos logs reais do servidor
                # Por exemplo: seguindo um arquivo de log ou stdout do processo
                
        except KeyboardInterrupt:
            print("\n\nüõë Monitoramento interrompido pelo usu√°rio")
            
    except Exception as e:
        print(f"\n‚ùå Erro ao monitorar logs: {e}")
        print("\nüí° Dicas para resolver:")
        print("   1. Verifique se o servidor est√° rodando")
        print("   2. Execute: python src/synapse/main.py")
        print("   3. Em outro terminal: python test_auth_logs.py")

def show_manual_instructions():
    """Mostra instru√ß√µes manuais para visualizar logs"""
    print("\n" + "=" * 60)
    print("üìã INSTRU√á√ïES MANUAIS - LOGS ORGANIZADOS")
    print("=" * 60)
    
    print("\nüéØ M√âTODO 1: Logs do Servidor Direto")
    print("-" * 30)
    print("Terminal 1 (Servidor):")
    print("   python src/synapse/main.py")
    print("\nTerminal 2 (Testes):")
    print("   python test_auth_logs.py")
    print("\n‚úÖ Resultado: Logs aparecer√£o no Terminal 1")
    
    print("\nüéØ M√âTODO 2: Filtro em Tempo Real")
    print("-" * 30)
    print("Terminal 1 (Servidor com filtro):")
    print("   python src/synapse/main.py 2>&1 | grep -E 'üîê|AUTH|ERROR|WARNING'")
    print("\nTerminal 2 (Testes):")
    print("   python test_auth_logs.py")
    
    print("\nüéØ FORMATO DOS NOVOS LOGS:")
    print("-" * 30)
    print("‚úÖ LOGIN SUCCESS:")
    print("   üîê ‚úÖ LOGIN SUCCESS | User: user@email.com | Input: user@email.com | Method: EMAIL | IP: 127.0.0.1")
    print("\n‚ùå LOGIN FAILED:")
    print("   üîê ‚ùå LOGIN FAILED | Input: user@email.com | Reason: WRONG_PASSWORD | IP: 127.0.0.1")
    print("\nüîë AUTH REQUEST:")
    print("   üîê AUTH | POST /api/v1/auth/login - 200 - 0.123s - 127.0.0.1")
    
    print("\nüö´ LOGS FILTRADOS (n√£o aparecem mais):")
    print("-" * 30)
    print("   ‚ùå POST /current-url")
    print("   ‚ùå GET /.identity")
    print("   ‚ùå GET /health")
    print("   ‚ùå GET /metrics")
    
    print("\n" + "=" * 60)

if __name__ == "__main__":
    if len(sys.argv) > 1 and sys.argv[1] == "--help":
        show_manual_instructions()
    else:
        show_manual_instructions()
        print("\n‚ö° Para monitoramento autom√°tico (em desenvolvimento):")
        print("   python watch_auth_logs.py --monitor") 