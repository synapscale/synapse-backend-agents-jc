#!/bin/bash

# ===================================================
# SCRIPT DE CORRE√á√ÉO DOS PROBLEMAS DO PRISMA
# ===================================================

set -e  # Para se houver qualquer erro

echo "üîß Iniciando corre√ß√£o dos problemas do Prisma..."

# 1. Backup do .env atual
echo "üìã Fazendo backup do .env atual..."
cp .env .env.backup.$(date +%Y%m%d_%H%M%S)

# 2. Corrigir .env
echo "üîß Corrigindo configura√ß√£o do .env..."
cp .env.fixed .env

# 3. Parar qualquer inst√¢ncia em execu√ß√£o
echo "üõë Parando processos em execu√ß√£o..."
pkill -f "uvicorn" || true
docker-compose down || true

# 4. Limpar instala√ß√µes anteriores
echo "üßπ Limpando instala√ß√µes anteriores..."
rm -rf node_modules
rm -f package-lock.json
rm -rf app/generated/prisma/client

# 5. Instalar depend√™ncias
echo "üì¶ Instalando depend√™ncias Node.js..."
npm install

# 6. Gerar cliente Prisma
echo "üîÑ Gerando cliente Prisma..."
npx prisma generate

# 7. Verificar se PostgreSQL est√° rodando
echo "üîç Verificando PostgreSQL..."
if ! pg_isready -h localhost -p 5432 2>/dev/null; then
    echo "‚ö†Ô∏è  PostgreSQL n√£o est√° rodando localmente."
    echo "üê≥ Iniciando PostgreSQL via Docker..."
    docker-compose up -d db
    
    echo "‚è≥ Aguardando PostgreSQL inicializar..."
    for i in {1..30}; do
        if pg_isready -h localhost -p 5432 2>/dev/null; then
            echo "‚úÖ PostgreSQL est√° pronto!"
            break
        fi
        sleep 2
        echo "   Tentativa $i/30..."
    done
fi

# 8. Criar banco se n√£o existir
echo "üóÑÔ∏è  Verificando/criando banco de dados..."
PGPASSWORD=postgres psql -h localhost -U postgres -tc "SELECT 1 FROM pg_database WHERE datname = 'synapse'" | grep -q 1 || \
PGPASSWORD=postgres psql -h localhost -U postgres -c "CREATE DATABASE synapse;"

# 9. Aplicar schema
echo "üöÄ Aplicando schema do banco de dados..."
npx prisma db push --force-reset

# 10. Verificar conex√£o
echo "üîç Testando conex√£o com o banco..."
npx prisma db execute --stdin <<EOF
SELECT 'Conex√£o bem-sucedida!' as status;
EOF

echo ""
echo "‚úÖ Corre√ß√£o conclu√≠da com sucesso!"
echo ""
echo "üìã Pr√≥ximos passos:"
echo "1. Verifique se o .env est√° correto"
echo "2. Execute: python -m uvicorn src.synapse.main:app --reload"
echo "3. Acesse: http://localhost:8000/docs"
echo ""
echo "üîß Se ainda houver problemas, execute:"
echo "   npx prisma studio  # Para verificar o banco"
echo "   docker-compose logs db  # Para logs do PostgreSQL"
