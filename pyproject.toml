[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "synapse-backend"
version = "2.0.0"
description = "Backend para a plataforma SynapScale de integração com LLMs"
authors = [
    {name = "SynapScale Team", email = "team@synapscale.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Framework :: FastAPI",
]
dependencies = [
    # Core Framework
    "fastapi>=0.110.0,<0.115.0",
    "uvicorn[standard]>=0.27.0,<0.30.0",
    "pydantic>=2.6.0,<3.0.0",
    "pydantic-settings>=2.2.0,<3.0.0",
    "gunicorn>=21.2.0,<22.0.0",
    
    # Database
    "sqlalchemy>=2.0.25,<3.0.0",
    "psycopg2-binary>=2.9.9,<3.0.0",
    "asyncpg>=0.30.0",
    "alembic>=1.13.0,<2.0.0",
    
    # Cache & Redis
    "redis>=5.0.1,<6.0.0",
    "aioredis>=2.0.1,<3.0.0",
    
    # Authentication & Security
    "pyjwt>=2.8.0,<3.0.0",
    "python-jose[cryptography]>=3.3.0,<4.0.0",
    "passlib[bcrypt]>=1.7.4,<2.0.0",
    "python-multipart>=0.0.6,<0.1.0",
    "cryptography>=42.0.0,<43.0.0",
    "bcrypt>=4.1.2,<5.0.0",
    
    # HTTP & Requests
    "httpx>=0.26.0,<0.28.0",
    "aiohttp>=3.9.3,<4.0.0",
    "requests>=2.31.0,<3.0.0",
    
    # Data Processing
    "pandas>=2.2.0,<3.0.0",
    "numpy>=1.26.0,<2.0.0",
    "python-dateutil>=2.8.2,<3.0.0",
    
    # Validation & Serialization
    "email-validator>=2.1.0,<3.0.0",
    "python-slugify>=8.0.2,<9.0.0",
    "pydantic-extra-types>=2.5.0,<3.0.0",
    
    # Logging & Monitoring
    "loguru>=0.7.2,<0.8.0",
    "sentry-sdk[fastapi]>=1.40.0,<2.0.0",
    "prometheus-client>=0.19.0,<0.21.0",
    
    # Utilities
    "python-dotenv>=1.0.1,<2.0.0",
    "click>=8.1.7,<9.0.0",
    "rich>=13.7.0,<14.0.0",
    "typer>=0.9.0,<0.13.0",
    
    # Rate Limiting
    "slowapi>=0.1.9,<0.2.0",
    
    # WebSockets
    "websockets>=12.0,<13.0",
    
    # File Upload & Processing
    "python-magic>=0.4.27,<0.5.0",
    "pillow>=10.2.0,<11.0.0",
    "aiofiles>=23.2.1,<24.0.0",
    
    # Templates & Email
    "jinja2>=3.1.3,<4.0.0",
    "aiosmtplib>=3.0.1,<4.0.0",
    
    # Timezone
    "pytz>=2024.1",
    
    # AI Providers
    "openai>=1.12.0,<2.0.0",
    "anthropic>=0.15.0,<1.0.0",
    "google-generativeai>=0.4.0,<1.0.0",
    "groq>=0.4.2,<1.0.0",
    "cohere>=4.47.0,<5.0.0",
    "together>=0.2.7,<1.0.0",
    "replicate>=0.25.0,<1.0.0",
    
    # HuggingFace & ML
    "transformers>=4.38.0,<5.0.0",
    "accelerate>=0.27.0,<1.0.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=8.0.0,<9.0.0",
    "pytest-asyncio>=0.23.5,<0.24.0",
    "pytest-cov>=4.1.0,<5.0.0",
    "pytest-mock>=3.12.0,<4.0.0",
    "factory-boy>=3.3.0,<4.0.0",
    "httpx>=0.26.0,<0.28.0",
    
    # Code Quality
    "black>=24.2.0,<25.0.0",
    "isort>=5.13.2,<6.0.0",
    "mypy>=1.8.0,<2.0.0",
    "flake8>=7.0.0,<8.0.0",
    "pre-commit>=3.6.0,<4.0.0",
]

ai-minimal = [
    # Minimal AI providers for basic functionality
    "openai>=1.12.0,<2.0.0",
    "anthropic>=0.15.0,<1.0.0",
]

ai-full = [
    # All AI providers and ML capabilities
    "openai>=1.12.0,<2.0.0",
    "anthropic>=0.15.0,<1.0.0",
    "google-generativeai>=0.4.0,<1.0.0",
    "groq>=0.4.2,<1.0.0",
    "cohere>=4.47.0,<5.0.0",
    "together>=0.2.7,<1.0.0",
    "replicate>=0.25.0,<1.0.0",
    "transformers>=4.38.0,<5.0.0",
    "accelerate>=0.27.0,<1.0.0",
]

[project.urls]
Homepage = "https://github.com/synapscale/synapse-backend"
Repository = "https://github.com/synapscale/synapse-backend.git"
Documentation = "https://docs.synapscale.com"
"Bug Tracker" = "https://github.com/synapscale/synapse-backend/issues"

[project.scripts]
synapse-dev = "synapse.cli:dev_server"
synapse-prod = "synapse.cli:prod_server"
synapse-migrate = "synapse.cli:migrate_db"

[tool.setuptools.packages.find]
where = ["src"]
include = ["synapse*"]

[tool.setuptools.package-dir]
"" = "src"

[tool.black]
line-length = 88
target-version = ["py311"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["src", "tests"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "uvicorn.*",
    "gunicorn.*",
    "redis.*",
    "anthropic.*",
    "openai.*",
    "groq.*",
    "cohere.*",
    "replicate.*",
    "transformers.*",
    "chromadb.*",
    "pinecone.*",
    "weaviate.*",
    "boto3.*",
    "botocore.*",
    "google.*",
    "azure.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--cov=src/synapse",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src/synapse"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503", "E501"]
max-complexity = 10
exclude = [
    ".git",
    "__pycache__",
    "docs/source/conf.py",
    "old",
    "build",
    "dist",
    ".venv",
    "venv",
    "migrations",
]

[tool.bandit]
exclude_dirs = ["tests", "migrations"]
skips = ["B101", "B601"]

[tool.ruff]
line-length = 88
target-version = "py311"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.isort]
known-first-party = ["synapse"]

[tool.ruff.pyupgrade]
keep-runtime-typing = true
