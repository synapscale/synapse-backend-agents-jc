#!/usr/bin/env python3
"""
Script para executar setup completo da otimiza√ß√£o LLM
Executa migra√ß√µes e popula dados iniciais

Uso: python scripts/run_llm_optimization_setup.py
"""

import sys
import os
import subprocess
from pathlib import Path

# Add src to Python path
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

def run_command(command, description):
    """Executa comando e reporta resultado"""
    print(f"\nüîÑ {description}...")
    try:
        result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
        print(f"‚úÖ {description} - Sucesso!")
        if result.stdout:
            print(f"   Output: {result.stdout.strip()}")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå {description} - Erro!")
        print(f"   Error: {e.stderr}")
        return False

def check_alembic_setup():
    """Verifica se Alembic est√° configurado"""
    print("\nüîç Verificando configura√ß√£o do Alembic...")
    
    if not os.path.exists("alembic.ini"):
        print("‚ùå alembic.ini n√£o encontrado!")
        return False
        
    if not os.path.exists("alembic/versions"):
        print("‚ùå Pasta alembic/versions n√£o encontrada!")
        return False
        
    print("‚úÖ Alembic configurado!")
    return True

def run_migrations():
    """Executa as migra√ß√µes"""
    print("\nüìä Executando migra√ß√µes de otimiza√ß√£o LLM...")
    
    # Lista das migra√ß√µes em ordem
    migrations = [
        "a5f72854",  # Tabelas de otimiza√ß√£o LLM principais
        "b6816ff0",  # Sistema de tagging flex√≠vel
        "c02a345b",  # Corre√ß√£o tipo conversation_id messages
        "d1bd1387",  # Corre√ß√£o tipo workspace_id conversations
    ]
    
    # Executa upgrade geral
    if not run_command("alembic upgrade head", "Upgrade das migra√ß√µes"):
        return False
        
    print("‚úÖ Todas as migra√ß√µes executadas com sucesso!")
    return True

def populate_initial_data():
    """Popula dados iniciais"""
    print("\nüå± Populando dados iniciais...")
    
    # Verifica se o script existe
    populate_script = "scripts/populate_initial_llms.py"
    if not os.path.exists(populate_script):
        print(f"‚ö†Ô∏è  Script {populate_script} n√£o encontrado - pulando popula√ß√£o de dados")
        return True
        
    return run_command(f"python {populate_script}", "Popula√ß√£o de LLMs iniciais")

def verify_tables():
    """Verifica se as tabelas foram criadas"""
    print("\nüîç Verificando tabelas criadas...")
    
    try:
        from synapse.database import engine
        from sqlalchemy import inspect
        
        inspector = inspect(engine)
        tables = inspector.get_table_names(schema='synapscale_db')
        
        required_tables = [
            'llms',
            'llms_conversations_turns', 
            'llms_usage_logs',
            'billing_events',
            'llms_message_feedbacks',
            'tags'
        ]
        
        missing_tables = []
        for table in required_tables:
            if table not in tables:
                missing_tables.append(table)
            else:
                print(f"   ‚úÖ {table}")
                
        if missing_tables:
            print(f"‚ùå Tabelas faltando: {missing_tables}")
            return False
            
        print("‚úÖ Todas as tabelas de otimiza√ß√£o LLM criadas!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao verificar tabelas: {e}")
        return False

def create_sample_data():
    """Cria dados de exemplo para teste"""
    print("\nüß™ Criando dados de exemplo...")
    
    try:
        from synapse.database import get_db_session
        from synapse.models import LLM, Tag
        
        with get_db_session() as db:
            # Verifica se j√° existem LLMs
            llm_count = db.query(LLM).count()
            print(f"   LLMs cadastrados: {llm_count}")
            
            # Cria algumas tags de exemplo
            sample_tags = [
                {
                    "target_type": "system",
                    "target_id": "00000000-0000-0000-0000-000000000000",
                    "tag_name": "system_status",
                    "tag_value": "initialized",
                    "is_system_tag": True,
                },
                {
                    "target_type": "system", 
                    "target_id": "00000000-0000-0000-0000-000000000000",
                    "tag_name": "optimization_version",
                    "tag_value": "v1.0",
                    "is_system_tag": True,
                }
            ]
            
            for tag_data in sample_tags:
                # Verifica se a tag j√° existe
                existing = db.query(Tag).filter_by(
                    target_type=tag_data["target_type"],
                    tag_name=tag_data["tag_name"]
                ).first()
                
                if not existing:
                    tag = Tag(**tag_data)
                    db.add(tag)
                    
            db.commit()
            print("‚úÖ Dados de exemplo criados!")
            return True
            
    except Exception as e:
        print(f"‚ùå Erro ao criar dados de exemplo: {e}")
        return False

def main():
    """Fun√ß√£o principal"""
    print("üöÄ SynapScale - Setup de Otimiza√ß√£o LLM")
    print("=" * 50)
    
    # Verifica se estamos no diret√≥rio correto
    if not os.path.exists("src/synapse"):
        print("‚ùå Execute este script na raiz do projeto SynapScale!")
        sys.exit(1)
    
    # Passos do setup
    steps = [
        ("Verifica√ß√£o do Alembic", check_alembic_setup),
        ("Execu√ß√£o das migra√ß√µes", run_migrations),
        ("Popula√ß√£o de dados iniciais", populate_initial_data),
        ("Verifica√ß√£o das tabelas", verify_tables),
        ("Cria√ß√£o de dados de exemplo", create_sample_data),
    ]
    
    success_count = 0
    for step_name, step_func in steps:
        if step_func():
            success_count += 1
        else:
            print(f"\n‚ùå Falha na etapa: {step_name}")
            print("   Corrija os erros antes de continuar.")
            break
    
    # Resumo
    print(f"\nüìä Resumo do Setup")
    print("=" * 50)
    print(f"Etapas conclu√≠das: {success_count}/{len(steps)}")
    
    if success_count == len(steps):
        print("üéâ Setup de otimiza√ß√£o LLM conclu√≠do com sucesso!")
        print("\nüìù Pr√≥ximos passos:")
        print("   1. Revisar dados criados no banco")
        print("   2. Testar integra√ß√£o com LLM Service")
        print("   3. Implementar endpoints de analytics")
        print("   4. Configurar billing autom√°tico")
    else:
        print("‚ö†Ô∏è  Setup incompleto. Verifique os erros acima.")
        
    return success_count == len(steps)

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 