# PRD - CORRE√á√ÉO CR√çTICA ESTRUTURA SAAS SYNAPSCALE

## üìã RESUMO EXECUTIVO

**Projeto:** Corre√ß√£o cr√≠tica da estrutura SaaS SynapScale  
**Baseado em:** An√°lise emp√≠rica consolidada do banco PostgreSQL `synapscale_db`  
**Cronograma:** 14 dias (3 fases: Emergencial ‚Üí Estrutural ‚Üí Otimiza√ß√£o)  
**Objetivo:** Corrigir problemas cr√≠ticos que impedem uso em produ√ß√£o e causam perda de receita  

## üö® PROBLEMAS CR√çTICOS IDENTIFICADOS

### 1. DUAL TRUTH PROBLEM - JSON vs RELACIONAL (CR√çTICO)
**Gravidade:** CR√çTICA  
**Impacto:** Sistema n√£o sabe qual fonte usar ‚Üí comportamento indefinido  
**Problema:** Features mantidas em dois locais conflitantes:
- `plans.features` (JSON) ‚Üí Mostra TODAS features para FREE
- `plan_features` (relacional) ‚Üí Mostra apenas 2 features para FREE

### 2. PLANOS PREMIUM DESCONFIGURADOS (CR√çTICO) 
**Gravidade:** CR√çTICA  
**Impacto:** Imposs√≠vel monetizar adequadamente  
**Problema:** BASIC, PRO, ENTERPRISE com `features: NULL` e `restrictions: NULL`

### 3. WORKSPACE LIMITS DESSINCONIZADOS (CR√çTICO)
**Gravidade:** CR√çTICA  
**Impacto:** Usu√°rios FREE usando recursos premium sem pagar  
**Problema:** Workspaces n√£o respeitam limites do plano do tenant

### 4. TENANT SETTINGS GEN√âRICOS (M√âDIA)
**Gravidade:** M√âDIA  
**Impacto:** Tenants n√£o diferenciados por plano  
**Problema:** Todos tenants com configura√ß√µes id√™nticas

### 5. PROBLEMAS ESTRUTURAIS (M√âDIA)
**Gravidade:** M√âDIA  
**Impacto:** Inconsist√™ncia e manutenibilidade  
**Problemas:** FK inconsistentes, constraints duplicadas, timestamps mistos

## üí∞ IMPACTO COMERCIAL

### RECEITA PERDIDA ATUAL
- Usu√°rios FREE acessando features premium ($79.90-$199.90/m√™s perdidos)
- SSO, White Label, Priority Support gratuitos
- Workspaces com limites superiores ao plano
- Impossibilidade de monetiza√ß√£o adequada

### RISCOS LEGAIS
- Auditoria de receita (discrep√¢ncias billing vs features)
- Compliance SaaS (viola√ß√£o contratos planos pagos)
- Customer Trust (clientes pagos descobrindo features gratuitas)

## üìÖ CRONOGRAMA DE IMPLEMENTA√á√ÉO (14 DIAS)

### üö® FASE 1: EMERGENCIAL (1-2 DIAS)
**Objetivo:** Parar hemorragia de receita

**DIA 1: Corre√ß√µes Urgentes**
1. Corrigir features do plano FREE (remover premium features)
2. Configurar features b√°sicas para BASIC/PRO/ENTERPRISE
3. Implementar feature gates emergenciais na aplica√ß√£o
4. Auditoria de tenants ativos afetados

**DIA 2: Sincroniza√ß√£o B√°sica**
1. Corrigir limites de workspaces desalinhados
2. Implementar valida√ß√£o simples tenant ‚Üí plan ‚Üí workspace
3. Comunica√ß√£o com clientes afetados (se necess√°rio)

### ‚öôÔ∏è FASE 2: ESTRUTURAL (3-7 DIAS)
**Objetivo:** Corrigir problemas estruturais e implementar automa√ß√µes

**DIAS 3-4: Database Structure**
1. Implementar constraints NOT NULL em tenant_id
2. Padronizar FK actions (ON DELETE/UPDATE)
3. Remover constraints duplicadas
4. Padronizar tipos de timestamp

**DIAS 5-6: Automa√ß√£o**
1. Criar triggers de sincroniza√ß√£o tenant ‚Üî plan
2. Implementar valida√ß√µes de limites autom√°ticas
3. Fun√ß√£o de auditoria de consist√™ncia
4. Testes de integridade completos

**DIA 7: Valida√ß√£o**
1. Executar bateria de testes completa
2. Verificar sincroniza√ß√£o de todos os tenants
3. Auditoria final de consist√™ncia

### üîß FASE 3: OTIMIZA√á√ÉO (8-14 DIAS)
**Objetivo:** Monitoramento e performance

**SEMANA 2: Monitoramento e Alertas**
1. Implementar logs de feature usage por plano
2. Dashboards de billing vs usage
3. Alertas de inconsist√™ncias autom√°ticas
4. Sistema de auditoria cont√≠nua
5. Performance tuning dos queries cr√≠ticos

## üéØ REQUISITOS FUNCIONAIS

### RF01: Corre√ß√£o Sistema de Features
- Sistema deve usar APENAS fonte relacional (`plan_features`)
- Deprecar e remover JSON de features em `plans.features`
- Implementar feature gates baseados em `plan_features`

### RF02: Configura√ß√£o Planos Premium
- BASIC: API access, webhooks, analytics (5 features)
- PRO: + Custom branding, team collaboration (8 features)
- ENTERPRISE: + SSO, white label, priority support (12 features)

### RF03: Sincroniza√ß√£o Tenant-Plan-Workspace
- Workspaces devem herdar limites do plano do tenant
- Valida√ß√£o autom√°tica de limites na cria√ß√£o/atualiza√ß√£o
- Triggers para sincroniza√ß√£o autom√°tica

### RF04: Auditoria e Monitoramento
- Logs de feature usage por tenant/plano
- Alertas de inconsist√™ncias autom√°ticas
- Dashboard de billing vs usage real

## üéØ REQUISITOS N√ÉO-FUNCIONAIS

### RNF01: Performance
- Queries de feature verification < 100ms
- Triggers de sincroniza√ß√£o < 50ms
- Dashboard de monitoramento < 2s load time

### RNF02: Integridade
- 0 registros √≥rf√£os ou refer√™ncias quebradas
- 100% correspond√™ncia billing vs features
- Valida√ß√£o de constraints em tempo real

### RNF03: Monitoramento
- 100% dos tenants com monitoramento ativo
- Alertas em tempo real para inconsist√™ncias
- Auditoria completa de todas as opera√ß√µes

## üìä CRIT√âRIOS DE SUCESSO

### ‚úÖ Indicadores de Corre√ß√£o Bem-Sucedida
- **Feature Consistency:** 100% dos planos com features corretas
- **Tenant-Plan Sync:** 0 workspaces com limites superiores ao plano
- **Billing Accuracy:** 100% correspond√™ncia billing vs features
- **Data Integrity:** 0 registros √≥rf√£os ou refer√™ncias quebradas
- **Performance:** Queries < 100ms
- **Monitoring:** 100% cobertura de monitoramento

### üìà KPIs de Monitoramento
- Inconsist√™ncias de features: 0
- Workspaces over-limit: 0  
- Features premium em FREE: 0
- Revenue leakage: $0
- System uptime: >99.9%

## üõ†Ô∏è TECNOLOGIAS E FERRAMENTAS

### Backend
- **Database:** PostgreSQL (schema `synapscale_db`)
- **ORM:** SQLAlchemy/Alembic para migrations
- **API:** FastAPI endpoints para feature verification
- **Monitoring:** Prometheus + Grafana para dashboards

### Valida√ß√£o e Testes
- **Unit Tests:** pytest para fun√ß√µes cr√≠ticas
- **Integration Tests:** API endpoints de billing/features
- **Database Tests:** Triggers e constraints
- **Performance Tests:** Load testing com locust

## üöÄ ENTREG√ÅVEIS

### FASE 1 (1-2 dias)
- [ ] Script SQL de corre√ß√£o de features FREE
- [ ] Script SQL de configura√ß√£o BASIC/PRO/ENTERPRISE
- [ ] Feature gates emergenciais na API
- [ ] Relat√≥rio de auditoria de tenants

### FASE 2 (3-7 dias)  
- [ ] Migrations de constraints NOT NULL
- [ ] Migrations de padroniza√ß√£o FK
- [ ] Triggers de sincroniza√ß√£o autom√°tica
- [ ] Fun√ß√µes de valida√ß√£o de limites
- [ ] Suite de testes de integridade

### FASE 3 (8-14 dias)
- [ ] Sistema de logs de feature usage
- [ ] Dashboard de billing vs usage
- [ ] Alertas autom√°ticos de inconsist√™ncias
- [ ] Documenta√ß√£o completa do sistema
- [ ] Performance benchmarks

## ‚ö†Ô∏è RISCOS E MITIGA√á√ïES

### Risco 1: Downtime durante corre√ß√µes
**Mitiga√ß√£o:** Aplicar corre√ß√µes em hor√°rio de menor uso, com rollback preparado

### Risco 2: Clientes afetados por mudan√ßas
**Mitiga√ß√£o:** Comunica√ß√£o pr√©via, per√≠odo de ajuste, suporte dedicado

### Risco 3: Performance degradada
**Mitiga√ß√£o:** Testes de carga, otimiza√ß√£o de queries, monitoring ativo

## üìû STAKEHOLDERS

### Respons√°veis T√©cnicos
- **Dev Team:** Implementa√ß√£o das corre√ß√µes
- **DBA:** Valida√ß√£o de scripts SQL e performance
- **DevOps:** Deploy e monitoring
- **QA:** Testes de integridade e valida√ß√£o

### Respons√°veis de Neg√≥cio
- **Product:** Valida√ß√£o de features por plano
- **Finance:** Valida√ß√£o de billing accuracy  
- **Customer Success:** Comunica√ß√£o com clientes
- **Legal:** Compliance e contratos

## üéØ DEFINI√á√ÉO DE PRONTO

Uma tarefa est√° PRONTA quando:
- [ ] C√≥digo implementado e revisado
- [ ] Testes passando (unit + integration)
- [ ] Migrations testadas em staging
- [ ] Performance validada (< 100ms)
- [ ] Documenta√ß√£o atualizada
- [ ] Monitoring implementado
- [ ] Deploy realizado com sucesso
- [ ] Valida√ß√£o em produ√ß√£o confirmada

---

**üìã Este PRD representa a fonte √∫nica da verdade para corre√ß√£o dos problemas cr√≠ticos identificados na an√°lise emp√≠rica do banco de dados SynapScale.**
