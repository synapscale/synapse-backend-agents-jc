#!/bin/bash
# Script para reorganiza√ß√£o e limpeza completa do reposit√≥rio SynapScale Backend
# Data: 12/06/2025

# Cores para melhor visualiza√ß√£o
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BOLD='\033[1m'
NC='\033[0m'

echo -e "${BLUE}===============================================${NC}"
echo -e "${GREEN}${BOLD}üîÑ REORGANIZA√á√ÉO DO REPOSIT√ìRIO SYNAPSCALE${NC}"
echo -e "${BLUE}===============================================${NC}"
echo -e "Data de execu√ß√£o: $(date)"
echo ""

# Fun√ß√£o para confirma√ß√£o
confirm() {
    read -p "‚ùì $1 (s/n): " response
    case "$response" in
        [sS]) 
            return 0
            ;;
        *)
            return 1
            ;;
    esac
}

# Fun√ß√£o para criar backup antes de iniciar
create_backup() {
    echo -e "${YELLOW}üì¶ Criando backup do reposit√≥rio antes das altera√ß√µes...${NC}"
    backup_dir="../synapscale_backup_$(date +%Y%m%d_%H%M%S)"
    mkdir -p "$backup_dir"
    
    # Exclus√µes para o backup
    rsync -av --exclude ".git" --exclude "venv*" --exclude "__pycache__" \
          --exclude "*.pyc" --exclude "node_modules" --exclude ".pytest_cache" \
          ./ "$backup_dir"
    
    echo -e "${GREEN}‚úÖ Backup criado em: $backup_dir${NC}"
    echo ""
}

# 1. LIMPEZA DE SCRIPTS DUPLICADOS/OBSOLETOS
cleanup_scripts() {
    echo -e "${YELLOW}${BOLD}üßπ FASE 1: LIMPEZA DE SCRIPTS OBSOLETOS${NC}"
    echo -e "${BLUE}-----------------------------------------------${NC}"
    
    # Lista de scripts redundantes a serem removidos
    scripts_to_remove=(
        "clean_repo.sh"             # Ser√° substitu√≠do por este script
        "finalize_reorganization.sh" # Ser√° consolidado aqui
        "verify_organization.sh"
        "reorganize.sh"
        "auto_setup.sh"
        "show_summary.sh"
    )
    
    for script in "${scripts_to_remove[@]}"; do
        if [ -f "$script" ]; then
            echo -e "${RED}üóëÔ∏è Removendo script obsoleto:${NC} $script"
            rm -f "$script"
        fi
    done
    
    echo -e "${GREEN}‚úÖ Limpeza de scripts conclu√≠da${NC}"
    echo ""
}

# 2. LIMPEZA DE DOCUMENTA√á√ÉO REDUNDANTE
cleanup_docs() {
    echo -e "${YELLOW}${BOLD}üìö FASE 2: LIMPEZA DE DOCUMENTA√á√ÉO REDUNDANTE${NC}"
    echo -e "${BLUE}-----------------------------------------------${NC}"
    
    # Lista de documentos redundantes ou desatualizados
    docs_to_remove=(
        "docs/FINAL_VALIDATION.md"
        "docs/ENV_SETUP_COMPLETE.md"
        "docs/GUIA_CONFIGURACAO_ENV.md"
        "docs/GUIA_MASCARAMENTO_ENV.md"
        "docs/MASCARAMENTO_DESATIVADO.md"
        "docs/PROGRESSO_OTIMIZACAO.md"
        "docs/CORRE√á√ïES_E_USO_BACKEND.md"
        "docs/üéâ SynapScale Backend - RELAT√ìRIO FINAL 100% COMPLETO.md"
        "docs/GUIA-PRODUCAO-COMPLETO.md"
        "docs/GUIA_COMPLETO_SYNAPSCALE.md"
    )
    
    for doc in "${docs_to_remove[@]}"; do
        if [ -f "$doc" ]; then
            echo -e "${RED}üóëÔ∏è Removendo documenta√ß√£o redundante:${NC} $doc"
            rm -f "$doc"
        fi
    done
    
    echo -e "${GREEN}‚úÖ Limpeza de documenta√ß√£o conclu√≠da${NC}"
    echo ""
}

# 3. CONSOLIDA√á√ÉO DA DOCUMENTA√á√ÉO ESSENCIAL
consolidate_docs() {
    echo -e "${YELLOW}${BOLD}üìù FASE 3: CONSOLIDA√á√ÉO DA DOCUMENTA√á√ÉO ESSENCIAL${NC}"
    echo -e "${BLUE}-----------------------------------------------${NC}"
    
    # Garantir que diret√≥rios principais de documenta√ß√£o existam
    mkdir -p docs/api
    mkdir -p docs/guides
    mkdir -p docs/architecture
    
    # Documentos a serem movidos para locais apropriados
    if [ -f "docs/development_guide.md" ] && [ ! -f "docs/guides/development.md" ]; then
        echo -e "${BLUE}üìã Movendo:${NC} docs/development_guide.md ‚Üí docs/guides/development.md"
        mv "docs/development_guide.md" "docs/guides/development.md"
    fi
    
    if [ -f "docs/architecture.md" ] && [ ! -f "docs/architecture/overview.md" ]; then
        echo -e "${BLUE}üìã Movendo:${NC} docs/architecture.md ‚Üí docs/architecture/overview.md"
        mv "docs/architecture.md" "docs/architecture/overview.md"
    fi
    
    if [ -f "docs/guia_rapido_api.md" ] && [ ! -f "docs/api/quick_guide.md" ]; then
        echo -e "${BLUE}üìã Movendo:${NC} docs/guia_rapido_api.md ‚Üí docs/api/quick_guide.md"
        mv "docs/guia_rapido_api.md" "docs/api/quick_guide.md"
    fi
    
    echo -e "${GREEN}‚úÖ Consolida√ß√£o de documenta√ß√£o conclu√≠da${NC}"
    echo ""
}

# 4. REORGANIZAR ESTRUTURA DE ARQUIVOS
reorganize_files() {
    echo -e "${YELLOW}${BOLD}üìÅ FASE 4: REORGANIZA√á√ÉO DE ESTRUTURA${NC}"
    echo -e "${BLUE}-----------------------------------------------${NC}"
    
    # Garantir que todas as pastas principais existam
    main_dirs=("config" "src" "tests" "tools" "scripts" "docs" "alembic" "deployment")
    for dir in "${main_dirs[@]}"; do
        if [ ! -d "$dir" ]; then
            echo -e "${BLUE}üìÅ Criando diret√≥rio:${NC} $dir"
            mkdir -p "$dir"
        fi
    done
    
    # Mover arquivos de configura√ß√£o espalhados
    if [ -f "pyproject.toml" ] && [ ! -f "config/pyproject.toml" ]; then
        echo -e "${BLUE}üîß Movendo:${NC} pyproject.toml ‚Üí config/pyproject.toml"
        mv "pyproject.toml" "config/pyproject.toml"
    fi
    
    # Reorganizar scripts espalhados
    script_files=$(find . -maxdepth 1 -name "*.sh" ! -name "setup.sh" ! -name "dev.sh" ! -name "prod.sh")
    for script in $script_files; do
        script_name=$(basename "$script")
        if [ ! -f "scripts/$script_name" ]; then
            echo -e "${BLUE}üîß Movendo:${NC} $script_name ‚Üí scripts/$script_name"
            mv "$script" "scripts/$script_name"
        fi
    done
    
    echo -e "${GREEN}‚úÖ Reorganiza√ß√£o de estrutura conclu√≠da${NC}"
    echo ""
}

# 5. ATUALIZAR README COM A NOVA ESTRUTURA
update_readme() {
    echo -e "${YELLOW}${BOLD}üìù FASE 5: ATUALIZANDO README.md${NC}"
    echo -e "${BLUE}-----------------------------------------------${NC}"
    
    # Gerar estrutura atual do projeto
    echo -e "${BLUE}üìä Gerando estrutura de diret√≥rios atual...${NC}"
    tree -L 2 -I 'venv*|__pycache__|.git|.pytest_cache|*.egg-info' > /tmp/project_structure.txt
    
    echo -e "${GREEN}‚úÖ README.md ser√° atualizado manualmente ap√≥s revis√£o${NC}"
    echo ""
}

# 6. FINALIZA√á√ÉO E VERIFICA√á√ÉO
verify_organization() {
    echo -e "${YELLOW}${BOLD}üîç FASE 6: VERIFICA√á√ÉO FINAL${NC}"
    echo -e "${BLUE}-----------------------------------------------${NC}"
    
    # Verificar pastas principais
    main_dirs=("src" "config" "tests" "docs" "scripts")
    all_ok=true
    
    for dir in "${main_dirs[@]}"; do
        if [ -d "$dir" ]; then
            echo -e "${GREEN}‚úì Diret√≥rio ${dir}/ existe${NC}"
        else
            echo -e "${RED}‚úó Diret√≥rio ${dir}/ est√° faltando${NC}"
            all_ok=false
        fi
    done
    
    # Verificar scripts essenciais
    essential_files=("setup.sh" "dev.sh" "prod.sh")
    for file in "${essential_files[@]}"; do
        if [ -f "$file" ]; then
            echo -e "${GREEN}‚úì Arquivo ${file} existe${NC}"
        else
            echo -e "${RED}‚úó Arquivo essencial ${file} est√° faltando${NC}"
            all_ok=false
        fi
    done
    
    if [ "$all_ok" = true ]; then
        echo -e "\n${GREEN}${BOLD}‚úÖ VERIFICA√á√ÉO FINAL: SUCESSO${NC}"
        echo -e "${GREEN}O reposit√≥rio foi reorganizado com sucesso!${NC}"
    else
        echo -e "\n${YELLOW}${BOLD}‚ö†Ô∏è VERIFICA√á√ÉO FINAL: ATEN√á√ÉO${NC}"
        echo -e "${YELLOW}A reorganiza√ß√£o foi conclu√≠da, mas alguns itens essenciais est√£o faltando.${NC}"
        echo -e "${YELLOW}Verifique os itens marcados acima e corrija conforme necess√°rio.${NC}"
    fi
}

# Exibir instru√ß√µes ap√≥s reorganiza√ß√£o
show_next_steps() {
    echo -e "\n${BLUE}===============================================${NC}"
    echo -e "${GREEN}${BOLD}üöÄ PR√ìXIMOS PASSOS${NC}"
    echo -e "${BLUE}===============================================${NC}"
    echo -e ""
    echo -e "${YELLOW}1. Revise a lista de documentos e scripts removidos${NC}"
    echo -e "${YELLOW}2. Confira a estrutura de diret√≥rios atualizada${NC}"
    echo -e "${YELLOW}3. Atualize o README.md com a nova estrutura, se necess√°rio${NC}"
    echo -e "${YELLOW}4. Execute os testes para garantir que tudo continua funcionando:${NC}"
    echo -e "   ${BLUE}$ ./scripts/run_tests.sh${NC}"
    echo -e ""
    echo -e "${GREEN}Para iniciar o servidor:${NC}"
    echo -e "  ${BLUE}$ ./dev.sh${NC}  ${GREEN}# Ambiente de desenvolvimento${NC}"
    echo -e "  ${BLUE}$ ./prod.sh${NC} ${GREEN}# Ambiente de produ√ß√£o${NC}"
    echo -e ""
}

# EXECU√á√ÉO PRINCIPAL
main() {
    # Mostrar plano de execu√ß√£o
    echo -e "${YELLOW}Este script executar√° as seguintes a√ß√µes:${NC}"
    echo -e "  ${BLUE}1. Criar backup do reposit√≥rio${NC}"
    echo -e "  ${BLUE}2. Remover scripts obsoletos e duplicados${NC}"
    echo -e "  ${BLUE}3. Limpar documenta√ß√£o redundante ou desatualizada${NC}"
    echo -e "  ${BLUE}4. Consolidar e organizar documenta√ß√£o essencial${NC}"
    echo -e "  ${BLUE}5. Reorganizar estrutura de arquivos${NC}"
    echo -e "  ${BLUE}6. Verificar estrutura final${NC}"
    echo ""
    
    if confirm "Deseja continuar com a reorganiza√ß√£o?"; then
        create_backup
        cleanup_scripts
        cleanup_docs
        consolidate_docs
        reorganize_files
        update_readme
        verify_organization
        show_next_steps
    else
        echo -e "${YELLOW}‚ö†Ô∏è Reorganiza√ß√£o cancelada pelo usu√°rio${NC}"
    fi
}

# Iniciar execu√ß√£o
main
