#!/bin/bash

# ==============================================================================
# SCRIPT DE DETEC√á√ÉO E LIMPEZA DE CREDENCIAIS EXPOSTAS
# SynapScale Backend Security Scanner
# ==============================================================================

set -e

echo "üîç INICIANDO VERIFICA√á√ÉO DE SEGURAN√áA..."
echo "========================================"

# Cores para output
RED='\033[0;31m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Contadores
CRITICAL_ISSUES=0
WARNING_ISSUES=0
INFO_ISSUES=0

# Fun√ß√£o para log
log_critical() {
    echo -e "${RED}üö® CR√çTICO: $1${NC}"
    ((CRITICAL_ISSUES++))
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  ATEN√á√ÉO: $1${NC}"
    ((WARNING_ISSUES++))
}

log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  INFO: $1${NC}"
    ((INFO_ISSUES++))
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

# ==============================================================================
# VERIFICA√á√ïES DE SEGURAN√áA
# ==============================================================================

echo -e "\n${BLUE}üìã Verificando chaves hardcoded...${NC}"

# 1. Verificar chaves de API expostas
echo "üîë Procurando por chaves de API..."
if grep -r -n --include="*.py" --include="*.js" --include="*.ts" --include="*.json" --include="*.yml" --include="*.yaml" \
   -E "(sk-[a-zA-Z0-9_-]{20,}|xoxb-[a-zA-Z0-9_-]+|ghp_[a-zA-Z0-9_-]+|AIza[a-zA-Z0-9_-]+)" . 2>/dev/null; then
    log_critical "Chaves de API reais encontradas no c√≥digo!"
else
    log_success "Nenhuma chave de API real encontrada"
fi

# 2. Verificar senhas hardcoded
echo "üîê Procurando por senhas hardcoded..."
HARDCODED_PASSWORDS=$(grep -r -n --include="*.py" --include="*.js" --include="*.ts" --include="*.json" --include="*.yml" --include="*.yaml" \
   -E "password.*=.*['\"][^'\"]{8,}['\"]" . 2>/dev/null | \
   grep -v "test\|demo\|example\|password_here\|your_password\|senha_forte\|config.get\|context.get" || true)

if [ ! -z "$HARDCODED_PASSWORDS" ]; then
    log_critical "Poss√≠veis senhas hardcoded encontradas:"
    echo "$HARDCODED_PASSWORDS"
else
    log_success "Nenhuma senha hardcoded suspeita encontrada"
fi

# 3. Verificar tokens JWT hardcoded
echo "üé´ Procurando por tokens JWT..."
if grep -r -n --include="*.py" --include="*.js" --include="*.ts" \
   -E "eyJ[a-zA-Z0-9_-]*\.[a-zA-Z0-9_-]*\.[a-zA-Z0-9_-]*" . 2>/dev/null; then
    log_critical "Poss√≠veis tokens JWT encontrados no c√≥digo!"
else
    log_success "Nenhum token JWT encontrado"
fi

# 4. Verificar chaves secretas padr√£o
echo "üóùÔ∏è  Verificando chaves secretas padr√£o..."
SECRET_PATTERNS="your-secret-key\|change-in-production\|demo-key\|test-key\|development-key"
if grep -r -n --include="*.py" --include="*.js" --include="*.ts" --include="*.json" \
   "$SECRET_PATTERNS" . 2>/dev/null | grep -v "# \|#\|errors.append\|description=" | head -5; then
    log_critical "Chaves secretas padr√£o encontradas - DEVEM ser alteradas!"
else
    log_success "Nenhuma chave secreta padr√£o encontrada"
fi

# 5. Verificar URLs de banco com credenciais
echo "üóÑÔ∏è  Verificando URLs de banco com credenciais..."
if grep -r -n --include="*.py" --include="*.js" --include="*.ts" --include="*.json" --include="*.yml" \
   -E "://[^:]+:[^@]+@" . 2>/dev/null | grep -v "username:password\|user:pass\|example" | head -5; then
    log_warning "URLs de banco com credenciais encontradas"
else
    log_success "Nenhuma URL de banco com credenciais exposta"
fi

# ==============================================================================
# VERIFICAR ARQUIVOS SENS√çVEIS
# ==============================================================================

echo -e "\n${BLUE}üìÅ Verificando arquivos sens√≠veis...${NC}"

# Verificar se .env existe e n√£o est√° no git
if [ -f ".env" ]; then
    if git check-ignore .env >/dev/null 2>&1; then
        log_success "Arquivo .env existe e est√° no .gitignore"
    else
        log_critical "Arquivo .env existe mas N√ÉO est√° no .gitignore!"
    fi
else
    log_info "Arquivo .env n√£o encontrado - use .env.example como base"
fi

# Verificar .env.example
if [ -f ".env.example" ]; then
    log_success "Arquivo .env.example encontrado"
    # Verificar se n√£o tem credenciais reais
    if grep -E "(sk-[a-zA-Z0-9_-]{20,}|[a-zA-Z0-9_-]{32,})" .env.example >/dev/null 2>&1; then
        log_warning ".env.example pode conter credenciais reais"
    fi
else
    log_warning "Arquivo .env.example n√£o encontrado"
fi

# Verificar chaves privadas
echo "üîë Procurando por chaves privadas..."
if find . -name "*.pem" -o -name "*.key" -o -name "*_rsa" -o -name "id_rsa" 2>/dev/null | grep -v ".git" | head -5; then
    log_warning "Arquivos de chave privada encontrados"
else
    log_success "Nenhuma chave privada encontrada"
fi

# ==============================================================================
# VERIFICAR CONFIGURA√á√ïES
# ==============================================================================

echo -e "\n${BLUE}‚öôÔ∏è  Verificando configura√ß√µes...${NC}"

# Verificar se h√° valida√ß√£o de seguran√ßa no c√≥digo
if grep -r "validate_settings\|security.*check" src/ >/dev/null 2>&1; then
    log_success "Valida√ß√µes de seguran√ßa encontradas no c√≥digo"
else
    log_warning "Considere adicionar valida√ß√µes de seguran√ßa"
fi

# Verificar HTTPS em produ√ß√£o
if grep -r "ENABLE_HTTPS\|SECURE_COOKIES" src/ >/dev/null 2>&1; then
    log_success "Configura√ß√µes HTTPS encontradas"
else
    log_info "Considere configurar HTTPS para produ√ß√£o"
fi

# ==============================================================================
# RELAT√ìRIO FINAL
# ==============================================================================

echo -e "\n${BLUE}üìä RELAT√ìRIO DE SEGURAN√áA${NC}"
echo "=========================="
echo -e "üö® Problemas Cr√≠ticos: ${RED}$CRITICAL_ISSUES${NC}"
echo -e "‚ö†Ô∏è  Avisos: ${YELLOW}$WARNING_ISSUES${NC}"
echo -e "‚ÑπÔ∏è  Informa√ß√µes: $INFO_ISSUES"

if [ $CRITICAL_ISSUES -gt 0 ]; then
    echo -e "\n${RED}‚ùå A√á√ÉO NECESS√ÅRIA: Corrija os problemas cr√≠ticos antes de fazer deploy!${NC}"
    exit 1
elif [ $WARNING_ISSUES -gt 0 ]; then
    echo -e "\n${YELLOW}‚ö†Ô∏è  ATEN√á√ÉO: Revise os avisos para melhorar a seguran√ßa${NC}"
    exit 2
else
    echo -e "\n${GREEN}‚úÖ TUDO OK: Nenhum problema cr√≠tico encontrado!${NC}"
    exit 0
fi
