#!/bin/bash
# üöÄ Setup de Automa√ß√£o - Configura√ß√£o completa do sistema

set -e  # Parar em caso de erro

echo "üöÄ SETUP DE AUTOMA√á√ÉO - Sistema de Manuten√ß√£o SynapScale"
echo "============================================================"

# Cores
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

log() {
    echo -e "${CYAN}[$(date +'%H:%M:%S')] $1${NC}"
}

success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

warning() {
    echo -e "${YELLOW}‚ö†Ô∏è $1${NC}"
}

error() {
    echo -e "${RED}‚ùå $1${NC}"
    exit 1
}

# Verificar se estamos na raiz do projeto
if [ ! -f "pyproject.toml" ] && [ ! -f "requirements.txt" ]; then
    error "Execute este script na raiz do projeto SynapScale"
fi

log "Verificando estrutura do projeto..."

# Criar diret√≥rios necess√°rios
mkdir -p docs/database
mkdir -p reports/maintenance
mkdir -p logs
mkdir -p scripts/automation

success "Diret√≥rios criados"

# Verificar se .env existe
if [ ! -f ".env" ]; then
    warning "Arquivo .env n√£o encontrado - criando template"
    
    cat > .env << EOF
# === CONFIGURA√á√ÉO PRINCIPAL DO BANCO ===
DATABASE_URL=postgresql+asyncpg://user:password@host:port/database_name

# === CONFIGURA√á√ïES DETALHADAS ===
DB_HOST=localhost
DB_PORT=5432
DB_NAME=synapscale
DB_USER=postgres
DB_PASSWORD=password
DB_SSLMODE=require

# === CONFIGURA√á√ïES DO SISTEMA ===
DATABASE_SCHEMA=synapscale_db

# === API CONFIGURA√á√ÉO ===
API_BASE_URL=http://localhost:8000

# === CONFIGURA√á√ïES DE USU√ÅRIOS ===
ADMIN_EMAIL=admin@synapscale.com
ADMIN_PASSWORD=SynapScale2024!
DEFAULT_USER_PASSWORD=DefaultPassword123!
EOF
    
    warning "Configure as vari√°veis no arquivo .env antes de continuar"
fi

# Verificar depend√™ncias Python
log "Verificando depend√™ncias Python..."

if ! command -v python3 &> /dev/null; then
    error "Python 3 n√£o encontrado"
fi

if ! python3 -c "import psycopg2" 2>/dev/null; then
    warning "psycopg2 n√£o encontrado - instalando..."
    pip install psycopg2-binary
fi

if ! python3 -c "import requests" 2>/dev/null; then
    warning "requests n√£o encontrado - instalando..."
    pip install requests
fi

success "Depend√™ncias Python OK"

# Tornar scripts execut√°veis
log "Configurando permiss√µes dos scripts..."

chmod +x tools/database/*.py
chmod +x tools/database/setup_automation.sh

success "Permiss√µes configuradas"

# Criar script de execu√ß√£o di√°ria
log "Criando script de automa√ß√£o di√°ria..."

cat > scripts/automation/daily_maintenance.sh << 'EOF'
#!/bin/bash
# ü§ñ Manuten√ß√£o Di√°ria Automatizada

cd "$(dirname "$0")/../.."

echo "ü§ñ Executando manuten√ß√£o di√°ria automatizada..."
echo "Iniciado em: $(date)"

# Executar manuten√ß√£o completa
python tools/database/maintenance_automation.py

# Verificar se h√° problemas cr√≠ticos
EXIT_CODE=$?

if [ $EXIT_CODE -eq 1 ]; then
    echo "üö® PROBLEMAS CR√çTICOS DETECTADOS!"
    echo "Consulte os relat√≥rios em reports/maintenance/"
    
    # Aqui voc√™ pode adicionar notifica√ß√µes (email, Slack, etc.)
    # curl -X POST -H 'Content-type: application/json' \
    #   --data '{"text":"üö® SynapScale: Problemas cr√≠ticos detectados na manuten√ß√£o autom√°tica!"}' \
    #   YOUR_SLACK_WEBHOOK_URL
    
elif [ $EXIT_CODE -eq 2 ]; then
    echo "‚ö†Ô∏è Avisos detectados - verifica√ß√£o recomendada"
else
    echo "‚úÖ Sistema funcionando perfeitamente!"
fi

echo "Conclu√≠do em: $(date)"
EOF

chmod +x scripts/automation/daily_maintenance.sh

success "Script de automa√ß√£o di√°ria criado"

# Criar comando r√°pido
log "Criando comando r√°pido de manuten√ß√£o..."

cat > quick_maintenance.sh << 'EOF'
#!/bin/bash
# üöÄ Manuten√ß√£o R√°pida SynapScale

echo "üöÄ Executando manuten√ß√£o r√°pida..."
python tools/database/maintenance_automation.py
EOF

chmod +x quick_maintenance.sh

success "Comando r√°pido criado: ./quick_maintenance.sh"

# Sugerir configura√ß√£o de cron
log "Configura√ß√£o de agendamento (cron)..."

echo ""
echo "üìÖ Para agendar manuten√ß√£o autom√°tica, adicione ao cron:"
echo ""
echo "# Manuten√ß√£o di√°ria √†s 02:00"
echo "0 2 * * * cd $(pwd) && ./scripts/automation/daily_maintenance.sh >> logs/maintenance.log 2>&1"
echo ""
echo "Para configurar:"
echo "  crontab -e"
echo "  # Cole a linha acima"
echo ""

# Teste b√°sico
log "Executando teste b√°sico..."

if python3 tools/database/health_check_master.py --help >/dev/null 2>&1; then
    success "Health Check Master funcionando"
else
    error "Erro no Health Check Master"
fi

if python3 tools/database/sync_validator.py --help >/dev/null 2>&1; then
    success "Sync Validator funcionando"
else
    error "Erro no Sync Validator"
fi

if python3 tools/database/doc_generator.py --help >/dev/null 2>&1; then
    success "Doc Generator funcionando"
else
    error "Erro no Doc Generator"
fi

if python3 tools/database/maintenance_automation.py --help >/dev/null 2>&1; then
    success "Maintenance Automation funcionando"
else
    error "Erro no Maintenance Automation"
fi

# Resumo final
echo ""
echo "üéâ SETUP CONCLU√çDO COM SUCESSO!"
echo "================================="
echo ""
echo "üìã Pr√≥ximos passos:"
echo "1. Configure as vari√°veis no .env"
echo "2. Execute: ./quick_maintenance.sh"
echo "3. Configure agendamento com cron (opcional)"
echo "4. Monitore relat√≥rios em reports/maintenance/"
echo ""
echo "üõ†Ô∏è Comandos dispon√≠veis:"
echo "  ./quick_maintenance.sh                           # Manuten√ß√£o completa"
echo "  python tools/database/health_check_master.py    # Apenas health check"
echo "  python tools/database/sync_validator.py         # Apenas valida√ß√£o de sync"
echo "  python tools/database/doc_generator.py          # Apenas documenta√ß√£o"
echo ""
echo "üìä Dashboards:"
echo "  docs/database/health_dashboard.html             # Dashboard de sa√∫de"
echo "  docs/database/schema.md                         # Documenta√ß√£o do schema"
echo "  reports/maintenance/                            # Relat√≥rios de manuten√ß√£o"
echo ""
echo "‚úÖ Sistema de manuten√ß√£o automatizada configurado!"
EOF

chmod +x tools/database/setup_automation.sh

success "Script setup_automation.sh criado com sucesso"
