[pytest]
# Configuração do pytest para SynapScale Backend
minversion = 7.0

# Diretórios para buscar testes
testpaths = tests

# Diretórios de código fonte
pythonpath = 
    src

# Padrões de arquivos de teste
python_files = test_*.py *_test.py tests.py
python_classes = Test* *Tests
python_functions = test_*

# Markers customizados
markers =
    unit: marca testes unitários
    integration: marca testes de integração
    llm: marca testes relacionados a LLM
    slow: marca testes que demoram para executar
    database: marca testes que requerem banco de dados
    api: marca testes de API/endpoints
    auth: marca testes de autenticação
    metrics: marca testes de métricas
    performance: marca testes de performance

# Configurações de output
addopts = 
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --maxfail=10
    --durations=10
    --cov=src/synapse
    --cov-report=term-missing
    --cov-report=html:htmlcov
    --cov-report=xml:coverage.xml

# Configurações de logging
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Configurações de warnings
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore:.*unclosed.*:ResourceWarning

# Configurações específicas para testes assíncronos
asyncio_mode = auto

# Configurações de timeout (para evitar testes infinitos)
timeout = 300

# Configurações de cache
cache_dir = .pytest_cache

[coverage:run]
source = src/synapse
omit =
    */tests/*
    */migrations/*
    */__init__.py
    */conftest.py

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == "__main__":
