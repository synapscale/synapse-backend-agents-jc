#!/usr/bin/env python3
"""
üß™ Script de Teste: Logs de Autentica√ß√£o Melhorados

Este script testa se os logs de login est√£o sendo exibidos 
de forma organizada e visualmente destacada.
"""

import requests
import json
import time

BASE_URL = "http://localhost:8000/api/v1"

def test_auth_logs():
    """Testa os logs de autentica√ß√£o melhorados"""
    
    print("üß™ TESTE: Logs de Autentica√ß√£o Melhorados")
    print("=" * 50)
    
    # Teste 1: Login com sucesso (JSON)
    print("\n1Ô∏è‚É£ Teste de Login com Sucesso (JSON)")
    print("-" * 30)
    
    success_data = {
        "username": "joaovictor@liderimobiliaria.com.br",
        "password": "@Teste123"
    }
    
    try:
        response = requests.post(
            f"{BASE_URL}/auth/login",
            json=success_data,
            headers={"Content-Type": "application/json"}
        )
        
        if response.status_code == 200:
            print("‚úÖ Login com sucesso - verificar logs!")
            result = response.json()
            print(f"   Token obtido: {result['data']['access_token'][:50]}...")
        else:
            print(f"‚ùå Falha no login: {response.status_code}")
            print(f"   Resposta: {response.text}")
            
    except Exception as e:
        print(f"‚ùå Erro na requisi√ß√£o: {e}")
    
    time.sleep(1)
    
    # Teste 2: Login com senha incorreta
    print("\n2Ô∏è‚É£ Teste de Login com Senha Incorreta")
    print("-" * 30)
    
    wrong_password_data = {
        "username": "joaovictor@liderimobiliaria.com.br",
        "password": "senha_errada"
    }
    
    try:
        response = requests.post(
            f"{BASE_URL}/auth/login",
            json=wrong_password_data,
            headers={"Content-Type": "application/json"}
        )
        
        if response.status_code == 401:
            print("‚úÖ Falha de login detectada - verificar logs!")
        else:
            print(f"‚ùì Resposta inesperada: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå Erro na requisi√ß√£o: {e}")
    
    time.sleep(1)
    
    # Teste 3: Login com usu√°rio inexistente  
    print("\n3Ô∏è‚É£ Teste de Login com Usu√°rio Inexistente")
    print("-" * 30)
    
    nonexistent_user_data = {
        "username": "usuario_inexistente@teste.com",
        "password": "qualquer_senha"
    }
    
    try:
        response = requests.post(
            f"{BASE_URL}/auth/login",
            json=nonexistent_user_data,
            headers={"Content-Type": "application/json"}
        )
        
        if response.status_code == 401:
            print("‚úÖ Usu√°rio n√£o encontrado - verificar logs!")
        else:
            print(f"‚ùì Resposta inesperada: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå Erro na requisi√ß√£o: {e}")
    
    print("\n" + "=" * 50)
    print("‚úÖ TESTES CONCLU√çDOS!")
    print("üìã Verificar os logs do servidor para:")
    print("   - üîê ‚úÖ LOGIN SUCCESS (log de sucesso)")
    print("   - üîê ‚ùå LOGIN FAILED (logs de falha)")
    print("   - Aus√™ncia de logs desnecess√°rios (current-url, identity)")

if __name__ == "__main__":
    test_auth_logs() 