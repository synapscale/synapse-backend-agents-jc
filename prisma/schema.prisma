generator client {
  provider = "prisma-client-js"
  engineType = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =====================================================
// TABELAS PRINCIPAIS (SCHEMA PRISMA)
// =====================================================

model User {
  id              String    @id @default(cuid()) @db.VarChar(30)
  email           String    @unique @db.VarChar(255)
  username        String    @unique @db.VarChar(100)
  fullName        String?   @map("full_name") @db.VarChar(255)
  hashedPassword  String    @map("hashed_password") @db.VarChar(255)
  isActive        Boolean   @default(true) @map("is_active")
  isSuperuser     Boolean   @default(false) @map("is_superuser")
  createdAt       DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt       DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  agents                    Agent[]
  conversations             Conversation[]
  files                     File[]
  workflows                 Workflow[]
  userVariables             UserVariable[]
  workflowTemplates         WorkflowTemplate[]
  templateReviews           TemplateReview[]
  templateDownloads         TemplateDownload[]
  templateFavorites         TemplateFavorite[]
  templateCollections       TemplateCollection[]
  templateUsage             TemplateUsage[]
  marketplaceComponents     MarketplaceComponent[]
  componentRatings          ComponentRating[]
  componentDownloads        ComponentDownload[]
  componentPurchases        ComponentPurchase[]
  componentFavorites        ComponentFavorite[]
  ownedWorkspaces           Workspace[]
  workspaceMemberships      WorkspaceMember[]
  workspaceInvitationsSent  WorkspaceInvitation[] @relation("InvitedBy")
  workspaceProjects         WorkspaceProject[]
  projectCollaborations     ProjectCollaborator[]
  projectComments           ProjectComment[]
  workspaceActivities       WorkspaceActivity[]
  projectVersions           ProjectVersion[]
  analyticsEvents           AnalyticsEvent[]
  analyticsDashboards       AnalyticsDashboard[]
  analyticsReports          AnalyticsReport[]
  analyticsAlerts           AnalyticsAlert[]
  analyticsExports          AnalyticsExport[]
  userBehaviorMetrics       UserBehaviorMetrics[]
  userInsights              UserInsight[]

  @@map("users")
}

model Agent {
  id            String    @id @default(cuid()) @db.VarChar(30)
  name          String    @db.VarChar(255)
  description   String?
  provider      String    @db.VarChar(100)
  model         String    @db.VarChar(100)
  systemPrompt  String?   @map("system_prompt")
  temperature   Decimal?  @default(0.7) @db.Decimal(3, 2)
  maxTokens     Int?      @default(1000) @map("max_tokens")
  isActive      Boolean   @default(true) @map("is_active")
  userId        String    @map("user_id") @db.VarChar(30)
  createdAt     DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt     DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversations Conversation[]

  @@map("agents")
}

model Conversation {
  id        String    @id @default(cuid()) @db.VarChar(30)
  title     String?   @db.VarChar(255)
  userId    String    @map("user_id") @db.VarChar(30)
  agentId   String?   @map("agent_id") @db.VarChar(30)
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  agent    Agent?    @relation(fields: [agentId], references: [id], onDelete: SetNull)
  messages Message[]

  @@map("conversations")
}

model Message {
  id             String   @id @default(cuid()) @db.VarChar(30)
  content        String
  role           String   @db.VarChar(20)
  conversationId String   @map("conversation_id") @db.VarChar(30)
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model File {
  id           String   @id @default(cuid()) @db.VarChar(30)
  filename     String   @db.VarChar(255)
  originalName String   @map("original_name") @db.VarChar(255)
  filePath     String   @map("file_path") @db.VarChar(500)
  fileSize     Int      @map("file_size")
  mimeType     String   @map("mime_type") @db.VarChar(100)
  category     String   @db.VarChar(50)
  isPublic     Boolean  @default(false) @map("is_public")
  userId       String   @map("user_id") @db.VarChar(30)
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("files")
}

model Workflow {
  id          String   @id @default(cuid()) @db.VarChar(30)
  name        String   @db.VarChar(255)
  description String?
  definition  Json
  isActive    Boolean  @default(true) @map("is_active")
  userId      String   @map("user_id") @db.VarChar(30)
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  workflowExecutions WorkflowExecution[]
  templateUsage      TemplateUsage[]

  @@map("workflows")
}

model WorkflowExecution {
  id          String    @id @default(cuid()) @db.VarChar(30)
  status      String    @default("pending") @db.VarChar(20)
  inputData   Json?     @map("input_data")
  outputData  Json?     @map("output_data")
  errorMessage String?  @map("error_message")
  workflowId  String    @map("workflow_id") @db.VarChar(30)
  startedAt   DateTime  @default(now()) @map("started_at") @db.Timestamptz
  completedAt DateTime? @map("completed_at") @db.Timestamptz

  // Relations
  workflow         Workflow           @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  nodeExecutions   NodeExecution[]
  executionQueue   ExecutionQueue[]
  executionMetrics ExecutionMetrics[]

  @@map("workflow_executions")
}

model Node {
  id          String   @id @default(cuid()) @db.VarChar(30)
  name        String   @db.VarChar(255)
  category    String   @db.VarChar(100)
  description String?
  version     String   @default("1.0.0") @db.VarChar(50)
  definition  Json
  isPublic    Boolean  @default(false) @map("is_public")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  nodeExecutions NodeExecution[]
  executionQueue ExecutionQueue[]

  @@map("nodes")
}

model UserVariable {
  id        String   @id @default(cuid()) @db.VarChar(30)
  key       String   @db.VarChar(255)
  value     String
  isSecret  Boolean  @default(false) @map("is_secret")
  userId    String   @map("user_id") @db.VarChar(30)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, key])
  @@map("user_variables")
}

// =====================================================
// TABELAS DE EXECUÇÃO
// =====================================================

model NodeExecution {
  id                   String    @id @default(cuid()) @db.VarChar(30)
  workflowExecutionId  String    @map("workflow_execution_id") @db.VarChar(30)
  nodeId               String    @map("node_id") @db.VarChar(30)
  status               String    @default("pending") @db.VarChar(20)
  inputData            Json?     @map("input_data")
  outputData           Json?     @map("output_data")
  errorMessage         String?   @map("error_message")
  executionTimeMs      Int       @default(0) @map("execution_time_ms")
  startedAt            DateTime  @default(now()) @map("started_at") @db.Timestamptz
  completedAt          DateTime? @map("completed_at") @db.Timestamptz

  // Relations
  workflowExecution WorkflowExecution @relation(fields: [workflowExecutionId], references: [id], onDelete: Cascade)
  node              Node              @relation(fields: [nodeId], references: [id], onDelete: Cascade)

  @@map("node_executions")
}

model ExecutionQueue {
  id                  String   @id @default(cuid()) @db.VarChar(30)
  workflowExecutionId String   @map("workflow_execution_id") @db.VarChar(30)
  nodeId              String   @map("node_id") @db.VarChar(30)
  priority            Int      @default(0)
  scheduledAt         DateTime @default(now()) @map("scheduled_at") @db.Timestamptz
  status              String   @default("queued") @db.VarChar(20)
  attempts            Int      @default(0)
  maxAttempts         Int      @default(3) @map("max_attempts")
  createdAt           DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt           DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  workflowExecution WorkflowExecution @relation(fields: [workflowExecutionId], references: [id], onDelete: Cascade)
  node              Node              @relation(fields: [nodeId], references: [id], onDelete: Cascade)

  @@map("execution_queue")
}

model ExecutionMetrics {
  id                   String   @id @default(cuid()) @db.VarChar(30)
  workflowExecutionId  String   @map("workflow_execution_id") @db.VarChar(30)
  totalNodes           Int      @default(0) @map("total_nodes")
  completedNodes       Int      @default(0) @map("completed_nodes")
  failedNodes          Int      @default(0) @map("failed_nodes")
  totalExecutionTimeMs Int      @default(0) @map("total_execution_time_ms")
  memoryUsageMb        Decimal  @default(0) @map("memory_usage_mb") @db.Decimal(10, 2)
  cpuUsagePercent      Decimal  @default(0) @map("cpu_usage_percent") @db.Decimal(5, 2)
  createdAt            DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt            DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  workflowExecution WorkflowExecution @relation(fields: [workflowExecutionId], references: [id], onDelete: Cascade)

  @@map("execution_metrics")
}

// =====================================================
// TABELAS DE TEMPLATES
// =====================================================

model WorkflowTemplate {
  id                 String   @id @default(cuid()) @db.VarChar(30)
  name               String   @db.VarChar(255)
  description        String?
  category           String   @db.VarChar(100)
  tags               String?
  workflowDefinition Json     @map("workflow_definition")
  previewImage       String?  @map("preview_image") @db.VarChar(500)
  authorId           String   @map("author_id") @db.VarChar(30)
  version            String   @default("1.0.0") @db.VarChar(50)
  isPublic           Boolean  @default(false) @map("is_public")
  isFeatured         Boolean  @default(false) @map("is_featured")
  downloadsCount     Int      @default(0) @map("downloads_count")
  ratingAverage      Decimal  @default(0.00) @map("rating_average") @db.Decimal(3, 2)
  ratingCount        Int      @default(0) @map("rating_count")
  price              Decimal  @default(0.00) @db.Decimal(10, 2)
  isFree             Boolean  @default(true) @map("is_free")
  license            String   @default("MIT") @db.VarChar(50)
  createdAt          DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt          DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  author            User               @relation(fields: [authorId], references: [id], onDelete: Cascade)
  reviews           TemplateReview[]
  downloads         TemplateDownload[]
  favorites         TemplateFavorite[]
  usage             TemplateUsage[]

  @@map("workflow_templates")
}

model TemplateReview {
  id                   String   @id @default(cuid()) @db.VarChar(30)
  templateId           String   @map("template_id") @db.VarChar(30)
  userId               String   @map("user_id") @db.VarChar(30)
  rating               Int
  comment              String?
  isVerifiedPurchase   Boolean  @default(false) @map("is_verified_purchase")
  createdAt            DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt            DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  template WorkflowTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  user     User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([templateId, userId])
  @@map("template_reviews")
}

model TemplateDownload {
  id           String   @id @default(cuid()) @db.VarChar(30)
  templateId   String   @map("template_id") @db.VarChar(30)
  userId       String   @map("user_id") @db.VarChar(30)
  downloadDate DateTime @default(now()) @map("download_date") @db.Timestamptz
  ipAddress    String?  @map("ip_address")
  userAgent    String?  @map("user_agent")

  // Relations
  template WorkflowTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  user     User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("template_downloads")
}

model TemplateFavorite {
  id         String   @id @default(cuid()) @db.VarChar(30)
  templateId String   @map("template_id") @db.VarChar(30)
  userId     String   @map("user_id") @db.VarChar(30)
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  template WorkflowTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  user     User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([templateId, userId])
  @@map("template_favorites")
}

model TemplateCollection {
  id          String   @id @default(cuid()) @db.VarChar(30)
  name        String   @db.VarChar(255)
  description String?
  ownerId     String   @map("owner_id") @db.VarChar(30)
  isPublic    Boolean  @default(false) @map("is_public")
  templateIds String?  @map("template_ids")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  @@map("template_collections")
}

model TemplateUsage {
  id            String   @id @default(cuid()) @db.VarChar(30)
  templateId    String   @map("template_id") @db.VarChar(30)
  userId        String   @map("user_id") @db.VarChar(30)
  workflowId    String?  @map("workflow_id") @db.VarChar(30)
  usageDate     DateTime @default(now()) @map("usage_date") @db.Timestamptz
  usageContext  String?  @map("usage_context") @db.VarChar(100)

  // Relations
  template WorkflowTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  user     User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  workflow Workflow?         @relation(fields: [workflowId], references: [id], onDelete: SetNull)

  @@map("template_usage")
}

// =====================================================
// TABELAS DE CONFIGURAÇÃO DE EXECUTORES
// =====================================================

model ExecutorConfig {
  id           String   @id @default(cuid()) @db.VarChar(30)
  name         String   @db.VarChar(255)
  executorType String   @map("executor_type") @db.VarChar(100)
  config       Json
  isActive     Boolean  @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  @@map("executor_configs")
}

model HttpCache {
  id           String    @id @default(cuid()) @db.VarChar(30)
  urlHash      String    @unique @map("url_hash") @db.VarChar(64)
  url          String
  method       String    @default("GET") @db.VarChar(10)
  headers      Json?
  responseData Json?     @map("response_data")
  statusCode   Int?      @map("status_code")
  expiresAt    DateTime? @map("expires_at") @db.Timestamptz
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamptz

  @@map("http_cache")
}

model ExecutorMetrics {
  id                       String    @id @default(cuid()) @db.VarChar(30)
  executorType             String    @map("executor_type") @db.VarChar(100)
  totalExecutions          Int       @default(0) @map("total_executions")
  successfulExecutions     Int       @default(0) @map("successful_executions")
  failedExecutions         Int       @default(0) @map("failed_executions")
  averageExecutionTimeMs   Decimal   @default(0) @map("average_execution_time_ms") @db.Decimal(10, 2)
  lastExecutionAt          DateTime? @map("last_execution_at") @db.Timestamptz
  createdAt                DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt                DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  @@map("executor_metrics")
}

// =====================================================
// TABELAS DO MARKETPLACE
// =====================================================

model MarketplaceComponent {
  id              String   @id @default(cuid()) @db.VarChar(30)
  name            String   @db.VarChar(255)
  description     String?
  category        String   @db.VarChar(100)
  componentType   String   @map("component_type") @db.VarChar(50)
  tags            String?
  price           Decimal  @default(0.00) @db.Decimal(10, 2)
  isFree          Boolean  @default(true) @map("is_free")
  authorId        String   @map("author_id") @db.VarChar(30)
  version         String   @default("1.0.0") @db.VarChar(50)
  content         String?
  metadata        String?
  downloadsCount  Int      @default(0) @map("downloads_count")
  ratingAverage   Decimal  @default(0.00) @map("rating_average") @db.Decimal(3, 2)
  ratingCount     Int      @default(0) @map("rating_count")
  isFeatured      Boolean  @default(false) @map("is_featured")
  isApproved      Boolean  @default(false) @map("is_approved")
  status          String   @default("pending") @db.VarChar(20)
  createdAt       DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt       DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  author     User                  @relation(fields: [authorId], references: [id], onDelete: Cascade)
  ratings    ComponentRating[]
  downloads  ComponentDownload[]
  purchases  ComponentPurchase[]
  favorites  ComponentFavorite[]
  versions   ComponentVersion[]

  @@map("marketplace_components")
}

model ComponentRating {
  id          String   @id @default(cuid()) @db.VarChar(30)
  componentId String   @map("component_id") @db.VarChar(30)
  userId      String   @map("user_id") @db.VarChar(30)
  rating      Int
  comment     String?
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  component MarketplaceComponent @relation(fields: [componentId], references: [id], onDelete: Cascade)
  user      User                 @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([componentId, userId])
  @@map("component_ratings")
}

model ComponentDownload {
  id           String   @id @default(cuid()) @db.VarChar(30)
  componentId  String   @map("component_id") @db.VarChar(30)
  userId       String   @map("user_id") @db.VarChar(30)
  downloadDate DateTime @default(now()) @map("download_date") @db.Timestamptz
  ipAddress    String?  @map("ip_address")
  userAgent    String?  @map("user_agent")

  // Relations
  component MarketplaceComponent @relation(fields: [componentId], references: [id], onDelete: Cascade)
  user      User                 @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("component_downloads")
}

model ComponentPurchase {
  id            String   @id @default(cuid()) @db.VarChar(30)
  componentId   String   @map("component_id") @db.VarChar(30)
  userId        String   @map("user_id") @db.VarChar(30)
  purchasePrice Decimal  @map("purchase_price") @db.Decimal(10, 2)
  paymentMethod String?  @map("payment_method") @db.VarChar(50)
  transactionId String?  @map("transaction_id") @db.VarChar(255)
  purchaseDate  DateTime @default(now()) @map("purchase_date") @db.Timestamptz

  // Relations
  component MarketplaceComponent @relation(fields: [componentId], references: [id], onDelete: Cascade)
  user      User                 @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("component_purchases")
}

model ComponentFavorite {
  id          String   @id @default(cuid()) @db.VarChar(30)
  componentId String   @map("component_id") @db.VarChar(30)
  userId      String   @map("user_id") @db.VarChar(30)
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  component MarketplaceComponent @relation(fields: [componentId], references: [id], onDelete: Cascade)
  user      User                 @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([componentId, userId])
  @@map("component_favorites")
}

model ComponentVersion {
  id          String   @id @default(cuid()) @db.VarChar(30)
  componentId String   @map("component_id") @db.VarChar(30)
  version     String   @db.VarChar(50)
  changelog   String?
  content     String?
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  component MarketplaceComponent @relation(fields: [componentId], references: [id], onDelete: Cascade)

  @@unique([componentId, version])
  @@map("component_versions")
}

// =====================================================
// TABELAS DE WORKSPACES
// =====================================================

model Workspace {
  id          String   @id @default(cuid()) @db.VarChar(30)
  name        String   @db.VarChar(255)
  description String?
  ownerId     String   @map("owner_id") @db.VarChar(30)
  isPublic    Boolean  @default(false) @map("is_public")
  settings    Json     @default("{}")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  owner       User                  @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  members     WorkspaceMember[]
  invitations WorkspaceInvitation[]
  projects    WorkspaceProject[]
  activities  WorkspaceActivity[]

  @@map("workspaces")
}

model WorkspaceMember {
  id          String   @id @default(cuid()) @db.VarChar(30)
  workspaceId String   @map("workspace_id") @db.VarChar(30)
  userId      String   @map("user_id") @db.VarChar(30)
  role        String   @default("member") @db.VarChar(20)
  permissions Json     @default("{}")
  joinedAt    DateTime @default(now()) @map("joined_at") @db.Timestamptz

  // Relations
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([workspaceId, userId])
  @@map("workspace_members")
}

model WorkspaceInvitation {
  id          String    @id @default(cuid()) @db.VarChar(30)
  workspaceId String    @map("workspace_id") @db.VarChar(30)
  email       String    @db.VarChar(255)
  role        String    @default("member") @db.VarChar(20)
  invitedBy   String    @map("invited_by") @db.VarChar(30)
  token       String    @unique @db.VarChar(255)
  expiresAt   DateTime  @map("expires_at") @db.Timestamptz
  acceptedAt  DateTime? @map("accepted_at") @db.Timestamptz
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  inviter   User      @relation("InvitedBy", fields: [invitedBy], references: [id], onDelete: Cascade)

  @@unique([email])
  @@map("workspace_invitations")
}

model WorkspaceProject {
  id          String   @id @default(cuid()) @db.VarChar(30)
  workspaceId String   @map("workspace_id") @db.VarChar(30)
  name        String   @db.VarChar(255)
  description String?
  status      String   @default("active") @db.VarChar(20)
  createdBy   String   @map("created_by") @db.VarChar(30)
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  workspace     Workspace             @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  creator       User                  @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  collaborators ProjectCollaborator[]
  comments      ProjectComment[]
  versions      ProjectVersion[]

  @@map("workspace_projects")
}

model ProjectCollaborator {
  id        String   @id @default(cuid()) @db.VarChar(30)
  projectId String   @map("project_id") @db.VarChar(30)
  userId    String   @map("user_id") @db.VarChar(30)
  role      String   @default("collaborator") @db.VarChar(20)
  addedAt   DateTime @default(now()) @map("added_at") @db.Timestamptz

  // Relations
  project WorkspaceProject @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@map("project_collaborators")
}

model ProjectComment {
  id              String   @id @default(cuid()) @db.VarChar(30)
  projectId       String   @map("project_id") @db.VarChar(30)
  userId          String   @map("user_id") @db.VarChar(30)
  content         String
  parentCommentId String?  @map("parent_comment_id") @db.VarChar(30)
  isResolved      Boolean  @default(false) @map("is_resolved")
  createdAt       DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt       DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  project       WorkspaceProject @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user          User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  parentComment ProjectComment?  @relation("CommentReplies", fields: [parentCommentId], references: [id], onDelete: Cascade)
  replies       ProjectComment[] @relation("CommentReplies")

  @@map("project_comments")
}

model WorkspaceActivity {
  id           String   @id @default(cuid()) @db.VarChar(30)
  workspaceId  String   @map("workspace_id") @db.VarChar(30)
  userId       String   @map("user_id") @db.VarChar(30)
  activityType String   @map("activity_type") @db.VarChar(50)
  entityType   String?  @map("entity_type") @db.VarChar(50)
  entityId     String?  @map("entity_id") @db.VarChar(30)
  description  String?
  metadata     Json     @default("{}")
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("workspace_activities")
}

model ProjectVersion {
  id          String   @id @default(cuid()) @db.VarChar(30)
  projectId   String   @map("project_id") @db.VarChar(30)
  version     String   @db.VarChar(50)
  description String?
  data        Json
  createdBy   String   @map("created_by") @db.VarChar(30)
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  project WorkspaceProject @relation(fields: [projectId], references: [id], onDelete: Cascade)
  creator User             @relation(fields: [createdBy], references: [id], onDelete: Cascade)

  @@map("project_versions")
}

// =====================================================
// TABELAS DE ANALYTICS
// =====================================================

model AnalyticsEvent {
  id        String   @id @default(cuid()) @db.VarChar(30)
  eventType String   @map("event_type") @db.VarChar(100)
  userId    String?  @map("user_id") @db.VarChar(30)
  sessionId String?  @map("session_id") @db.VarChar(255)
  properties Json    @default("{}")
  timestamp DateTime @default(now()) @db.Timestamptz
  ipAddress String?  @map("ip_address")
  userAgent String?  @map("user_agent")

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("analytics_events")
}

model AnalyticsMetrics {
  id          String   @id @default(cuid()) @db.VarChar(30)
  metricName  String   @map("metric_name") @db.VarChar(100)
  metricValue Decimal  @map("metric_value") @db.Decimal(15, 4)
  dimensions  Json     @default("{}")
  timestamp   DateTime @default(now()) @db.Timestamptz
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz

  @@map("analytics_metrics")
}

model AnalyticsDashboard {
  id          String   @id @default(cuid()) @db.VarChar(30)
  name        String   @db.VarChar(255)
  description String?
  ownerId     String   @map("owner_id") @db.VarChar(30)
  config      Json
  isPublic    Boolean  @default(false) @map("is_public")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  @@map("analytics_dashboards")
}

model AnalyticsReport {
  id          String   @id @default(cuid()) @db.VarChar(30)
  name        String   @db.VarChar(255)
  description String?
  query       Json
  schedule    String?  @db.VarChar(50)
  ownerId     String   @map("owner_id") @db.VarChar(30)
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  owner      User               @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  executions ReportExecution[]

  @@map("analytics_reports")
}

model ReportExecution {
  id           String    @id @default(cuid()) @db.VarChar(30)
  reportId     String    @map("report_id") @db.VarChar(30)
  status       String    @default("pending") @db.VarChar(20)
  result       Json?
  errorMessage String?   @map("error_message")
  executedAt   DateTime  @default(now()) @map("executed_at") @db.Timestamptz
  completedAt  DateTime? @map("completed_at") @db.Timestamptz

  // Relations
  report AnalyticsReport @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@map("report_executions")
}

model AnalyticsAlert {
  id                 String    @id @default(cuid()) @db.VarChar(30)
  name               String    @db.VarChar(255)
  description        String?
  condition          Json
  notificationConfig Json      @map("notification_config")
  isActive           Boolean   @default(true) @map("is_active")
  ownerId            String    @map("owner_id") @db.VarChar(30)
  lastTriggeredAt    DateTime? @map("last_triggered_at") @db.Timestamptz
  createdAt          DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt          DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  @@map("analytics_alerts")
}

model AnalyticsExport {
  id          String    @id @default(cuid()) @db.VarChar(30)
  name        String    @db.VarChar(255)
  exportType  String    @map("export_type") @db.VarChar(50)
  query       Json
  filePath    String?   @map("file_path") @db.VarChar(500)
  status      String    @default("pending") @db.VarChar(20)
  ownerId     String    @map("owner_id") @db.VarChar(30)
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz
  completedAt DateTime? @map("completed_at") @db.Timestamptz

  // Relations
  owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  @@map("analytics_exports")
}

// =====================================================
// TABELAS ADICIONAIS DOS MODELOS PYTHON
// =====================================================

model UserBehaviorMetrics {
  id          String   @id @default(cuid()) @db.VarChar(30)
  userId      String?  @map("user_id") @db.VarChar(30)
  metricType  String   @map("metric_type") @db.VarChar(100)
  metricValue Decimal  @map("metric_value") @db.Decimal(15, 4)
  context     Json     @default("{}")
  timestamp   DateTime @default(now()) @db.Timestamptz

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("user_behavior_metrics")
}

model SystemPerformanceMetrics {
  id          String   @id @default(cuid()) @db.VarChar(30)
  metricType  String   @map("metric_type") @db.VarChar(100)
  metricValue Decimal  @map("metric_value") @db.Decimal(15, 4)
  component   String?  @db.VarChar(100)
  metadata    Json     @default("{}")
  timestamp   DateTime @default(now()) @db.Timestamptz

  @@map("system_performance_metrics")
}

model BusinessMetrics {
  id          String   @id @default(cuid()) @db.VarChar(30)
  metricType  String   @map("metric_type") @db.VarChar(100)
  metricValue Decimal  @map("metric_value") @db.Decimal(15, 4)
  period      String?  @db.VarChar(50)
  dimensions  Json     @default("{}")
  timestamp   DateTime @default(now()) @db.Timestamptz

  @@map("business_metrics")
}

model UserInsight {
  id              String    @id @default(cuid()) @db.VarChar(30)
  userId          String    @map("user_id") @db.VarChar(30)
  insightType     String    @map("insight_type") @db.VarChar(100)
  insightData     Json      @map("insight_data")
  confidenceScore Decimal?  @map("confidence_score") @db.Decimal(3, 2)
  generatedAt     DateTime  @default(now()) @map("generated_at") @db.Timestamptz
  expiresAt       DateTime? @map("expires_at") @db.Timestamptz

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_insights")
}
