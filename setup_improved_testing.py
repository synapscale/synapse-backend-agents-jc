#!/usr/bin/env python3
"""
Script para configurar ambiente de teste melhorado
Instala depend√™ncias e valida configura√ß√£o
"""
import subprocess
import sys
import os

def install_dependencies():
    """Instala depend√™ncias necess√°rias"""
    print("üîß Instalando depend√™ncias para teste melhorado...")
    
    dependencies = [
        "jsonschema>=4.0.0",
        "requests>=2.25.0"
    ]
    
    for dep in dependencies:
        try:
            print(f"   Instalando {dep}...")
            subprocess.check_call([
                sys.executable, "-m", "pip", "install", dep
            ], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            print(f"   ‚úÖ {dep} instalado")
        except subprocess.CalledProcessError:
            print(f"   ‚ùå Erro ao instalar {dep}")
            return False
    
    return True

def validate_environment():
    """Valida ambiente de teste"""
    print("\nüîç Validando ambiente...")
    
    try:
        import jsonschema
        import requests
        print("   ‚úÖ Todas as depend√™ncias est√£o dispon√≠veis")
        
        # Verificar se API est√° acess√≠vel
        try:
            response = requests.get("http://localhost:8000", timeout=5)
            print("   ‚úÖ API SynapScale est√° acess√≠vel")
        except:
            print("   ‚ö†Ô∏è  API SynapScale n√£o est√° rodando em localhost:8000")
            print("      Execute 'python main.py' ou 'uvicorn main:app --reload' primeiro")
        
        return True
    except ImportError as e:
        print(f"   ‚ùå Depend√™ncia faltando: {e}")
        return False

def create_test_config():
    """Cria arquivo de configura√ß√£o de teste"""
    config = {
        "api_base_url": "http://localhost:8000",
        "timeout_seconds": 30,
        "test_user_prefix": "improved_test_",
        "cleanup_resources": True,
        "validate_schemas": True,
        "performance_threshold": 10.0,
        "success_rate_threshold": 90.0
    }
    
    try:
        import json
        with open("test_config.json", "w") as f:
            json.dump(config, f, indent=2)
        print("   ‚úÖ Arquivo test_config.json criado")
    except Exception as e:
        print(f"   ‚ö†Ô∏è  Erro ao criar configura√ß√£o: {e}")

def main():
    print("üöÄ CONFIGURA√á√ÉO DO AMBIENTE DE TESTE MELHORADO")
    print("=" * 50)
    
    # 1. Instalar depend√™ncias
    if not install_dependencies():
        print("\n‚ùå Falha na instala√ß√£o de depend√™ncias")
        return 1
    
    # 2. Validar ambiente
    if not validate_environment():
        print("\n‚ùå Ambiente n√£o est√° v√°lido")
        return 1
    
    # 3. Criar configura√ß√£o
    create_test_config()
    
    print("\n‚úÖ AMBIENTE CONFIGURADO COM SUCESSO!")
    print("\nPr√≥ximos passos:")
    print("1. Execute: python test_endpoints_unified_improved.py --verbose")
    print("2. Para salvar relat√≥rio JSON: python test_endpoints_unified_improved.py --output-json")
    print("3. Para usar URL diferente: python test_endpoints_unified_improved.py --base-url http://sua-url")
    
    return 0

if __name__ == "__main__":
    sys.exit(main()) 